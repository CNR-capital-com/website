(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["grapesjs"] = factory();
	else
		root["grapesjs"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/backbone-undo/Backbone.Undo.js":
/*!*****************************************************!*\
  !*** ./node_modules/backbone-undo/Backbone.Undo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Backbone.Undo.js v0.2
 * 
 * Copyright (c)2013 Oliver Sartun
 * Released under the MIT License
 *
 * Documentation and full license available at
 * https://github.com/osartun/Backbone.Undo.js
 */


(function (factory) {
	if (true) {
		// AMD support
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js"), __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
})(function (_, Backbone) {

	var core_slice = Array.prototype.slice;

	/**
	 * As call is faster than apply, this is a faster version of apply as it uses call.
	 * 
	 * @param  {Function} fn 	The function to execute 
	 * @param  {Object}   ctx 	The context the function should be called in
	 * @param  {Array}    args 	The array of arguments that should be applied to the function
	 * @return Forwards whatever the called function returns
	 */
	function apply (fn, ctx, args) {
		return args.length <= 4 ?
			fn.call(ctx, args[0], args[1], args[2], args[3]) :
			fn.apply(ctx, args);
	}

	/**
	 * Uses slice on an array or an array-like object.
	 * 
	 * @param  {Array|Object} 	arr 	The array or array-like object.
	 * @param  {Number} 		[index]	The index from where the array should be sliced. Default is 0.
	 * @return {Array} The sliced array
	 */
	function slice (arr, index) {
		return core_slice.call(arr, index);
	}

	/**
	 * Checks if an object has one or more specific keys. The keys 
	 * don't have to be an owned property.
	 * You can call this function either this way:
	 * hasKeys(obj, ["a", "b", "c"])
	 * or this way:
	 * hasKeys(obj, "a", "b", "c")
	 * 
	 * @param  {Object}  	obj 	The object to check on
	 * @param  {Array}  	keys 	The keys to check for
	 * @return {Boolean} True, if the object has all those keys
	 */
	function hasKeys (obj, keys) {
		if (obj == null) return false;
		if (!_.isArray(keys)) {
			keys = slice(arguments, 1);
		}
		return _.all(keys, function (key) {
			return key in obj;
		});
	}

	/**
	 * Returns a number that is unique per call stack. The number gets 
	 * changed after the call stack has been completely processed.
	 * 
	 * @return {number} MagicFusionIndex
	 */
	var getMagicFusionIndex = (function () {
		// If you add several models to a collection or set several
		// attributes on a model all in sequence and yet all for
		// example in one function, then several Undo-Actions are
		// generated.
		// If you want to undo your last action only the last model
		// would be removed from the collection or the last set
		// attribute would be changed back to its previous value.
		// To prevent that we have to figure out a way to combine
		// all those actions that happened "at the same time". 
		// Timestamps aren't exact enough. A complex routine could 
		// run several milliseconds and in that time produce a lot 
		// of actions with different timestamps.
		// Instead we take advantage of the single-threadedness of
		// JavaScript:

		var callstackWasIndexed = false, magicFusionIndex = -1;
		function indexCycle() {
			magicFusionIndex++;
			callstackWasIndexed = true;
			_.defer(function () {
				// Here comes the magic. With a Timeout of 0 
				// milliseconds this function gets called whenever
				// the current callstack is completed
				callstackWasIndexed = false;
			})
		}
		return function () {
			if (!callstackWasIndexed) {
				indexCycle();
			}
			return magicFusionIndex;
		}
	})();

	/**
	 * To prevent binding a listener several times to one 
	 * object, we register the objects in an ObjectRegistry
	 *
	 * @constructor
	 */
	function ObjectRegistry () {
		// This uses two different ways of storing
		// objects: In case the object has a cid
		// (which Backbone objects typically have)
		// it uses this cid as an index. That way
		// the Array's length attribute doesn't 
		// change and the object isn't an item 
		// in the array, but an object-property.
		// Otherwise it's added to the Array as an
		// item.
		// That way we can use the fast property-
		// lookup and only have to fall back to 
		// iterating over the array in case 
		// non-Backbone-objects are registered.
		this.registeredObjects = [];
		// To return a list of all registered 
		// objects in the 'get' method we have to
		// store the objects that have a cid in
		// an additional array. 
		this.cidIndexes = [];
	}
	ObjectRegistry.prototype = {
		/**
		 * Returns whether the object is already registered in this ObjectRegistry or not.
		 * 
		 * @this 	{ObjectRegistry}
		 * @param  	{Object} 		 obj 	The object to check
		 * @return 	{Boolean} True if the object is already registered
		 */
		isRegistered: function (obj) {
			// This is where we get a performance boost 
			// by using the two different ways of storing 
			// objects.
			return obj && obj.cid ? this.registeredObjects[obj.cid] : _.contains(this.registeredObjects, obj);
		},
		/**
		 * Registers an object in this ObjectRegistry.
		 * 
		 * @this 	{ObjectRegistry}
		 * @param  	{Object} 		 obj 	The object to register
		 * @return 	{undefined}
		 */
		register: function (obj) {
			if (!this.isRegistered(obj)) {
				if (obj && obj.cid) {
					this.registeredObjects[obj.cid] = obj;
					this.cidIndexes.push(obj.cid);
				} else {
					this.registeredObjects.push(obj);
				}
				return true;
			}
			return false;
		},
		/**
		 * Unregisters an object from this ObjectRegistry.
		 * 
		 * @this {ObjectRegistry}
		 * @param  {Object} obj The object to unregister
		 * @return {undefined}
		 */
		unregister: function (obj) {
			if (this.isRegistered(obj)) {
				if (obj && obj.cid) {
					delete this.registeredObjects[obj.cid];
					this.cidIndexes.splice(_.indexOf(this.cidIndexes, obj.cid), 1);
				} else {
					var i = _.indexOf(this.registeredObjects, obj);
					this.registeredObjects.splice(i, 1);
				}
				return true;
			}
			return false;
		},
		/**
		 * Returns an array of all objects that are currently in this ObjectRegistry.
		 * 
		 * @return {Array} An array of all the objects which are currently in the ObjectRegistry
		 */
		get: function () {
			return (_.map(this.cidIndexes, function (cid) {return this.registeredObjects[cid];}, this)).concat(this.registeredObjects);
		}
	}

	/**
	 * Binds or unbinds the "all"-listener for one or more objects.
	 * 
	 * @param  {String}   which 	Either "on" or "off"
	 * @param  {Object[]} objects 	Array of the objects on which the "all"-listener should be bound / unbound to
	 * @param  {Function} [fn] 		The function that should be bound / unbound. Optional in case of "off"
	 * @param  {Object}   [ctx] 	The context the function should be called in
	 * @return {undefined}
	 */
	function onoff(which, objects, fn, ctx) {
		for (var i = 0, l = objects.length, obj; i < l; i++) {
			obj = objects[i];
			if (!obj) continue;
			if (which === "on") {
				if (!ctx.objectRegistry.register(obj)) {
					// register returned false, so obj was already registered
					continue;
				}
			} else {
				if (!ctx.objectRegistry.unregister(obj)) {
					// unregister returned false, so obj wasn't registered
					continue;
				}
			}
			if (_.isFunction(obj[which])) {
				obj[which]("all", fn, ctx);
			}
		}
	}

	/**
	 * Calls the undo/redo-function for a specific action.
	 * 
	 * @param  {String} which 	Either "undo" or "redo"
	 * @param  {Object} action 	The Action's attributes
	 * @return {undefined}
	 */
	function actionUndoRedo (which, action) {
		var type = action.type, undoTypes = action.undoTypes, fn = !undoTypes[type] || undoTypes[type][which];
		if (_.isFunction(fn)) {
			fn(action.object, action.before, action.after, action.options);
		}
	}

	/**
	 * The main undo/redo function.
	 *
	 * @param  {String} 		which 	    Either "undo" or "redo"
	 * @param  {UndoManager} 	manager	    The UndoManager-instance on which an "undo"/"redo"-Event is triggered afterwards
	 * @param  {UndoStack} 		stack 	    The UndoStack on which we perform
	 * @param  {Boolean} 		magic 	    If true, undoes / redoes all actions with the same magicFusionIndex
	 * @param  {Boolean} 		everything  If true, undoes / redoes every action that had been tracked
	 * @return {undefined}
	 */
	function managerUndoRedo (which, manager, stack, magic, everything) {
		if (stack.isCurrentlyUndoRedoing || 
			(which === "undo" && stack.pointer === -1) ||
			(which === "redo" && stack.pointer === stack.length - 1)) {
			// We're either currently in an undo- / redo-process or 
			// we reached the end of the stack
			return;
		}
		stack.isCurrentlyUndoRedoing = true;
		var action, actions, isUndo = which === "undo";
		if (everything) {
			// Undo / Redo all steps until you reach the stack's beginning / end
			actions = isUndo && stack.pointer === stack.length - 1 || // If at the stack's end calling undo
					  !isUndo && stack.pointer === -1 ? // or at the stack's beginning calling redo
					  _.clone(stack.models) : // => Take all the models. Otherwise:
					  core_slice.apply(stack.models, isUndo ? [0, stack.pointer] : [stack.pointer, stack.length - 1]);
		} else {
			// Undo / Redo only one step
			action = stack.at(isUndo ? stack.pointer : stack.pointer + 1);
			actions = magic ? stack.where({"magicFusionIndex": action.get("magicFusionIndex")}) : [action];
		}
		
		stack.pointer += (isUndo ? -1 : 1) * actions.length;
		while (action = isUndo ? actions.pop() : actions.shift()) {
			// Here we're calling the Action's undo / redo method
			action[which]();
		}
		stack.isCurrentlyUndoRedoing = false;

		manager.trigger(which, manager);
	}

	/**
	 * Checks whether an UndoAction should be created or not. Therefore it checks
	 * whether a "condition" property is set in the undoTypes-object of the specific
	 * event type. If not, it returns true. If it's set and a boolean, it returns it.
	 * If it's a function, it returns its result, converting it into a boolean. 
	 * Otherwise it returns true.
	 * 
	 * @param  {Object} 	undoTypesType 	The object within the UndoTypes that holds the function for this event type (i.e. "change")
	 * @param  {Arguments} 	args       		The arguments the "condition" function is called with
	 * @return {Boolean} 	True, if an UndoAction should be created
	 */
	function validateUndoActionCreation (undoTypesType, args) {
		var condition = undoTypesType.condition, type = typeof condition;
		return type === "function" ? !!apply(condition, undoTypesType, args) :
			type === "boolean" ? condition : true;
	}

	/**
	 * Adds an Undo-Action to the stack.
	 * 
	 * @param {UndoStack} 		stack 		The undostack the action should be added to.
	 * @param {String} 			type 		The event type (i.e. "change")
	 * @param {Arguments} 		args 		The arguments passed to the undoTypes' "on"-handler
	 * @param {OwnedUndoTypes} 	undoTypes 	The undoTypes-object which has the "on"-handler
	 * @return {undefined}
	 */
	function addToStack(stack, type, args, undoTypes) {
		if (stack.track && !stack.isCurrentlyUndoRedoing && type in undoTypes &&
			validateUndoActionCreation(undoTypes[type], args)) {
			// An UndoAction should be created
			var res = apply(undoTypes[type]["on"], undoTypes[type], args), diff;
			if (hasKeys(res, "object", "before", "after")) {
				res.type = type;
				res.magicFusionIndex = getMagicFusionIndex();
				res.undoTypes = undoTypes;
				if (stack.pointer < stack.length - 1) {
					// New Actions must always be added to the end of the stack.
					// If the pointer is not pointed to the last action in the
					// stack, presumably because actions were undone before, then
					// all following actions must be discarded
					var diff = stack.length - stack.pointer - 1;
					while (diff--) {
						stack.pop();
					}
				}
				stack.pointer = stack.length;
				stack.add(res);
				if (stack.length > stack.maximumStackLength) {
					stack.shift();
					stack.pointer--;
				}
			}
		}
	}


	/**
	 * Predefined UndoTypes object with default handlers for the most common events.
	 * @type {Object}
	 */
	var UndoTypes = {
		"add": {
			"undo": function (collection, ignore, model, options) {
				// Undo add = remove
				collection.remove(model, options);
			},
			"redo": function (collection, ignore, model, options) {
				// Redo add = add
				if (options.index) {
					options.at = options.index;
				}
				collection.add(model, options);
			},
			"on": function (model, collection, options) {
				return {
					object: collection,
					before: undefined,
					after: model,
					options: _.clone(options)
				};
			}
		},
		"remove": {
			"undo": function (collection, model, ignore, options) {
				if ("index" in options) {
					options.at = options.index;
				}
				collection.add(model, options);
			},
			"redo": function (collection, model, ignore, options) {
				collection.remove(model, options);
			},
			"on": function (model, collection, options) {
				return {
					object: collection,
					before: model,
					after: undefined,
					options: _.clone(options)
				};
			}
		},
		"change": {
			"undo": function (model, before, after, options) {
				if (_.isEmpty(before)) {
					_.each(_.keys(after), model.unset, model);
				} else {
					model.set(before);
					if (options && options.unsetData && options.unsetData.before && options.unsetData.before.length) {
						_.each(options.unsetData.before, model.unset, model);
					}
				}
			},
			"redo": function (model, before, after, options) {
				if (_.isEmpty(after)) {
					_.each(_.keys(before), model.unset, model);
				} else {
					model.set(after);
					if (options && options.unsetData && options.unsetData.after && options.unsetData.after.length) {
						_.each(options.unsetData.after, model.unset, model);
					}
				}
			},
			"on": function (model, options) {
				var
				afterAttributes = model.changedAttributes(),
				keysAfter = _.keys(afterAttributes),
				previousAttributes = _.pick(model.previousAttributes(), keysAfter),
				keysPrevious = _.keys(previousAttributes),
				unsetData = (options || (options = {})).unsetData = {
					after: [],
					before: []
				};

				if (keysAfter.length != keysPrevious.length) {
					// There are new attributes or old attributes have been unset
					if (keysAfter.length > keysPrevious.length) {
						// New attributes have been added
						_.each(keysAfter, function (val) {
							if (!(val in previousAttributes)) {
								unsetData.before.push(val);
							}
						}, this);
					} else {
						// Old attributes have been unset
						_.each(keysPrevious, function (val) {
							if (!(val in afterAttributes)) {
								unsetData.after.push(val);
							}
						})
					}
				}
				return {
					object: model,
					before: previousAttributes,
					after: afterAttributes,
					options: _.clone(options)
				};
			}
		},
		"reset": {
			"undo": function (collection, before, after) {
				collection.reset(before);
			},
			"redo": function (collection, before, after) {
				collection.reset(after);
			},
			"on": function (collection, options) {
				return {
					object: collection,
					before: options.previousModels,
					after: _.clone(collection.models)
				};
			}
		}
	};

	/**
	 * Every UndoManager instance has an own undoTypes object
	 * which is an instance of OwnedUndoTypes. OwnedUndoTypes' 
	 * prototype is the global UndoTypes object. Changes to the 
	 * global UndoTypes object take effect on every instance of
	 * UndoManager as the object is its prototype. And yet every 
	 * local UndoTypes object can be changed individually.
	 *
	 * @constructor
	 */
	function OwnedUndoTypes () {}
	OwnedUndoTypes.prototype = UndoTypes;

	/**
	 * Adds, changes or removes an undo-type from an UndoTypes-object.
	 * You can call it this way:
	 * manipulateUndoType (1, "reset", {"on": function () {}}, undoTypes)
	 * or this way to perform bulk actions:
	 * manipulateUndoType (1, {"reset": {"on": function () {}}}, undoTypes)
	 * In case of removing undo-types you can pass an Array for performing
	 * bulk actions:
	 * manipulateUndoType(2, ["reset", "change"], undoTypes)
	 * 
	 * @param  {Number} 				  manipType 		Indicates the kind of action to execute: 0 for add, 1 for change, 2 for remove
	 * @param  {String|Object|Array} 	  undoType 			The type of undoType that should be added/changed/removed. Can be an object / array to perform bulk actions
	 * @param  {Object} 				  [fns] 			Object with the functions to add / change. Is optional in case you passed an object as undoType that contains these functions
	 * @param  {OwnedUndoTypes|UndoTypes} undoTypesInstance The undoTypes object to act on
	 * @return {undefined}
	 */
	function manipulateUndoType (manipType, undoType, fns, undoTypesInstance) {
		// manipType, passed by the calling function
		// 0: add
		// 1: change
		// 2: remove
		if (typeof undoType === "object") {
			// bulk action. Iterate over this data.
			return _.each(undoType, function (val, key) {
					if (manipType === 2) { // remove
						// undoType is an array
						manipulateUndoType (manipType, val, fns, undoTypesInstance);
					} else {
						// undoType is an object
						manipulateUndoType (manipType, key, val, fns);
					}
				})
		}

		switch (manipType) {
			case 0: // add
				if (hasKeys(fns, "undo", "redo", "on") && _.all(_.pick(fns, "undo", "redo", "on"), _.isFunction)) {
					undoTypesInstance[undoType] = fns;
				} 
			break;
			case 1: // change
				if (undoTypesInstance[undoType] && _.isObject(fns)) {
					// undoTypeInstance[undoType] may be a prototype's property
					// So, if we did this _.extend(undoTypeInstance[undoType], fns)
					// we would extend the object on the prototype which means
					// that this change would have a global effect
					// Instead we just want to manipulate this instance. That's why
					// we're doing this:
					undoTypesInstance[undoType] = _.extend({}, undoTypesInstance[undoType], fns);
				} 
			break;
			case 2: // remove
				delete undoTypesInstance[undoType]; 
			break;
		}
		return this;
	}

	/**
	 * Instantiating "Action" creates the UndoActions that 
	 * are collected in an UndoStack. It holds all relevant 
	 * data to undo / redo an action and has an undo / redo 
	 * method.
	 */
	var Action = Backbone.Model.extend({
		defaults: {
			type: null, // "add", "change", "reset", etc.
			object: null, // The object on which the action occurred
			before: null, // The previous values which were changed with this action
			after: null, // The values after this action
			magicFusionIndex: null // The magicFusionIndex helps to combine 
			// all actions that occurred "at the same time" to undo/redo them altogether
		},
		/**
		 * Undoes this action.
		 * @param  {OwnedUndoTypes|UndoTypes} undoTypes The undoTypes object which contains the "undo"-handler that should be used
		 * @return {undefined}
		 */
		undo: function (undoTypes) {
			actionUndoRedo("undo", this.attributes);
		},
		/**
		 * Redoes this action.
		 * @param  {OwnedUndoTypes|UndoTypes} undoTypes The undoTypes object which contains the "redo"-handler that should be used
		 * @return {undefined}
		 */
		redo: function (undoTypes) {
			actionUndoRedo("redo", this.attributes);
		}
	}),
	/**
	 * An UndoStack is a collection of UndoActions in 
	 * chronological order.
	 */
	UndoStack = Backbone.Collection.extend({
		model: Action,
		pointer: -1, // The pointer indicates the index where we are located within the stack. We start at -1
		track: false,
		isCurrentlyUndoRedoing: false,
		maximumStackLength: Infinity,
		setMaxLength: function (val) {
			this.maximumStackLength = val;
		}
	}),
	/**
	 * An instance of UndoManager can keep track of 
	 * changes to objects and helps to undo them.
	 */
	UndoManager = Backbone.Model.extend({
		defaults: {
			maximumStackLength: Infinity,
			track: false
		},
		/**
		 * The constructor function.
		 * @param  {attr} 		[attr] Object with parameters. The available parameters are:
		 *                         	   - maximumStackLength {number} 	Set the undo-stack's maximum size
		 *                             - track 				{boolean}	Start tracking changes right away
		 * @return {undefined}
		 */
		initialize: function (attr) {
			this.stack = new UndoStack;
			this.objectRegistry = new ObjectRegistry();
			this.undoTypes = new OwnedUndoTypes();

			// sync the maximumStackLength attribute with our stack
			this.stack.setMaxLength(this.get("maximumStackLength"));
			this.on("change:maximumStackLength", function (model, value) {
				this.stack.setMaxLength(value);
			}, this);

			// Start tracking, if attr.track == true
			if (attr && attr.track) {
				this.startTracking();
			}

			// Register objects passed in the "register" attribute
			if (attr && attr.register) {
				if (_.isArray(attr.register) || _.isArguments(attr.register)) {
					apply(this.register, this, attr.register);
				} else {
					this.register(attr.register);
				}
			}
		},
		/**
		 * Starts tracking. Changes of registered objects won't be processed until you've called this function
		 * @return {undefined}
		 */
		startTracking: function () {
			this.set("track", true);
			this.stack.track = true;
		},
		/**
		 * Stops tracking. Afterwards changes of registered objects won't be processed.
		 * @return {undefined}
		 */
		stopTracking: function () {
			this.set("track", false);
			this.stack.track = false;
		},
		/**
		 * Return the state of the tracking
		 * @return {boolean}
		 */
		isTracking: function () {
			return this.get("track");
		},
		/**
		 * This is the "all"-handler which is bound to registered 
		 * objects. It creates an UndoAction from the event and adds 
		 * it to the stack.
		 * 
		 * @param  {String} 	type 	The event type
		 * @return {undefined}
		 */
		_addToStack: function (type) {
			addToStack(this.stack, type, slice(arguments, 1), this.undoTypes);
		},
		/**
		 * Registers one or more objects to track their changes.
		 * @param {...Object} 	obj 	The object or objects of which changes should be tracked
		 * @return {undefined}
		 */
		register: function () {
			onoff("on", arguments, this._addToStack, this);
		},
		/**
		 * Unregisters one or more objects.
		 * @param {...Object} 	obj 	The object or objects of which changes shouldn't be tracked any longer
		 * @return {undefined}
		 */
		unregister: function () {
			onoff("off", arguments, this._addToStack, this);
		},
		/**
		 * Unregisters all previously registered objects.
		 * @return {undefined}
		 */
		unregisterAll: function () {
			apply(this.unregister, this, this.objectRegistry.get());
		},
		/**
		 * Undoes the last action or the last set of actions in case 'magic' is true.
		 * @param {Boolean} 	[magic] 	If true, all actions that happened basically at the same time are undone together
		 * @return {undefined}
		 */
		undo: function (magic) {
			managerUndoRedo("undo", this, this.stack, magic);
		},

		/**
		 * Undoes all actions ever tracked by the undo manager
		 * @return {undefined}
		 */
		undoAll: function () {
			managerUndoRedo("undo", this, this.stack, false, true);
		},

		/**
		 * Redoes a previously undone action or a set of actions.
		 * @param {Boolean} 	[magic] 	If true, all actions that happened basically at the same time are redone together
		 * @return {undefined}
		 */
		redo: function (magic) {
			managerUndoRedo("redo", this, this.stack, magic);
		},

		/**
		 * Redoes all actions ever tracked by the undo manager
		 * @return {undefined}
		 */
		redoAll: function () {
			managerUndoRedo("redo", this, this.stack, false, true);
		},
		/**
		 * Checks if there's an action in the stack that can be undone / redone
		 * @param  {String} 	type 	Either "undo" or "redo"
		 * @return {Boolean} True if there is a set of actions which can be undone / redone
		 */
		isAvailable: function (type) {
			var s = this.stack, l = s.length;

			switch (type) {
				case "undo": return l > 0 && s.pointer > -1;
				case "redo": return l > 0 && s.pointer < l - 1;
				default: return false;
			}
		},
		/**
		 * Sets the stack-reference to the stack of another undoManager.
		 * @param  {UndoManager} 	undoManager 	The undoManager whose stack-reference is set to this stack
		 * @return {undefined}
		 */
		merge: function (undoManager) {
			// This sets the stack-reference to the stack of another 
			// undoManager so that the stack of this other undoManager 
			// is used by two different managers.
			// This enables to set up a main-undoManager and besides it
			// several others for special, exceptional cases (by using
			// instance-based custom UndoTypes). Models / collections 
			// which need this special treatment are only registered at 
			// those special undoManagers. Those special ones are then 
			// merged into the main-undoManager to write on its stack. 
			// That way it's easier to manage exceptional cases.
			var args = _.isArray(undoManager) ? undoManager : slice(arguments), manager;
			while (manager = args.pop()) {
				if (manager instanceof UndoManager &&
					manager.stack instanceof UndoStack) {
					// set the stack reference to our stack
					manager.stack = this.stack;
				}
			}
		},
		/**
		 * Add an UndoType to this specific UndoManager-instance.
		 * @param {String} type The event this UndoType is made for
		 * @param {Object} fns  An object of functions that are called to generate the data for an UndoAction or to process it. Must have the properties "undo", "redo" and "on". Can have the property "condition".
		 * @return {undefined}
		 */
		addUndoType: function (type, fns) {
			manipulateUndoType(0, type, fns, this.undoTypes);
		},
		/**
		 * Overwrite properties of an existing UndoType for this specific UndoManager-instance.
		 * @param  {String} type The event the UndoType is made for
		 * @param  {Object} fns  An object of functions that are called to generate the data for an UndoAction or to process it. It extends the existing object.
		 * @return {undefined}
		 */
		changeUndoType: function (type, fns) {
			manipulateUndoType(1, type, fns, this.undoTypes);
		},
		/**
		 * Remove one or more UndoTypes of this specific UndoManager-instance to fall back to the global UndoTypes.
		 * @param  {String|Array} type The event the UndoType that should be removed is made for. You can also pass an array of events.
		 * @return {undefined}
		 */
		removeUndoType: function (type) {
			manipulateUndoType(2, type, undefined, this.undoTypes);
		},

		/**
		 * Removes all actions from the stack.
		 * @return {undefined}
		 */
		clear: function() {
			this.stack.reset();
			this.stack.pointer = -1;
		}
	});

	_.extend(UndoManager, {
		/**
		 * Change the UndoManager's default attributes
		 * @param  {Object} defaultAttributes An object with the new default values.
		 * @return {undefined}
		 */
		defaults: function (defaultAttributes) {
			_.extend(UndoManager.prototype.defaults, defaultAttributes);
		},
		/**
		 * Add an UndoType to the global UndoTypes-object.
		 * @param  {String} type The event this UndoType is made for
		 * @param  {Object} fns  An object of functions that are called to generate the data for an UndoAction or to process it. Must have the properties "undo", "redo" and "on". Can have the property "condition".
		 * @return {undefined}
		 */
		"addUndoType": function (type, fns) {
			manipulateUndoType(0, type, fns, UndoTypes);
		},
		/**
		 * Overwrite properties of an existing UndoType in the global UndoTypes-object.
		 * @param  {String} type The event the UndoType is made for
		 * @param  {Object} fns  An object of functions that are called to generate the data for an UndoAction or to process it. It extends the existing object.
		 * @return {undefined}
		 */
		"changeUndoType": function (type, fns) {
			manipulateUndoType(1, type, fns, UndoTypes)
		},
		/**
		 * Remove one or more UndoTypes of this specific UndoManager-instance to fall back to the global UndoTypes.
		 * @param  {String|Array} type The event the UndoType that should be removed is made for. You can also pass an array of events.
		 * @return {undefined}
		 */
		"removeUndoType": function (type) {
			manipulateUndoType(2, type, undefined, UndoTypes);
		}
	})

	return Backbone.UndoManager = UndoManager;

});


/***/ }),

/***/ "./node_modules/backbone/backbone.js":
/*!*******************************************!*\
  !*** ./node_modules/backbone/backbone.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.3.3

//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(factory) {

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self === self && self) ||
            (typeof global == 'object' && global.global === global && global);

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js"), __webpack_require__(/*! jquery */ "./node_modules/cash-dom/dist/cash.js"), exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else { var _, $; }

})(function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to a common array method we'll want to use later.
  var slice = Array.prototype.slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.3.3';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... this will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Proxy Backbone class methods to Underscore functions, wrapping the model's
  // `attributes` object or collection's `models` array behind the scenes.
  //
  // collection.filter(function(model) { return model.get('age') > 10 });
  // collection.each(this.addView);
  //
  // `Function#apply` can be slow so we use the method's arg count, if we know it.
  var addMethod = function(length, method, attribute) {
    switch (length) {
      case 1: return function() {
        return _[method](this[attribute]);
      };
      case 2: return function(value) {
        return _[method](this[attribute], value);
      };
      case 3: return function(iteratee, context) {
        return _[method](this[attribute], cb(iteratee, this), context);
      };
      case 4: return function(iteratee, defaultVal, context) {
        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);
      };
      default: return function() {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
    }
  };
  var addUnderscoreMethods = function(Class, methods, attribute) {
    _.each(methods, function(length, method) {
      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
    });
  };

  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.
  var cb = function(iteratee, instance) {
    if (_.isFunction(iteratee)) return iteratee;
    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };
    return iteratee;
  };
  var modelMatcher = function(attrs) {
    var matcher = _.matches(attrs);
    return function(model) {
      return matcher(model.attributes);
    };
  };

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // a custom event channel. You may bind a callback to an event with `on` or
  // remove with `off`; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {};

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Iterates over the standard `event, callback` (as well as the fancy multiple
  // space-separated events `"change blur", callback` and jQuery-style event
  // maps `{event: callback}`).
  var eventsApi = function(iteratee, events, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
      // Handle event maps.
      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
      for (names = _.keys(name); i < names.length ; i++) {
        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
      }
    } else if (name && eventSplitter.test(name)) {
      // Handle space-separated event names by delegating them individually.
      for (names = name.split(eventSplitter); i < names.length; i++) {
        events = iteratee(events, names[i], callback, opts);
      }
    } else {
      // Finally, standard events.
      events = iteratee(events, name, callback, opts);
    }
    return events;
  };

  // Bind an event to a `callback` function. Passing `"all"` will bind
  // the callback to all events fired.
  Events.on = function(name, callback, context) {
    return internalOn(this, name, callback, context);
  };

  // Guard the `listening` argument from the public API.
  var internalOn = function(obj, name, callback, context, listening) {
    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
      context: context,
      ctx: obj,
      listening: listening
    });

    if (listening) {
      var listeners = obj._listeners || (obj._listeners = {});
      listeners[listening.id] = listening;
    }

    return obj;
  };

  // Inversion-of-control versions of `on`. Tell *this* object to listen to
  // an event in another object... keeping track of what it's listening to
  // for easier unbinding later.
  Events.listenTo = function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = listeningTo[id];

    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
    }

    // Bind callbacks on obj, and keep track of them on listening.
    internalOn(obj, name, callback, this, listening);
    return this;
  };

  // The reducing API that adds a callback to the `events` object.
  var onApi = function(events, name, callback, options) {
    if (callback) {
      var handlers = events[name] || (events[name] = []);
      var context = options.context, ctx = options.ctx, listening = options.listening;
      if (listening) listening.count++;

      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});
    }
    return events;
  };

  // Remove one or many callbacks. If `context` is null, removes all
  // callbacks with that function. If `callback` is null, removes all
  // callbacks for the event. If `name` is null, removes all bound
  // callbacks for all events.
  Events.off = function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
      context: context,
      listeners: this._listeners
    });
    return this;
  };

  // Tell this object to stop listening to either specific events ... or
  // to every object it's currently listening to.
  Events.stopListening = function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;

    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

    for (var i = 0; i < ids.length; i++) {
      var listening = listeningTo[ids[i]];

      // If listening doesn't exist, this object is not currently
      // listening to obj. Break out early.
      if (!listening) break;

      listening.obj.off(name, callback, this);
    }

    return this;
  };

  // The reducing API that removes a callback from the `events` object.
  var offApi = function(events, name, callback, options) {
    if (!events) return;

    var i = 0, listening;
    var context = options.context, listeners = options.listeners;

    // Delete all events listeners and "drop" events.
    if (!name && !callback && !context) {
      var ids = _.keys(listeners);
      for (; i < ids.length; i++) {
        listening = listeners[ids[i]];
        delete listeners[listening.id];
        delete listening.listeningTo[listening.objId];
      }
      return;
    }

    var names = name ? [name] : _.keys(events);
    for (; i < names.length; i++) {
      name = names[i];
      var handlers = events[name];

      // Bail out if there are no events stored.
      if (!handlers) break;

      // Replace events if there are any remaining.  Otherwise, clean up.
      var remaining = [];
      for (var j = 0; j < handlers.length; j++) {
        var handler = handlers[j];
        if (
          callback && callback !== handler.callback &&
            callback !== handler.callback._callback ||
              context && context !== handler.context
        ) {
          remaining.push(handler);
        } else {
          listening = handler.listening;
          if (listening && --listening.count === 0) {
            delete listeners[listening.id];
            delete listening.listeningTo[listening.objId];
          }
        }
      }

      // Update tail event if the list has any events.  Otherwise, clean up.
      if (remaining.length) {
        events[name] = remaining;
      } else {
        delete events[name];
      }
    }
    return events;
  };

  // Bind an event to only be triggered a single time. After the first time
  // the callback is invoked, its listener will be removed. If multiple events
  // are passed in using the space-separated syntax, the handler will fire
  // once for each event, not once for a combination of all events.
  Events.once = function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
    if (typeof name === 'string' && context == null) callback = void 0;
    return this.on(events, callback, context);
  };

  // Inversion-of-control versions of `once`.
  Events.listenToOnce = function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
    return this.listenTo(obj, events);
  };

  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
  // `offer` unbinds the `onceWrapper` after it has been called.
  var onceMap = function(map, name, callback, offer) {
    if (callback) {
      var once = map[name] = _.once(function() {
        offer(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
    }
    return map;
  };

  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.trigger = function(name) {
    if (!this._events) return this;

    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
  };

  // Handles triggering the appropriate event callbacks.
  var triggerApi = function(objEvents, name, callback, args) {
    if (objEvents) {
      var events = objEvents[name];
      var allEvents = objEvents.all;
      if (events && allEvents) allEvents = allEvents.slice();
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, [name].concat(args));
    }
    return objEvents;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    var defaults = _.result(this, 'defaults');
    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Special-cased proxy to underscore's `_.matches` method.
    matches: function(attrs) {
      return !!_.iteratee(attrs, this)(this.attributes);
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      var unset      = options.unset;
      var silent     = options.silent;
      var changes    = [];
      var changing   = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }

      var current = this.attributes;
      var changed = this.changed;
      var prev    = this._previousAttributes;

      // For each `set` attribute, update or delete the current value.
      for (var attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          changed[attr] = val;
        } else {
          delete changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Update the `id`.
      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0; i < changes.length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var changed = {};
      for (var attr in diff) {
        var val = diff[attr];
        if (_.isEqual(old[attr], val)) continue;
        changed[attr] = val;
      }
      return _.size(changed) ? changed : false;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server, merging the response with the model's
    // local attributes. Any changed attributes will trigger a "change" event.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (!model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true, parse: true}, options);
      var wait = options.wait;

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !wait) {
        if (!this.set(attrs, options)) return false;
      } else if (!this._validate(attrs, options)) {
        return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      var attributes = this.attributes;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
        if (serverAttrs && !model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      // Set temporary attributes if `{wait: true}` to properly find new ids.
      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch' && !options.attrs) options.attrs = attrs;
      var xhr = this.sync(method, this, options);

      // Restore attributes.
      this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var wait = options.wait;

      var destroy = function() {
        model.stopListening();
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (wait) destroy();
        if (success) success.call(options.context, model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      var xhr = false;
      if (this.isNew()) {
        _.defer(options.success);
      } else {
        wrapError(this, options);
        xhr = this.sync('delete', this, options);
      }
      if (!wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      var id = this.get(this.idAttribute);
      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend({}, options, {validate: true}));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model, mapped to the
  // number of arguments they take.
  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
      omit: 0, chain: 1, isEmpty: 1};

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, 'attributes');

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Splices `insert` into `array` at index `at`.
  var splice = function(array, insert, at) {
    at = Math.min(Math.max(at, 0), array.length);
    var tail = Array(array.length - at);
    var length = insert.length;
    var i;
    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];
    for (i = 0; i < length; i++) array[i + at] = insert[i];
    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
  };

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) { return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set. `models` may be Backbone
    // Models or raw JavaScript objects to be converted to Models, or any
    // combination of the two.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      options = _.extend({}, options);
      var singular = !_.isArray(models);
      models = singular ? [models] : models.slice();
      var removed = this._removeModels(models, options);
      if (!options.silent && removed.length) {
        options.changes = {added: [], merged: [], removed: removed};
        this.trigger('update', this, options);
      }
      return singular ? removed[0] : removed;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      if (models == null) return;

      options = _.extend({}, setOptions, options);
      if (options.parse && !this._isModel(models)) {
        models = this.parse(models, options) || [];
      }

      var singular = !_.isArray(models);
      models = singular ? [models] : models.slice();

      var at = options.at;
      if (at != null) at = +at;
      if (at > this.length) at = this.length;
      if (at < 0) at += this.length + 1;

      var set = [];
      var toAdd = [];
      var toMerge = [];
      var toRemove = [];
      var modelMap = {};

      var add = options.add;
      var merge = options.merge;
      var remove = options.remove;

      var sort = false;
      var sortable = this.comparator && at == null && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      var model, i;
      for (i = 0; i < models.length; i++) {
        model = models[i];

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        var existing = this.get(model);
        if (existing) {
          if (merge && model !== existing) {
            var attrs = this._isModel(model) ? model.attributes : model;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            toMerge.push(existing);
            if (sortable && !sort) sort = existing.hasChanged(sortAttr);
          }
          if (!modelMap[existing.cid]) {
            modelMap[existing.cid] = true;
            set.push(existing);
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(model, options);
          if (model) {
            toAdd.push(model);
            this._addReference(model, options);
            modelMap[model.cid] = true;
            set.push(model);
          }
        }
      }

      // Remove stale models.
      if (remove) {
        for (i = 0; i < this.length; i++) {
          model = this.models[i];
          if (!modelMap[model.cid]) toRemove.push(model);
        }
        if (toRemove.length) this._removeModels(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      var orderChanged = false;
      var replace = !sortable && add && remove;
      if (set.length && replace) {
        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {
          return m !== set[index];
        });
        this.models.length = 0;
        splice(this.models, set, 0);
        this.length = this.models.length;
      } else if (toAdd.length) {
        if (sortable) sort = true;
        splice(this.models, toAdd, at == null ? this.length : at);
        this.length = this.models.length;
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort/update events.
      if (!options.silent) {
        for (i = 0; i < toAdd.length; i++) {
          if (at != null) options.index = at + i;
          model = toAdd[i];
          model.trigger('add', model, this, options);
        }
        if (sort || orderChanged) this.trigger('sort', this, options);
        if (toAdd.length || toRemove.length || toMerge.length) {
          options.changes = {
            added: toAdd,
            removed: toRemove,
            merged: toMerge
          };
          this.trigger('update', this, options);
        }
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options = options ? _.clone(options) : {};
      for (var i = 0; i < this.models.length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      return this.remove(model, options);
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      return this.remove(model, options);
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id, cid, model object with id or cid
    // properties, or an attributes object that is transformed through modelId.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] ||
        this._byId[this.modelId(obj.attributes || obj)] ||
        obj.cid && this._byId[obj.cid];
    },

    // Returns `true` if the model is in the collection.
    has: function(obj) {
      return this.get(obj) != null;
    },

    // Get the model at the given index.
    at: function(index) {
      if (index < 0) index += this.length;
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      return this[first ? 'find' : 'filter'](attrs);
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      var comparator = this.comparator;
      if (!comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      var length = comparator.length;
      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);

      // Run sort based on type of `comparator`.
      if (length === 1 || _.isString(comparator)) {
        this.models = this.sortBy(comparator);
      } else {
        this.models.sort(comparator);
      }
      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return this.map(attr + '');
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success.call(options.context, collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      var wait = options.wait;
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(m, resp, callbackOpts) {
        if (wait) collection.add(m, callbackOpts);
        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Define how to uniquely identify models in the collection.
    modelId: function(attrs) {
      return attrs[this.model.prototype.idAttribute || 'id'];
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method called by both remove and set.
    _removeModels: function(models, options) {
      var removed = [];
      for (var i = 0; i < models.length; i++) {
        var model = this.get(models[i]);
        if (!model) continue;

        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;

        // Remove references before triggering 'remove' event to prevent an
        // infinite loop. #3693
        delete this._byId[model.cid];
        var id = this.modelId(model.attributes);
        if (id != null) delete this._byId[id];

        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }

        removed.push(model);
        this._removeReference(model, options);
      }
      return removed;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function(model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      var id = this.modelId(model.attributes);
      if (id != null) this._byId[id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      delete this._byId[model.cid];
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if (model) {
        if ((event === 'add' || event === 'remove') && collection !== this) return;
        if (event === 'destroy') this.remove(model, options);
        if (event === 'change') {
          var prevId = this.modelId(model.previousAttributes());
          var id = this.modelId(model.attributes);
          if (prevId !== id) {
            if (prevId != null) delete this._byId[prevId];
            if (id != null) this._byId[id] = model;
          }
        }
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,
      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,
      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,
      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,
      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, 'models');

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be set as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      events || (events = _.result(this, 'events'));
      if (!events) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[method];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.call(options.context, xhr, textStatus, errorThrown);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch': 'PATCH',
    'delete': 'DELETE',
    'read': 'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    this.checkUrl = _.bind(this.checkUrl, this);

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.getSearch();
    },

    // Does the pathname match the root?
    matchRoot: function() {
      var path = this.decodeFragment(this.location.pathname);
      var rootPath = path.slice(0, this.root.length - 1) + '/';
      return rootPath === this.root;
    },

    // Unicode characters in `location.pathname` are percent encoded so they're
    // decoded for comparison. `%25` should not be decoded since it may be part
    // of an encoded parameter.
    decodeFragment: function(fragment) {
      return decodeURI(fragment.replace(/%25/g, '%2525'));
    },

    // In IE6, the hash fragment and search params are incorrect if the
    // fragment contains `?`.
    getSearch: function() {
      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
      return match ? match[0] : '';
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = this.decodeFragment(
        this.location.pathname + this.getSearch()
      ).slice(this.root.length - 1);
      return path.charAt(0) === '/' ? path.slice(1) : path;
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._usePushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error('Backbone.history has already been started');
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);
      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.history && this.history.pushState);
      this._usePushState    = this._wantsPushState && this._hasPushState;
      this.fragment         = this.getFragment();

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          var rootPath = this.root.slice(0, -1) || '/';
          this.location.replace(rootPath + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
        this.iframe = document.createElement('iframe');
        this.iframe.src = 'javascript:0';
        this.iframe.style.display = 'none';
        this.iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
        iWindow.document.open();
        iWindow.document.close();
        iWindow.location.hash = '#' + this.fragment;
      }

      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function(eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._usePushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function(eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._usePushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();

      // If the user pressed the back button, the iframe's hash will have
      // changed and we should use that for comparison.
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe.contentWindow);
      }

      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      // If the root doesn't match, no routes can match either.
      if (!this.matchRoot()) return false;
      fragment = this.fragment = this.getFragment(fragment);
      return _.some(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      // Normalize the fragment.
      fragment = this.getFragment(fragment || '');

      // Don't include a trailing slash on the root.
      var rootPath = this.root;
      if (fragment === '' || fragment.charAt(0) === '?') {
        rootPath = rootPath.slice(0, -1) || '/';
      }
      var url = rootPath + fragment;

      // Strip the hash and decode for matching.
      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._usePushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
          var iWindow = this.iframe.contentWindow;

          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) {
            iWindow.document.open();
            iWindow.document.close();
          }

          this._updateHash(iWindow.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function and add the prototype properties.
    child.prototype = _.create(parent.prototype, protoProps);
    child.prototype.constructor = child;

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error.call(options.context, model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/cash-dom/dist/cash.js":
/*!********************************************!*\
  !*** ./node_modules/cash-dom/dist/cash.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*! cash-dom 1.3.7, https://github.com/kenwheeler/cash @license MIT */
;(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  var doc = document, win = window, ArrayProto = Array.prototype, slice = ArrayProto.slice, filter = ArrayProto.filter, push = ArrayProto.push;

  var noop = function () {}, isFunction = function (item) {
    // @see https://crbug.com/568448
    return typeof item === typeof noop && item.call;
  }, isString = function (item) {
    return typeof item === typeof "";
  };

  var idMatch = /^#[\w-]*$/, classMatch = /^\.[\w-]*$/, htmlMatch = /<.+>/, singlet = /^\w+$/;

  function find(selector, context) {
    context = context || doc;
    var elems = (classMatch.test(selector) ? context.getElementsByClassName(selector.slice(1)) : singlet.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector));
    return elems;
  }

  var frag;
  function parseHTML(str) {
    if (!frag) {
      frag = doc.implementation.createHTMLDocument(null);
      var base = frag.createElement("base");
      base.href = doc.location.href;
      frag.head.appendChild(base);
    }

    frag.body.innerHTML = str;

    return frag.body.childNodes;
  }

  function onReady(fn) {
    if (doc.readyState !== "loading") {
      setTimeout(fn);
    } else {
      doc.addEventListener("DOMContentLoaded", fn);
    }
  }

  function Init(selector, context) {
    if (!selector) {
      return this;
    }

    // If already a cash collection, don't do any further processing
    if (selector.cash && selector !== win) {
      return selector;
    }

    var elems = selector, i = 0, length;

    if (isString(selector)) {
      elems = (idMatch.test(selector) ?
      // If an ID use the faster getElementById check
      doc.getElementById(selector.slice(1)) : htmlMatch.test(selector) ?
      // If HTML, parse it into real elements
      parseHTML(selector) :
      // else use `find`
      find(selector, context));

      // If function, use as shortcut for DOM ready
    } else if (isFunction(selector)) {
      onReady(selector);return this;
    }

    if (!elems) {
      return this;
    }

    // If a single DOM element is passed in or received via ID, return the single element
    if (elems.nodeType || elems === win) {
      this[0] = elems;
      this.length = 1;
    } else {
      // Treat like an array and loop through each item.
      length = this.length = elems.length;
      for (; i < length; i++) {
        this[i] = elems[i];
      }
    }

    return this;
  }

  function cash(selector, context) {
    return new Init(selector, context);
  }

  var fn = cash.fn = cash.prototype = Init.prototype = { // jshint ignore:line
    cash: true,
    length: 0,
    push: push,
    splice: ArrayProto.splice,
    map: ArrayProto.map,
    init: Init
  };

  Object.defineProperty(fn, "constructor", { value: cash });

  cash.parseHTML = parseHTML;
  cash.noop = noop;
  cash.isFunction = isFunction;
  cash.isString = isString;

  cash.extend = fn.extend = function (target) {
    target = target || {};

    var args = slice.call(arguments), length = args.length, i = 1;

    if (args.length === 1) {
      target = this;
      i = 0;
    }

    for (; i < length; i++) {
      if (!args[i]) {
        continue;
      }
      for (var key in args[i]) {
        if (args[i].hasOwnProperty(key)) {
          target[key] = args[i][key];
        }
      }
    }

    return target;
  };

  function each(collection, callback) {
    var l = collection.length, i = 0;

    for (; i < l; i++) {
      if (callback.call(collection[i], collection[i], i, collection) === false) {
        break;
      }
    }
  }

  function matches(el, selector) {
    var m = el && (el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector);
    return !!m && m.call(el, selector);
  }

  function getCompareFunction(selector) {
    return (
    /* Use browser's `matches` function if string */
    isString(selector) ? matches :
    /* Match a cash element */
    selector.cash ? function (el) {
      return selector.is(el);
    } :
    /* Direct comparison */
    function (el, selector) {
      return el === selector;
    });
  }

  function unique(collection) {
    return cash(slice.call(collection).filter(function (item, index, self) {
      return self.indexOf(item) === index;
    }));
  }

  cash.extend({
    merge: function (first, second) {
      var len = +second.length, i = first.length, j = 0;

      for (; j < len; i++, j++) {
        first[i] = second[j];
      }

      first.length = i;
      return first;
    },

    each: each,
    matches: matches,
    unique: unique,
    isArray: Array.isArray,
    isNumeric: function (n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }

  });

  var uid = cash.uid = "_cash" + Date.now();

  function getDataCache(node) {
    return (node[uid] = node[uid] || {});
  }

  function setData(node, key, value) {
    return (getDataCache(node)[key] = value);
  }

  function getData(node, key) {
    var c = getDataCache(node);
    if (c[key] === undefined) {
      c[key] = node.dataset ? node.dataset[key] : cash(node).attr("data-" + key);
    }
    return c[key];
  }

  function removeData(node, key) {
    var c = getDataCache(node);
    if (c) {
      delete c[key];
    } else if (node.dataset) {
      delete node.dataset[key];
    } else {
      cash(node).removeAttr("data-" + name);
    }
  }

  fn.extend({
    data: function (name, value) {
      if (isString(name)) {
        return (value === undefined ? getData(this[0], name) : this.each(function (v) {
          return setData(v, name, value);
        }));
      }

      for (var key in name) {
        this.data(key, name[key]);
      }

      return this;
    },

    removeData: function (key) {
      return this.each(function (v) {
        return removeData(v, key);
      });
    }

  });

  var notWhiteMatch = /\S+/g;

  function getClasses(c) {
    return isString(c) && c.match(notWhiteMatch);
  }

  function hasClass(v, c) {
    return (v.classList ? v.classList.contains(c) : new RegExp("(^| )" + c + "( |$)", "gi").test(v.className));
  }

  function addClass(v, c) {
    if (v.classList) {
      v.classList.add(c);
    } else if (!hasClass(v, c)) {
      v.className += " " + c;
    }
  }

  function removeClass(v, c) {
    if (v.classList) {
      v.classList.remove(c);
    } else {
      v.className = v.className.replace(c, "");
    }
  }

  fn.extend({
    addClass: function (c) {
      var classes = getClasses(c);

      return (classes ? this.each(function (v) {
        each(classes, function (c) {
          addClass(v, c);
        });
      }) : this);
    },

    attr: function (name, value) {
      if (!name) {
        return undefined;
      }

      if (isString(name)) {
        if (value === undefined) {
          return this[0] ? this[0].getAttribute ? this[0].getAttribute(name) : this[0][name] : undefined;
        }

        return this.each(function (v) {
          if (v.setAttribute) {
            v.setAttribute(name, value);
          } else {
            v[name] = value;
          }
        });
      }

      for (var key in name) {
        this.attr(key, name[key]);
      }

      return this;
    },

    hasClass: function (c) {
      var check = false, classes = getClasses(c);
      if (classes && classes.length) {
        this.each(function (v) {
          check = hasClass(v, classes[0]);
          return !check;
        });
      }
      return check;
    },

    prop: function (name, value) {
      if (isString(name)) {
        return (value === undefined ? this[0][name] : this.each(function (v) {
          v[name] = value;
        }));
      }

      for (var key in name) {
        this.prop(key, name[key]);
      }

      return this;
    },

    removeAttr: function (name) {
      return this.each(function (v) {
        if (v.removeAttribute) {
          v.removeAttribute(name);
        } else {
          delete v[name];
        }
      });
    },

    removeClass: function (c) {
      if (!arguments.length) {
        return this.attr("class", "");
      }
      var classes = getClasses(c);
      return (classes ? this.each(function (v) {
        each(classes, function (c) {
          removeClass(v, c);
        });
      }) : this);
    },

    removeProp: function (name) {
      return this.each(function (v) {
        delete v[name];
      });
    },

    toggleClass: function (c, state) {
      if (state !== undefined) {
        return this[state ? "addClass" : "removeClass"](c);
      }
      var classes = getClasses(c);
      return (classes ? this.each(function (v) {
        each(classes, function (c) {
          if (hasClass(v, c)) {
            removeClass(v, c);
          } else {
            addClass(v, c);
          }
        });
      }) : this);
    } });

  fn.extend({
    add: function (selector, context) {
      return unique(cash.merge(this, cash(selector, context)));
    },

    each: function (callback) {
      each(this, callback);
      return this;
    },

    eq: function (index) {
      return cash(this.get(index));
    },

    filter: function (selector) {
      if (!selector) {
        return this;
      }

      var comparator = (isFunction(selector) ? selector : getCompareFunction(selector));

      return cash(filter.call(this, function (e) {
        return comparator(e, selector);
      }));
    },

    first: function () {
      return this.eq(0);
    },

    get: function (index) {
      if (index === undefined) {
        return slice.call(this);
      }
      return (index < 0 ? this[index + this.length] : this[index]);
    },

    index: function (elem) {
      var child = elem ? cash(elem)[0] : this[0], collection = elem ? this : cash(child).parent().children();
      return slice.call(collection).indexOf(child);
    },

    last: function () {
      return this.eq(-1);
    }

  });

  var camelCase = (function () {
    var camelRegex = /(?:^\w|[A-Z]|\b\w)/g, whiteSpace = /[\s-_]+/g;
    return function (str) {
      return str.replace(camelRegex, function (letter, index) {
        return letter[index === 0 ? "toLowerCase" : "toUpperCase"]();
      }).replace(whiteSpace, "");
    };
  }());

  var getPrefixedProp = (function () {
    var cache = {}, doc = document, div = doc.createElement("div"), style = div.style;

    return function (prop) {
      prop = camelCase(prop);
      if (cache[prop]) {
        return cache[prop];
      }

      var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), prefixes = ["webkit", "moz", "ms", "o"], props = (prop + " " + (prefixes).join(ucProp + " ") + ucProp).split(" ");

      each(props, function (p) {
        if (p in style) {
          cache[p] = prop = cache[prop] = p;
          return false;
        }
      });

      return cache[prop];
    };
  }());

  cash.prefixedProp = getPrefixedProp;
  cash.camelCase = camelCase;

  fn.extend({
    css: function (prop, value) {
      if (isString(prop)) {
        prop = getPrefixedProp(prop);
        return (arguments.length > 1 ? this.each(function (v) {
          return v.style[prop] = value;
        }) : win.getComputedStyle(this[0])[prop]);
      }

      for (var key in prop) {
        this.css(key, prop[key]);
      }

      return this;
    }

  });

  function compute(el, prop) {
    return parseInt(win.getComputedStyle(el[0], null)[prop], 10) || 0;
  }

  each(["Width", "Height"], function (v) {
    var lower = v.toLowerCase();

    fn[lower] = function () {
      return this[0].getBoundingClientRect()[lower];
    };

    fn["inner" + v] = function () {
      return this[0]["client" + v];
    };

    fn["outer" + v] = function (margins) {
      return this[0]["offset" + v] + (margins ? compute(this, "margin" + (v === "Width" ? "Left" : "Top")) + compute(this, "margin" + (v === "Width" ? "Right" : "Bottom")) : 0);
    };
  });

  function registerEvent(node, eventName, callback) {
    var eventCache = getData(node, "_cashEvents") || setData(node, "_cashEvents", {});
    eventCache[eventName] = eventCache[eventName] || [];
    eventCache[eventName].push(callback);
    node.addEventListener(eventName, callback);
  }

  function removeEvent(node, eventName, callback) {
    var events = getData(node, "_cashEvents"), eventCache = (events && events[eventName]), index;

    if (!eventCache) {
      return;
    }

    if (callback) {
      node.removeEventListener(eventName, callback);
      index = eventCache.indexOf(callback);
      if (index >= 0) {
        eventCache.splice(index, 1);
      }
    } else {
      each(eventCache, function (event) {
        node.removeEventListener(eventName, event);
      });
      eventCache = [];
    }
  }

  fn.extend({
    off: function (eventName, callback) {
      return this.each(function (v) {
        return removeEvent(v, eventName, callback);
      });
    },

    on: function (eventName, delegate, callback, runOnce) {
      // jshint ignore:line

      var originalCallback;

      if (!isString(eventName)) {
        for (var key in eventName) {
          this.on(key, delegate, eventName[key]);
        }
        return this;
      }

      if (isFunction(delegate)) {
        callback = delegate;
        delegate = null;
      }

      if (eventName === "ready") {
        onReady(callback);
        return this;
      }

      if (delegate) {
        originalCallback = callback;
        callback = function (e) {
          var t = e.target;

          while (!matches(t, delegate)) {
            if (t === this) {
              return (t = false);
            }
            t = t.parentNode;
          }

          if (t) {
            originalCallback.call(t, e);
          }
        };
      }

      return this.each(function (v) {
        var finalCallback = callback;
        if (runOnce) {
          finalCallback = function () {
            callback.apply(this, arguments);
            removeEvent(v, eventName, finalCallback);
          };
        }
        registerEvent(v, eventName, finalCallback);
      });
    },

    one: function (eventName, delegate, callback) {
      return this.on(eventName, delegate, callback, true);
    },

    ready: onReady,

    trigger: function (eventName, data) {
      var evt = doc.createEvent("HTMLEvents");
      evt.data = data;
      evt.initEvent(eventName, true, false);
      return this.each(function (v) {
        return v.dispatchEvent(evt);
      });
    }

  });

  function encode(name, value) {
    return "&" + encodeURIComponent(name) + "=" + encodeURIComponent(value).replace(/%20/g, "+");
  }

  function getSelectMultiple_(el) {
    var values = [];
    each(el.options, function (o) {
      if (o.selected) {
        values.push(o.value);
      }
    });
    return values.length ? values : null;
  }

  function getSelectSingle_(el) {
    var selectedIndex = el.selectedIndex;
    return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
  }

  function getValue(el) {
    var type = el.type;
    if (!type) {
      return null;
    }
    switch (type.toLowerCase()) {
      case "select-one":
        return getSelectSingle_(el);
      case "select-multiple":
        return getSelectMultiple_(el);
      case "radio":
        return (el.checked) ? el.value : null;
      case "checkbox":
        return (el.checked) ? el.value : null;
      default:
        return el.value ? el.value : null;
    }
  }

  fn.extend({
    serialize: function () {
      var query = "";

      each(this[0].elements || this, function (el) {
        if (el.disabled || el.tagName === "FIELDSET") {
          return;
        }
        var name = el.name;
        switch (el.type.toLowerCase()) {
          case "file":
          case "reset":
          case "submit":
          case "button":
            break;
          case "select-multiple":
            var values = getValue(el);
            if (values !== null) {
              each(values, function (value) {
                query += encode(name, value);
              });
            }
            break;
          default:
            var value = getValue(el);
            if (value !== null) {
              query += encode(name, value);
            }
        }
      });

      return query.substr(1);
    },

    val: function (value) {
      if (value === undefined) {
        return getValue(this[0]);
      } else {
        return this.each(function (v) {
          return v.value = value;
        });
      }
    }

  });

  function insertElement(el, child, prepend) {
    if (prepend) {
      var first = el.childNodes[0];
      el.insertBefore(child, first);
    } else {
      el.appendChild(child);
    }
  }

  function insertContent(parent, child, prepend) {
    var str = isString(child);

    if (!str && child.length) {
      each(child, function (v) {
        return insertContent(parent, v, prepend);
      });
      return;
    }

    each(parent, str ? function (v) {
      return v.insertAdjacentHTML(prepend ? "afterbegin" : "beforeend", child);
    } : function (v, i) {
      return insertElement(v, (i === 0 ? child : child.cloneNode(true)), prepend);
    });
  }

  fn.extend({
    after: function (selector) {
      cash(selector).insertAfter(this);
      return this;
    },

    append: function (content) {
      insertContent(this, content);
      return this;
    },

    appendTo: function (parent) {
      insertContent(cash(parent), this);
      return this;
    },

    before: function (selector) {
      cash(selector).insertBefore(this);
      return this;
    },

    clone: function () {
      return cash(this.map(function (v) {
        return v.cloneNode(true);
      }));
    },

    empty: function () {
      this.html("");
      return this;
    },

    html: function (content) {
      if (content === undefined) {
        return this[0].innerHTML;
      }
      var source = (content.nodeType ? content[0].outerHTML : content);
      return this.each(function (v) {
        return v.innerHTML = source;
      });
    },

    insertAfter: function (selector) {
      var _this = this;


      cash(selector).each(function (el, i) {
        var parent = el.parentNode, sibling = el.nextSibling;
        _this.each(function (v) {
          parent.insertBefore((i === 0 ? v : v.cloneNode(true)), sibling);
        });
      });

      return this;
    },

    insertBefore: function (selector) {
      var _this2 = this;
      cash(selector).each(function (el, i) {
        var parent = el.parentNode;
        _this2.each(function (v) {
          parent.insertBefore((i === 0 ? v : v.cloneNode(true)), el);
        });
      });
      return this;
    },

    prepend: function (content) {
      insertContent(this, content, true);
      return this;
    },

    prependTo: function (parent) {
      insertContent(cash(parent), this, true);
      return this;
    },

    remove: function () {
      return this.each(function (v) {
        return v.parentNode.removeChild(v);
      });
    },

    text: function (content) {
      if (content === undefined) {
        return this[0].textContent;
      }
      return this.each(function (v) {
        return v.textContent = content;
      });
    }

  });

  var docEl = doc.documentElement;

  fn.extend({
    position: function () {
      var el = this[0];
      return {
        left: el.offsetLeft,
        top: el.offsetTop
      };
    },

    offset: function () {
      var rect = this[0].getBoundingClientRect();
      return {
        top: rect.top + win.pageYOffset - docEl.clientTop,
        left: rect.left + win.pageXOffset - docEl.clientLeft
      };
    },

    offsetParent: function () {
      return cash(this[0].offsetParent);
    }

  });

  fn.extend({
    children: function (selector) {
      var elems = [];
      this.each(function (el) {
        push.apply(elems, el.children);
      });
      elems = unique(elems);

      return (!selector ? elems : elems.filter(function (v) {
        return matches(v, selector);
      }));
    },

    closest: function (selector) {
      if (!selector || this.length < 1) {
        return cash();
      }
      if (this.is(selector)) {
        return this.filter(selector);
      }
      return this.parent().closest(selector);
    },

    is: function (selector) {
      if (!selector) {
        return false;
      }

      var match = false, comparator = getCompareFunction(selector);

      this.each(function (el) {
        match = comparator(el, selector);
        return !match;
      });

      return match;
    },

    find: function (selector) {
      if (!selector || selector.nodeType) {
        return cash(selector && this.has(selector).length ? selector : null);
      }

      var elems = [];
      this.each(function (el) {
        push.apply(elems, find(selector, el));
      });

      return unique(elems);
    },

    has: function (selector) {
      var comparator = (isString(selector) ? function (el) {
        return find(selector, el).length !== 0;
      } : function (el) {
        return el.contains(selector);
      });

      return this.filter(comparator);
    },

    next: function () {
      return cash(this[0].nextElementSibling);
    },

    not: function (selector) {
      if (!selector) {
        return this;
      }

      var comparator = getCompareFunction(selector);

      return this.filter(function (el) {
        return !comparator(el, selector);
      });
    },

    parent: function () {
      var result = [];

      this.each(function (item) {
        if (item && item.parentNode) {
          result.push(item.parentNode);
        }
      });

      return unique(result);
    },

    parents: function (selector) {
      var last, result = [];

      this.each(function (item) {
        last = item;

        while (last && last.parentNode && last !== doc.body.parentNode) {
          last = last.parentNode;

          if (!selector || (selector && matches(last, selector))) {
            result.push(last);
          }
        }
      });

      return unique(result);
    },

    prev: function () {
      return cash(this[0].previousElementSibling);
    },

    siblings: function () {
      var collection = this.parent().children(), el = this[0];

      return collection.filter(function (i) {
        return i !== el;
      });
    }

  });


  return cash;
});

/***/ }),

/***/ "./node_modules/keymaster/keymaster.js":
/*!*********************************************!*\
  !*** ./node_modules/keymaster/keymaster.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//     keymaster.js
//     (c) 2011-2013 Thomas Fuchs
//     keymaster.js may be freely distributed under the MIT license.

;(function(global){
  var k,
    _handlers = {},
    _mods = { 16: false, 18: false, 17: false, 91: false },
    _scope = 'all',
    // modifier keys
    _MODIFIERS = {
      '⇧': 16, shift: 16,
      '⌥': 18, alt: 18, option: 18,
      '⌃': 17, ctrl: 17, control: 17,
      '⌘': 91, command: 91
    },
    // special keys
    _MAP = {
      backspace: 8, tab: 9, clear: 12,
      enter: 13, 'return': 13,
      esc: 27, escape: 27, space: 32,
      left: 37, up: 38,
      right: 39, down: 40,
      del: 46, 'delete': 46,
      home: 36, end: 35,
      pageup: 33, pagedown: 34,
      ',': 188, '.': 190, '/': 191,
      '`': 192, '-': 189, '=': 187,
      ';': 186, '\'': 222,
      '[': 219, ']': 221, '\\': 220
    },
    code = function(x){
      return _MAP[x] || x.toUpperCase().charCodeAt(0);
    },
    _downKeys = [];

  for(k=1;k<20;k++) _MAP['f'+k] = 111+k;

  // IE doesn't support Array#indexOf, so have a simple replacement
  function index(array, item){
    var i = array.length;
    while(i--) if(array[i]===item) return i;
    return -1;
  }

  // for comparing mods before unassignment
  function compareArray(a1, a2) {
    if (a1.length != a2.length) return false;
    for (var i = 0; i < a1.length; i++) {
        if (a1[i] !== a2[i]) return false;
    }
    return true;
  }

  var modifierMap = {
      16:'shiftKey',
      18:'altKey',
      17:'ctrlKey',
      91:'metaKey'
  };
  function updateModifierKey(event) {
      for(k in _mods) _mods[k] = event[modifierMap[k]];
  };

  // handle keydown event
  function dispatch(event) {
    var key, handler, k, i, modifiersMatch, scope;
    key = event.keyCode;

    if (index(_downKeys, key) == -1) {
        _downKeys.push(key);
    }

    // if a modifier key, set the key.<modifierkeyname> property to true and return
    if(key == 93 || key == 224) key = 91; // right command on webkit, command on Gecko
    if(key in _mods) {
      _mods[key] = true;
      // 'assignKey' from inside this closure is exported to window.key
      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = true;
      return;
    }
    updateModifierKey(event);

    // see if we need to ignore the keypress (filter() can can be overridden)
    // by default ignore key presses if a select, textarea, or input is focused
    if(!assignKey.filter.call(this, event)) return;

    // abort if no potentially matching shortcuts found
    if (!(key in _handlers)) return;

    scope = getScope();

    // for each potential shortcut
    for (i = 0; i < _handlers[key].length; i++) {
      handler = _handlers[key][i];

      // see if it's in the current scope
      if(handler.scope == scope || handler.scope == 'all'){
        // check if modifiers match if any
        modifiersMatch = handler.mods.length > 0;
        for(k in _mods)
          if((!_mods[k] && index(handler.mods, +k) > -1) ||
            (_mods[k] && index(handler.mods, +k) == -1)) modifiersMatch = false;
        // call the handler and stop the event if neccessary
        if((handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch){
          if(handler.method(event, handler)===false){
            if(event.preventDefault) event.preventDefault();
              else event.returnValue = false;
            if(event.stopPropagation) event.stopPropagation();
            if(event.cancelBubble) event.cancelBubble = true;
          }
        }
      }
    }
  };

  // unset modifier keys on keyup
  function clearModifier(event){
    var key = event.keyCode, k,
        i = index(_downKeys, key);

    // remove key from _downKeys
    if (i >= 0) {
        _downKeys.splice(i, 1);
    }

    if(key == 93 || key == 224) key = 91;
    if(key in _mods) {
      _mods[key] = false;
      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;
    }
  };

  function resetModifiers() {
    for(k in _mods) _mods[k] = false;
    for(k in _MODIFIERS) assignKey[k] = false;
  };

  // parse and assign shortcut
  function assignKey(key, scope, method){
    var keys, mods;
    keys = getKeys(key);
    if (method === undefined) {
      method = scope;
      scope = 'all';
    }

    // for each shortcut
    for (var i = 0; i < keys.length; i++) {
      // set modifier keys if any
      mods = [];
      key = keys[i].split('+');
      if (key.length > 1){
        mods = getMods(key);
        key = [key[key.length-1]];
      }
      // convert to keycode and...
      key = key[0]
      key = code(key);
      // ...store handler
      if (!(key in _handlers)) _handlers[key] = [];
      _handlers[key].push({ shortcut: keys[i], scope: scope, method: method, key: keys[i], mods: mods });
    }
  };

  // unbind all handlers for given key in current scope
  function unbindKey(key, scope) {
    var multipleKeys, keys,
      mods = [],
      i, j, obj;

    multipleKeys = getKeys(key);

    for (j = 0; j < multipleKeys.length; j++) {
      keys = multipleKeys[j].split('+');

      if (keys.length > 1) {
        mods = getMods(keys);
        key = keys[keys.length - 1];
      }

      key = code(key);

      if (scope === undefined) {
        scope = getScope();
      }
      if (!_handlers[key]) {
        return;
      }
      for (i = 0; i < _handlers[key].length; i++) {
        obj = _handlers[key][i];
        // only clear handlers if correct scope and mods match
        if (obj.scope === scope && compareArray(obj.mods, mods)) {
          _handlers[key][i] = {};
        }
      }
    }
  };

  // Returns true if the key with code 'keyCode' is currently down
  // Converts strings into key codes.
  function isPressed(keyCode) {
      if (typeof(keyCode)=='string') {
        keyCode = code(keyCode);
      }
      return index(_downKeys, keyCode) != -1;
  }

  function getPressedKeyCodes() {
      return _downKeys.slice(0);
  }

  function filter(event){
    var tagName = (event.target || event.srcElement).tagName;
    // ignore keypressed in any elements that support keyboard data input
    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');
  }

  // initialize key.<modifier> to false
  for(k in _MODIFIERS) assignKey[k] = false;

  // set current scope (default 'all')
  function setScope(scope){ _scope = scope || 'all' };
  function getScope(){ return _scope || 'all' };

  // delete all handlers for a given scope
  function deleteScope(scope){
    var key, handlers, i;

    for (key in _handlers) {
      handlers = _handlers[key];
      for (i = 0; i < handlers.length; ) {
        if (handlers[i].scope === scope) handlers.splice(i, 1);
        else i++;
      }
    }
  };

  // abstract key logic for assign and unassign
  function getKeys(key) {
    var keys;
    key = key.replace(/\s/g, '');
    keys = key.split(',');
    if ((keys[keys.length - 1]) == '') {
      keys[keys.length - 2] += ',';
    }
    return keys;
  }

  // abstract mods logic for assign and unassign
  function getMods(key) {
    var mods = key.slice(0, key.length - 1);
    for (var mi = 0; mi < mods.length; mi++)
    mods[mi] = _MODIFIERS[mods[mi]];
    return mods;
  }

  // cross-browser events
  function addEvent(object, event, method) {
    if (object.addEventListener)
      object.addEventListener(event, method, false);
    else if(object.attachEvent)
      object.attachEvent('on'+event, function(){ method(window.event) });
  };

  // set the handlers globally on document
  addEvent(document, 'keydown', function(event) { dispatch(event) }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48
  addEvent(document, 'keyup', clearModifier);

  // reset modifiers to false whenever the window is (re)focused.
  addEvent(window, 'focus', resetModifiers);

  // store previously defined key
  var previousKey = global.key;

  // restore previously defined key and return reference to our key object
  function noConflict() {
    var k = global.key;
    global.key = previousKey;
    return k;
  }

  // set window.key and window.key.set/get/deleteScope, and the default filter
  global.key = assignKey;
  global.key.setScope = setScope;
  global.key.getScope = getScope;
  global.key.deleteScope = deleteScope;
  global.key.filter = filter;
  global.key.isPressed = isPressed;
  global.key.getPressedKeyCodes = getPressedKeyCodes;
  global.key.noConflict = noConflict;
  global.key.unbind = unbindKey;

  if(true) module.exports = assignKey;

})(this);


/***/ }),

/***/ "./node_modules/underscore/underscore.js":
/*!***********************************************!*\
  !*** ./node_modules/underscore/underscore.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if ( true && !exports.nodeType) {
    if ( true && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}());

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/block_manager/config/config.js":
/*!********************************************!*\
  !*** ./src/block_manager/config/config.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // Specify the element to use as a container, string (query) or HTMLElement
  // With the empty value, nothing will be rendered
  appendTo: '',
  // Append blocks to canvas on click
  appendOnClick: 0,
  blocks: []
});

/***/ }),

/***/ "./src/block_manager/index.js":
/*!************************************!*\
  !*** ./src/block_manager/index.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/config */ "./src/block_manager/config/config.js");
/* harmony import */ var _model_Blocks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/Blocks */ "./src/block_manager/model/Blocks.js");
/* harmony import */ var _model_Categories__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/Categories */ "./src/block_manager/model/Categories.js");
/* harmony import */ var _view_BlocksView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view/BlocksView */ "./src/block_manager/view/BlocksView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/block_manager/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  blockManager: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const blockManager = editor.BlockManager;
 * ```
 * * [add](#add)
 * * [get](#get)
 * * [getAll](#getall)
 * * [getAllVisible](#getallvisible)
 * * [remove](#remove)
 * * [getConfig](#getconfig)
 * * [getCategories](#getcategories)
 * * [getContainer](#getcontainer)
 * * [render](#render)
 *
 * @module BlockManager
 */





/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var blocks, blocksVisible, blocksView;
  var categories = [];
  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'BlockManager',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @return {this}
     * @private
     */
    init: function init(config) {
      c = config || {};
      var em = c.em;

      for (var name in _config_config__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        if (!(name in c)) {
          c[name] = _config_config__WEBPACK_IMPORTED_MODULE_2__["default"][name];
        }
      } // Global blocks collection


      blocks = new _model_Blocks__WEBPACK_IMPORTED_MODULE_3__["default"]([]);
      blocksVisible = new _model_Blocks__WEBPACK_IMPORTED_MODULE_3__["default"]([]);
      categories = new _model_Categories__WEBPACK_IMPORTED_MODULE_4__["default"]();
      blocksView = new _view_BlocksView__WEBPACK_IMPORTED_MODULE_5__["default"]({
        collection: blocksVisible,
        categories: categories
      }, c); // Setup the sync between the global and public collections

      blocks.listenTo(blocks, 'add', function (model) {
        blocksVisible.add(model);
        em && em.trigger('block:add', model);
      });
      blocks.listenTo(blocks, 'remove', function (model) {
        blocksVisible.remove(model);
        em && em.trigger('block:remove', model);
      });
      blocks.listenTo(blocks, 'reset', function (coll) {
        blocksVisible.reset(coll.models);
      });
      return this;
    },

    /**
     * Get configuration object
     * @return {Object}
     */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Load default blocks if the collection is empty
     */
    onLoad: function onLoad() {
      var blocks = this.getAll();
      !blocks.length && blocks.reset(c.blocks);
    },
    postRender: function postRender() {
      var elTo = this.getConfig().appendTo;

      if (elTo) {
        var el = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isElement"])(elTo) ? elTo : document.querySelector(elTo);
        el.appendChild(this.render());
      }
    },

    /**
     * Add new block to the collection.
     * @param {string} id Block id
     * @param {Object} opts Options
     * @param {string} opts.label Name of the block
     * @param {string} opts.content HTML content
     * @param {string|Object} opts.category Group the block inside a catgegory.
     *                                      You should pass objects with id property, eg:
     *                                      {id: 'some-uid', label: 'My category'}
     *                                      The string will be converted in:
     *                                      'someid' => {id: 'someid', label: 'someid'}
     * @param {Object} [opts.attributes={}] Block attributes
     * @return {Block} Added block
     * @example
     * blockManager.add('h1-block', {
     *   label: 'Heading',
     *   content: '<h1>Put your title here</h1>',
     *   category: 'Basic',
     *   attributes: {
     *     title: 'Insert h1 block'
     *   }
     * });
     */
    add: function add(id, opts) {
      var obj = opts || {};
      obj.id = id;
      return blocks.add(obj);
    },

    /**
     * Return the block by id
     * @param  {string} id Block id
     * @example
     * const block = blockManager.get('h1-block');
     * console.log(JSON.stringify(block));
     * // {label: 'Heading', content: '<h1>Put your ...', ...}
     */
    get: function get(id) {
      return blocks.get(id);
    },

    /**
     * Return all blocks
     * @return {Collection}
     * @example
     * const blocks = blockManager.getAll();
     * console.log(JSON.stringify(blocks));
     * // [{label: 'Heading', content: '<h1>Put your ...'}, ...]
     */
    getAll: function getAll() {
      return blocks;
    },

    /**
     * Return the visible collection, which containes blocks actually rendered
     * @return {Collection}
     */
    getAllVisible: function getAllVisible() {
      return blocksVisible;
    },

    /**
     * Remove a block by id
     * @param {string} id Block id
     * @return {Block} Removed block
     */
    remove: function remove(id) {
      return blocks.remove(id);
    },

    /**
     * Get all available categories.
     * It's possible to add categories only within blocks via 'add()' method
     * @return {Array|Collection}
     */
    getCategories: function getCategories() {
      return categories;
    },

    /**
     * Return the Blocks container element
     * @return {HTMLElement}
     */
    getContainer: function getContainer() {
      return blocksView.el;
    },

    /**
     * Render blocks
     * @param  {Array} blocks Blocks to render, without the argument will render all global blocks
     * @param  {Object} [opts={}] Options
     * @param  {Boolean} [opts.external] Render blocks in a new container (HTMLElement will be returned)
     * @param  {Boolean} [opts.ignoreCategories] Render blocks without categories
     * @return {HTMLElement} Rendered element
     * @example
     * // Render all blocks (inside the global collection)
     * blockManager.render();
     *
     * // Render new set of blocks
     * const blocks = blockManager.getAll();
     * const filtered = blocks.filter(block => block.get('category') == 'sections')
     *
     * blockManager.render(filtered);
     * // Or a new set from an array
     * blockManager.render([
     *  {label: 'Label text', content: '<div>Content</div>'}
     * ]);
     *
     * // Back to blocks from the global collection
     * blockManager.render();
     *
     * // You can also render your blocks outside of the main block container
     * const newBlocksEl = blockManager.render(filtered, { external: true });
     * document.getElementById('some-id').appendChild(newBlocksEl);
     */
    render: function render(blocks) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var toRender = blocks || this.getAll().models;

      if (opts.external) {
        return new _view_BlocksView__WEBPACK_IMPORTED_MODULE_5__["default"]({
          collection: new _model_Blocks__WEBPACK_IMPORTED_MODULE_3__["default"](toRender),
          categories: categories
        }, _objectSpread({}, c, {}, opts)).render().el;
      }

      if (!blocksView.rendered) {
        blocksView.render();
        blocksView.rendered = 1;
      }

      blocksView.updateConfig(opts);
      blocksView.collection.reset(toRender);
      return this.getContainer();
    }
  };
});

/***/ }),

/***/ "./src/block_manager/model/Block.js":
/*!******************************************!*\
  !*** ./src/block_manager/model/Block.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Category__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Category */ "./src/block_manager/model/Category.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    // If true, triggers an 'active' event on dropped component
    activate: 0,
    // If true, the dropped component will be selected
    select: 0,
    // If true, all IDs of dropped component and its style will be changed
    resetId: 0,
    // Block label
    label: '',
    // HTML string for the media of the block, eg. SVG icon, image, etc.
    media: '',
    content: '',
    category: '',
    attributes: {}
  },
  initialize: function initialize() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var category = this.get('category');

    if (category) {
      if (typeof category == 'string') {
        var catObj = new _Category__WEBPACK_IMPORTED_MODULE_1__["default"]({
          id: category,
          label: category
        });
      }
    }
  }
}));

/***/ }),

/***/ "./src/block_manager/model/Blocks.js":
/*!*******************************************!*\
  !*** ./src/block_manager/model/Blocks.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Block__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Block */ "./src/block_manager/model/Block.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Block__WEBPACK_IMPORTED_MODULE_1__["default"]
}));

/***/ }),

/***/ "./src/block_manager/model/Categories.js":
/*!***********************************************!*\
  !*** ./src/block_manager/model/Categories.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Category__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Category */ "./src/block_manager/model/Category.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Category__WEBPACK_IMPORTED_MODULE_1__["default"]
}));

/***/ }),

/***/ "./src/block_manager/model/Category.js":
/*!*********************************************!*\
  !*** ./src/block_manager/model/Category.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    id: '',
    label: '',
    open: true,
    attributes: {}
  }
}));

/***/ }),

/***/ "./src/block_manager/view/BlockView.js":
/*!*********************************************!*\
  !*** ./src/block_manager/view/BlockView.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  events: {
    click: 'handleClick',
    mousedown: 'startDrag',
    dragstart: 'handleDragStart',
    drag: 'handleDrag',
    dragend: 'handleDragEnd'
  },
  initialize: function initialize(o) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = this.model;
    this.em = config.em;
    this.config = config;
    this.endDrag = this.endDrag.bind(this);
    this.ppfx = config.pStylePrefix || '';
    this.listenTo(model, 'destroy remove', this.remove);
    this.listenTo(model, 'change', this.render);
  },
  handleClick: function handleClick() {
    var config = this.config,
        model = this.model,
        em = this.em;
    if (!config.appendOnClick) return;
    var sorter = config.getSorter();
    var content = model.get('content');
    var selected = em.getSelected();
    sorter.setDropContent(content);
    var target, valid; // If there is a selected component, try first to append
    // the block inside, otherwise, try to place it as a next sibling

    if (selected) {
      valid = sorter.validTarget(selected.getEl(), content);

      if (valid.valid) {
        target = selected;
      } else {
        var parent = selected.parent();
        valid = sorter.validTarget(parent.getEl(), content);
        if (valid.valid) target = parent;
      }
    } // If no target found yet, try to append the block to the wrapper


    if (!target) {
      var wrapper = em.getWrapper();
      valid = sorter.validTarget(wrapper.getEl(), content);
      if (valid.valid) target = wrapper;
    }

    var result = target && target.append(content)[0];
    result && em.setSelected(result, {
      scroll: 1
    });
  },

  /**
   * Start block dragging
   * @private
   */
  startDrag: function startDrag(e) {
    var config = this.config,
        em = this.em; //Right or middel click

    if (e.button !== 0 || !config.getSorter || this.el.draggable) return;
    em.refreshCanvas();
    var sorter = config.getSorter();
    sorter.setDragHelper(this.el, e);
    sorter.setDropContent(this.model.get('content'));
    sorter.startSort(this.el);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(document, 'mouseup', this.endDrag);
  },
  handleDragStart: function handleDragStart(ev) {
    var em = this.em,
        model = this.model;
    var content = model.get('content');
    var isObj = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isObject"])(content);
    var data = isObj ? JSON.stringify(content) : content;
    em.set('dragResult'); // Note: data are not available on dragenter for security reason,
    // we have to use dragContent as we need it for the Sorter context
    // IE11 supports only 'text' data type

    ev.dataTransfer.setData('text', data);
    em.set('dragContent', content);
    em.trigger('block:drag:start', model, ev);
  },
  handleDrag: function handleDrag(ev) {
    this.em.trigger('block:drag', this.model, ev);
  },
  handleDragEnd: function handleDragEnd() {
    var em = this.em,
        model = this.model;
    var result = em.get('dragResult');

    if (result) {
      var oldKey = 'activeOnRender';
      var oldActive = result.get && result.get(oldKey);

      if (model.get('activate') || oldActive) {
        result.trigger('active');
        result.set(oldKey, 0);
      }

      if (model.get('select')) {
        em.setSelected(result);
      }

      if (model.get('resetId')) {
        result.onAll(function (model) {
          return model.resetId();
        });
      }
    }

    em.set({
      dragResult: null,
      dragContent: null
    });
    em.trigger('block:drag:stop', result, model);
  },

  /**
   * Drop block
   * @private
   */
  endDrag: function endDrag(e) {
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["off"])(document, 'mouseup', this.endDrag);
    var sorter = this.config.getSorter(); // After dropping the block in the canvas the mouseup event is not yet
    // triggerd on 'this.doc' and so clicking outside, the sorter, tries to move
    // things (throws false positives). As this method just need to drop away
    // the block helper I use the trick of 'moved = 0' to void those errors.

    sorter.moved = 0;
    sorter.endMove();
  },
  render: function render() {
    var em = this.em,
        el = this.el,
        ppfx = this.ppfx,
        model = this.model;
    var className = "".concat(ppfx, "block");
    var label = model.get('label');
    var render = model.get('render');
    var media = model.get('media');
    el.className += " ".concat(className, " ").concat(ppfx, "one-bg ").concat(ppfx, "four-color-h");
    el.innerHTML = "\n      ".concat(media ? "<div class=\"".concat(className, "__media\">").concat(media, "</div>") : '', "\n      <div class=\"").concat(className, "-label\">").concat(label, "</div>\n    ");
    el.title = el.textContent.trim();
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["hasDnd"])(em) && el.setAttribute('draggable', true);
    var result = render && render({
      el: el,
      model: model,
      className: className,
      prefix: ppfx
    });
    if (result) el.innerHTML = result;
    return this;
  }
}));

/***/ }),

/***/ "./src/block_manager/view/BlocksView.js":
/*!**********************************************!*\
  !*** ./src/block_manager/view/BlocksView.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _BlockView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlockView */ "./src/block_manager/view/BlockView.js");
/* harmony import */ var _CategoryView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CategoryView */ "./src/block_manager/view/CategoryView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  initialize: function initialize(opts, config) {
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["bindAll"])(this, 'getSorter', 'onDrag', 'onDrop');
    this.config = config || {};
    this.categories = opts.categories || '';
    this.renderedCategories = [];
    var ppfx = this.config.pStylePrefix || '';
    this.ppfx = ppfx;
    this.noCatClass = "".concat(ppfx, "blocks-no-cat");
    this.blockContClass = "".concat(ppfx, "blocks-c");
    this.catsClass = "".concat(ppfx, "block-categories");
    var coll = this.collection;
    this.listenTo(coll, 'add', this.addTo);
    this.listenTo(coll, 'reset', this.render);
    this.em = this.config.em;
    this.tac = 'test-tac';
    this.grabbingCls = this.ppfx + 'grabbing';

    if (this.em) {
      this.config.getSorter = this.getSorter;
      this.canvas = this.em.get('Canvas');
    }
  },
  updateConfig: function updateConfig() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.config = _objectSpread({}, this.config, {}, opts);
  },

  /**
   * Get sorter
   * @private
   */
  getSorter: function getSorter() {
    if (!this.em) return;

    if (!this.sorter) {
      var utils = this.em.get('Utils');
      var canvas = this.canvas;
      this.sorter = new utils.Sorter({
        container: canvas.getBody(),
        placer: canvas.getPlacerEl(),
        containerSel: '*',
        itemSel: '*',
        pfx: this.ppfx,
        onStart: this.onDrag,
        onEndMove: this.onDrop,
        onMove: this.onMove,
        document: canvas.getFrameEl().contentDocument,
        direction: 'a',
        wmargin: 1,
        nested: 1,
        em: this.em,
        canvasRelative: 1
      });
    }

    return this.sorter;
  },

  /**
   * Callback when block is on drag
   * @private
   */
  onDrag: function onDrag(e) {
    this.em.stopDefault();
    this.em.trigger('block:drag:start', e);
  },
  onMove: function onMove(e) {
    this.em.trigger('block:drag:move', e);
  },

  /**
   * Callback when block is dropped
   * @private
   */
  onDrop: function onDrop(model) {
    var em = this.em;
    em.runDefault();

    if (model && model.get) {
      if (model.get('activeOnRender')) {
        model.trigger('active');
        model.set('activeOnRender', 0);
      }

      em.trigger('block:drag:stop', model);
    }
  },

  /**
   * Add new model to the collection
   * @param {Model} model
   * @private
   * */
  addTo: function addTo(model) {
    this.add(model);
  },

  /**
   * Render new model inside the view
   * @param {Model} model
   * @param {Object} fragment Fragment collection
   * @private
   * */
  add: function add(model, fragment) {
    var config = this.config;
    var frag = fragment || null;
    var view = new _BlockView__WEBPACK_IMPORTED_MODULE_3__["default"]({
      model: model,
      attributes: model.get('attributes')
    }, config);
    var rendered = view.render().el;
    var category = model.get('category'); // Check for categories

    if (category && this.categories && !config.ignoreCategories) {
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(category)) {
        category = {
          id: category,
          label: category
        };
      } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isObject"])(category) && !category.id) {
        category.id = category.label;
      }

      var catModel = this.categories.add(category);
      var catId = catModel.get('id');
      var catView = this.renderedCategories[catId];
      var categories = this.getCategoriesEl();
      model.set('category', catModel);

      if (!catView && categories) {
        catView = new _CategoryView__WEBPACK_IMPORTED_MODULE_4__["default"]({
          model: catModel
        }, this.config).render();
        this.renderedCategories[catId] = catView;
        categories.appendChild(catView.el);
      }

      catView && catView.append(rendered);
      return;
    }

    if (frag) frag.appendChild(rendered);else this.append(rendered);
  },
  getCategoriesEl: function getCategoriesEl() {
    if (!this.catsEl) {
      this.catsEl = this.el.querySelector(".".concat(this.catsClass));
    }

    return this.catsEl;
  },
  getBlocksEl: function getBlocksEl() {
    if (!this.blocksEl) {
      this.blocksEl = this.el.querySelector(".".concat(this.noCatClass, " .").concat(this.blockContClass));
    }

    return this.blocksEl;
  },
  append: function append(el) {
    var blocks = this.getBlocksEl();
    blocks && blocks.appendChild(el);
  },
  render: function render() {
    var _this = this;

    var ppfx = this.ppfx;
    var frag = document.createDocumentFragment();
    this.catsEl = null;
    this.blocksEl = null;
    this.renderedCategories = [];
    this.el.innerHTML = "\n      <div class=\"".concat(this.catsClass, "\"></div>\n      <div class=\"").concat(this.noCatClass, "\">\n        <div class=\"").concat(this.blockContClass, "\"></div>\n      </div>\n    ");
    this.collection.each(function (model) {
      return _this.add(model, frag);
    });
    this.append(frag);
    var cls = "".concat(this.blockContClass, "s ").concat(ppfx, "one-bg ").concat(ppfx, "two-color");
    this.$el.addClass(cls);
    return this;
  }
}));

/***/ }),

/***/ "./src/block_manager/view/CategoryView.js":
/*!************************************************!*\
  !*** ./src/block_manager/view/CategoryView.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  template: Object(underscore__WEBPACK_IMPORTED_MODULE_0__["template"])("\n  <div class=\"<%= pfx %>title\">\n    <i class=\"<%= pfx %>caret-icon\"></i>\n    <%= label %>\n  </div>\n  <div class=\"<%= pfx %>blocks-c\"></div>\n  "),
  events: {},
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.config = config;
    var pfx = this.config.pStylePrefix || '';
    this.pfx = pfx;
    this.caretR = 'fa fa-caret-right';
    this.caretD = 'fa fa-caret-down';
    this.iconClass = "".concat(pfx, "caret-icon");
    this.activeClass = "".concat(pfx, "open");
    this.className = "".concat(pfx, "block-category");
    this.events["click .".concat(pfx, "title")] = 'toggle';
    this.listenTo(this.model, 'change:open', this.updateVisibility);
    this.delegateEvents();
  },
  updateVisibility: function updateVisibility() {
    if (this.model.get('open')) this.open();else this.close();
  },
  open: function open() {
    this.el.className = "".concat(this.className, " ").concat(this.activeClass);
    this.getIconEl().className = "".concat(this.iconClass, " ").concat(this.caretD);
    this.getBlocksEl().style.display = '';
  },
  close: function close() {
    this.el.className = this.className;
    this.getIconEl().className = "".concat(this.iconClass, " ").concat(this.caretR);
    this.getBlocksEl().style.display = 'none';
  },
  toggle: function toggle() {
    var model = this.model;
    model.set('open', !model.get('open'));
  },
  getIconEl: function getIconEl() {
    if (!this.iconEl) {
      this.iconEl = this.el.querySelector('.' + this.iconClass);
    }

    return this.iconEl;
  },
  getBlocksEl: function getBlocksEl() {
    if (!this.blocksEl) {
      this.blocksEl = this.el.querySelector('.' + this.pfx + 'blocks-c');
    }

    return this.blocksEl;
  },
  append: function append(el) {
    this.getBlocksEl().appendChild(el);
  },
  render: function render() {
    this.el.innerHTML = this.template({
      pfx: this.pfx,
      label: this.model.get('label')
    });
    this.el.className = this.className;
    this.$el.css({
      order: this.model.get('order')
    });
    this.updateVisibility();
    return this;
  }
}));

/***/ }),

/***/ "./src/canvas/config/config.js":
/*!*************************************!*\
  !*** ./src/canvas/config/config.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'cv-',

  /*
   * Append external scripts to the `<head>` of the iframe.
   * Be aware that these scripts will not be printed in the export code
   * @example
   * scripts: [ 'https://...1.js', 'https://...2.js' ]
   */
  scripts: [],

  /*
   * Append external styles to the `<head>` of the iframe
   * Be aware that these styles will not be printed in the export code
   * @example
   * styles: [ 'https://...1.css', 'https://...2.css' ]
   */
  styles: [],

  /**
   * Add custom badge naming strategy
   * @example
   * customBadgeLabel: function(component) {
   *  return component.getName();
   * }
   */
  customBadgeLabel: '',

  /**
   * Indicate when to start the auto scroll of the canvas on component/block dragging (value in px )
   */
  autoscrollLimit: 50,

  /**
   * When some textable component is selected and focused (eg. input or text component) the editor
   * stops some commands (eg. disables the copy/paste of components with CTRL+C/V to allow the copy/paste of the text).
   * This option allows to customize, by a selector, which element should not be considered textable
   */
  notTextable: ['button', 'a', 'input[type=checkbox]', 'input[type=radio]']
});

/***/ }),

/***/ "./src/canvas/index.js":
/*!*****************************!*\
  !*** ./src/canvas/index.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var utils_Droppable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/Droppable */ "./src/utils/Droppable.js");
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config/config */ "./src/canvas/config/config.js");
/* harmony import */ var _model_Canvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model/Canvas */ "./src/canvas/model/Canvas.js");
/* harmony import */ var _view_CanvasView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./view/CanvasView */ "./src/canvas/view/CanvasView.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/canvas/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  canvas: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const canvas = editor.Canvas;
 * ```
 *
 * * [getConfig](#getconfig)
 * * [getElement](#getelement)
 * * [getFrameEl](#getframeel)
 * * [getWindow](#getwindow)
 * * [getDocument](#getdocument)
 * * [getBody](#getbody)
 * * [getWrapperEl](#getwrapperel)
 * * [setCustomBadgeLabel](#setcustombadgelabel)
 * * [hasFocus](#hasfocus)
 * * [scrollTo](#scrollto)
 * * [setZoom](#setzoom)
 * * [getZoom](#getzoom)
 *
 * @module Canvas
 */





var _window = window,
    requestAnimationFrame = _window.requestAnimationFrame;
/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var canvas;
  var frameRect;
  var CanvasView;
  return {
    /**
     * Used inside RTE
     * @private
     */
    getCanvasView: function getCanvasView() {
      return CanvasView;
    },

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'Canvas',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @private
     */
    init: function init() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_5__["default"], {}, config);
      this.em = c.em;
      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix;
      canvas = new _model_Canvas__WEBPACK_IMPORTED_MODULE_6__["default"](config);
      CanvasView = new _view_CanvasView__WEBPACK_IMPORTED_MODULE_7__["default"]({
        model: canvas,
        config: c
      });
      var cm = c.em.get('DomComponents');
      if (cm) this.setWrapper(cm);
      this.startAutoscroll = this.startAutoscroll.bind(this);
      this.stopAutoscroll = this.stopAutoscroll.bind(this);
      this.autoscroll = this.autoscroll.bind(this);
      this.updateClientY = this.updateClientY.bind(this);
      return this;
    },

    /**
     * Get the configuration object
     * @return {Object}
     */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Add wrapper
     * @param	{Object}	wrp Wrapper
     * @private
     * */
    setWrapper: function setWrapper(wrp) {
      canvas.set('wrapper', wrp);
    },

    /**
     * Get the canvas element
     * @return {HTMLElement}
     */
    getElement: function getElement() {
      return CanvasView.el;
    },
    getFrame: function getFrame() {
      return canvas.get('frame');
    },

    /**
     * Get the iframe element of the canvas
     * @return {HTMLIFrameElement}
     */
    getFrameEl: function getFrameEl() {
      return CanvasView.frame.el;
    },

    /**
     * Get the window instance of the iframe element
     * @return {Window}
     */
    getWindow: function getWindow() {
      return this.getFrameEl().contentWindow;
    },

    /**
     * Get the document of the iframe element
     * @return {HTMLDocument}
     */
    getDocument: function getDocument() {
      return this.getFrameEl().contentDocument;
    },

    /**
     * Get the body of the iframe element
     * @return {HTMLBodyElement}
     */
    getBody: function getBody() {
      var doc = this.getDocument();
      return doc && doc.body;
    },

    /**
     * Get the wrapper element containing all the components
     * @return {HTMLElement}
     */
    getWrapperEl: function getWrapperEl() {
      var body = this.getBody();
      return body && body.querySelector('#wrapper');
    },

    /**
     * Returns element containing all canvas tools
     * @return {HTMLElement}
     * @private
     */
    getToolsEl: function getToolsEl() {
      return CanvasView.toolsEl;
    },

    /**
     * Returns highlighter element
     * @return {HTMLElement}
     * @private
     */
    getHighlighter: function getHighlighter() {
      return CanvasView.hlEl;
    },

    /**
     * Returns badge element
     * @return {HTMLElement}
     * @private
     */
    getBadgeEl: function getBadgeEl() {
      return CanvasView.badgeEl;
    },

    /**
     * Returns placer element
     * @return {HTMLElement}
     * @private
     */
    getPlacerEl: function getPlacerEl() {
      return CanvasView.placerEl;
    },

    /**
     * Returns ghost element
     * @return {HTMLElement}
     * @private
     */
    getGhostEl: function getGhostEl() {
      return CanvasView.ghostEl;
    },

    /**
     * Returns toolbar element
     * @return {HTMLElement}
     * @private
     */
    getToolbarEl: function getToolbarEl() {
      return CanvasView.toolbarEl;
    },

    /**
     * Returns resizer element
     * @return {HTMLElement}
     * @private
     */
    getResizerEl: function getResizerEl() {
      return CanvasView.resizerEl;
    },

    /**
     * Returns offset viewer element
     * @return {HTMLElement}
     * @private
     */
    getOffsetViewerEl: function getOffsetViewerEl() {
      return CanvasView.offsetEl;
    },

    /**
     * Returns fixed offset viewer element
     * @return {HTMLElement}
     * @private
     */
    getFixedOffsetViewerEl: function getFixedOffsetViewerEl() {
      return CanvasView.fixedOffsetEl;
    },

    /**
     * Render canvas
     * @private
     * */
    render: function render() {
      return CanvasView.render().el;
    },

    /**
     * Get frame position
     * @return {Object}
     * @private
     */
    getOffset: function getOffset() {
      var frameOff = this.offset(this.getFrameEl());
      var canvasOff = this.offset(this.getElement());
      return {
        top: frameOff.top - canvasOff.top,
        left: frameOff.left - canvasOff.left
      };
    },

    /**
     * Get the offset of the passed component element
     * @param  {HTMLElement} el
     * @return {Object}
     * @private
     */
    offset: function offset(el) {
      return CanvasView.offset(el);
    },

    /**
     * Set custom badge naming strategy
     * @param  {Function} f
     * @example
     * canvas.setCustomBadgeLabel(function(component){
     *  return component.getName();
     * });
     */
    setCustomBadgeLabel: function setCustomBadgeLabel(f) {
      c.customBadgeLabel = f;
    },

    /**
     * Get element position relative to the canvas
     * @param {HTMLElement} el
     * @return {Object}
     * @private
     */
    getElementPos: function getElementPos(el, opts) {
      return CanvasView.getElementPos(el, opts);
    },

    /**
     * Returns element's offsets like margins and paddings
     * @param {HTMLElement} el
     * @return {Object}
     * @private
     */
    getElementOffsets: function getElementOffsets(el) {
      return CanvasView.getElementOffsets(el);
    },

    /**
     * Get canvas rectangular data
     * @returns {Object}
     */
    getRect: function getRect() {
      var _CanvasView$getPositi = CanvasView.getPosition(),
          top = _CanvasView$getPositi.top,
          left = _CanvasView$getPositi.left;

      return _objectSpread({}, CanvasView.getCanvasOffset(), {
        topScroll: top,
        leftScroll: left
      });
    },

    /**
     * This method comes handy when you need to attach something like toolbars
     * to elements inside the canvas, dealing with all relative position,
     * offsets, etc. and returning as result the object with positions which are
     * viewable by the user (when the canvas is scrolled the top edge of the element
     * is not viewable by the user anymore so the new top edge is the one of the canvas)
     *
     * The target should be visible before being passed here as invisible elements
     * return empty string as width
     * @param {HTMLElement} target The target in this case could be the toolbar
     * @param {HTMLElement} element The element on which I'd attach the toolbar
     * @param {Object} options Custom options
     * @param {Boolean} options.toRight Set to true if you want the toolbar attached to the right
     * @return {Object}
     * @private
     */
    getTargetToElementDim: function getTargetToElementDim(target, element) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var opts = options || {};
      var canvasPos = CanvasView.getPosition();
      if (!canvasPos) return;
      var pos = opts.elPos || CanvasView.getElementPos(element);
      var toRight = options.toRight || 0;
      var targetHeight = opts.targetHeight || target.offsetHeight;
      var targetWidth = opts.targetWidth || target.offsetWidth;
      var eventToTrigger = opts.event || null;
      var elTop = pos.top - targetHeight;
      var elLeft = pos.left;
      elLeft += toRight ? pos.width : 0;
      elLeft = toRight ? elLeft - targetWidth : elLeft;
      var leftPos = elLeft < canvasPos.left ? canvasPos.left : elLeft;
      var topPos = elTop < canvasPos.top ? canvasPos.top : elTop;
      topPos = topPos > pos.top + pos.height ? pos.top + pos.height : topPos;
      var result = {
        top: topPos,
        left: leftPos,
        elementTop: pos.top,
        elementLeft: pos.left,
        elementWidth: pos.width,
        elementHeight: pos.height,
        targetWidth: target.offsetWidth,
        targetHeight: target.offsetHeight,
        canvasTop: canvasPos.top,
        canvasLeft: canvasPos.left,
        canvasWidth: canvasPos.width,
        canvasHeight: canvasPos.height
      }; // In this way I can catch data and also change the position strategy

      if (eventToTrigger && c.em) {
        c.em.trigger(eventToTrigger, result);
      }

      return result;
    },

    /**
     * Instead of simply returning e.clientX and e.clientY this function
     * calculates also the offset based on the canvas. This is helpful when you
     * need to get X and Y position while moving between the editor area and
     * canvas area, which is in the iframe
     * @param {Event} e
     * @return {Object}
     * @private
     */
    getMouseRelativePos: function getMouseRelativePos(e, options) {
      var opts = options || {};
      var addTop = 0;
      var addLeft = 0;
      var subWinOffset = opts.subWinOffset;
      var doc = e.target.ownerDocument;
      var win = doc.defaultView || doc.parentWindow;
      var frame = win.frameElement;
      var yOffset = subWinOffset ? win.pageYOffset : 0;
      var xOffset = subWinOffset ? win.pageXOffset : 0;

      if (frame) {
        var frameRect = frame.getBoundingClientRect();
        addTop = frameRect.top || 0;
        addLeft = frameRect.left || 0;
      }

      return {
        y: e.clientY + addTop - yOffset,
        x: e.clientX + addLeft - xOffset
      };
    },

    /**
     * X and Y mouse position relative to the canvas
     * @param {Event} ev
     * @return {Object}
     * @private
     */
    getMouseRelativeCanvas: function getMouseRelativeCanvas(ev) {
      var zoom = this.getZoomDecimal();

      var _CanvasView$getPositi2 = CanvasView.getPosition(),
          top = _CanvasView$getPositi2.top,
          left = _CanvasView$getPositi2.left;

      return {
        y: ev.clientY * zoom + top,
        x: ev.clientX * zoom + left
      };
    },

    /**
     * Check if the canvas is focused
     * @return {Boolean}
     */
    hasFocus: function hasFocus() {
      return this.getDocument().hasFocus();
    },

    /**
     * Detects if some input is focused (input elements, text components, etc.)
     * @return {Boolean}
     * @private
     */
    isInputFocused: function isInputFocused() {
      var doc = this.getDocument();
      var toIgnore = ['body'].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(this.getConfig().notTextable));
      var focused = doc && doc.activeElement;
      return focused && !toIgnore.some(function (item) {
        return focused.matches(item);
      });
    },

    /**
     * Scroll canvas to the element if it's not visible. The scrolling is
     * executed via `scrollIntoView` API and options of this method are
     * passed to it. For instance, you can scroll smoothly by using
     * `{ behavior: 'smooth' }`.
     * @param  {HTMLElement|Component} el
     * @param  {Object} [opts={}] Options, same as options for `scrollIntoView`
     * @param  {Boolean} [opts.force=false] Force the scroll, even if the element is already visible
     * @example
     * const selected = editor.getSelected();
     * // Scroll smoothly (this behavior can be polyfilled)
     * canvas.scrollTo(selected, { behavior: 'smooth' });
     * // Force the scroll, even if the element is alredy visible
     * canvas.scrollTo(selected, { force: true });
     */
    scrollTo: function scrollTo(el) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var elem = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["getElement"])(el);
      var cv = this.getCanvasView();
      if (!elem) return;

      if (!cv.isElInViewport(elem) || opts.force) {
        var opt = _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(opts) === 'object' ? opts : {
          behavior: 'smooth',
          block: 'nearest'
        };
        elem.scrollIntoView(opt);
      }
    },

    /**
     * Start autoscroll
     * @private
     */
    startAutoscroll: function startAutoscroll() {
      var _this = this;

      this.dragging = 1;
      var toListen = this.getScrollListeners();
      frameRect = CanvasView.getFrameOffset(1); // By detaching those from the stack avoid browsers lags
      // Noticeable with "fast" drag of blocks

      setTimeout(function () {
        Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(toListen, 'mousemove dragover', _this.updateClientY);
        Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(toListen, 'mouseup', _this.stopAutoscroll);
        requestAnimationFrame(_this.autoscroll);
      }, 0);
    },
    updateClientY: function updateClientY(ev) {
      ev.preventDefault();
      this.lastClientY = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["getPointerEvent"])(ev).clientY * this.getZoomDecimal();
    },

    /**
     * @private
     */
    autoscroll: function autoscroll() {
      if (this.dragging) {
        var frameWindow = this.getFrameEl().contentWindow;
        var actualTop = frameWindow.document.body.scrollTop;
        var nextTop = actualTop;
        var clientY = this.lastClientY;
        var limitTop = this.getConfig().autoscrollLimit;
        var limitBottom = frameRect.height - limitTop;

        if (clientY < limitTop) {
          nextTop -= limitTop - clientY;
        }

        if (clientY > limitBottom) {
          nextTop += clientY - limitBottom;
        }

        frameWindow.scrollTo(0, nextTop);
        requestAnimationFrame(this.autoscroll);
      }
    },

    /**
     * Stop autoscroll
     * @private
     */
    stopAutoscroll: function stopAutoscroll() {
      this.dragging = 0;
      var toListen = this.getScrollListeners();
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(toListen, 'mousemove dragover', this.updateClientY);
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(toListen, 'mouseup', this.stopAutoscroll);
    },
    getScrollListeners: function getScrollListeners() {
      return [this.getFrameEl().contentWindow];
    },
    postRender: function postRender() {
      if (Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["hasDnd"])(c.em)) this.droppable = new utils_Droppable__WEBPACK_IMPORTED_MODULE_4__["default"](c.em);
    },

    /**
     * Set zoom value
     * @param {Number} value The zoom value, from 0 to 100
     * @returns {this}
     */
    setZoom: function setZoom(value) {
      canvas.set('zoom', parseFloat(value));
      return this;
    },

    /**
     * Get zoom value
     * @returns {Number}
     */
    getZoom: function getZoom() {
      return parseFloat(canvas.get('zoom'));
    },
    getZoomDecimal: function getZoomDecimal() {
      return this.getZoom() / 100;
    },
    getZoomMultiplier: function getZoomMultiplier() {
      var zoom = this.getZoomDecimal();
      return zoom ? 1 / zoom : 1;
    },

    /**
     * Returns wrapper element
     * @return {HTMLElement}
     * ????
     * @private
     */
    getFrameWrapperEl: function getFrameWrapperEl() {
      return CanvasView.frame.getWrapper();
    }
  };
});

/***/ }),

/***/ "./src/canvas/model/Canvas.js":
/*!************************************!*\
  !*** ./src/canvas/model/Canvas.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Frame__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Frame */ "./src/canvas/model/Frame.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    frame: '',
    wrapper: '',
    rulers: false,
    zoom: 100,
    x: 0,
    y: 0
  },
  initialize: function initialize() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _config$styles = config.styles,
        styles = _config$styles === void 0 ? [] : _config$styles,
        _config$scripts = config.scripts,
        scripts = _config$scripts === void 0 ? [] : _config$scripts;
    var frame = new _Frame__WEBPACK_IMPORTED_MODULE_1__["default"]();
    styles.forEach(function (style) {
      return frame.addLink(style);
    });
    scripts.forEach(function (script) {
      return frame.addScript(script);
    });
    this.set('frame', frame);
    this.listenTo(this, 'change:zoom', this.onZoomChange);
  },
  onZoomChange: function onZoomChange() {
    var zoom = this.get('zoom');
    zoom < 1 && this.set('zoom', 1);
  }
}));

/***/ }),

/***/ "./src/canvas/model/Frame.js":
/*!***********************************!*\
  !*** ./src/canvas/model/Frame.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend({
  defaults: {
    wrapper: '',
    width: '',
    height: '',
    head: '',
    attributes: {}
  },
  initialize: function initialize() {
    this.set('head', []);
  },
  getHead: function getHead() {
    return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(this.get('head'));
  },
  setHead: function setHead(value) {
    return this.set('head', _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(value));
  },
  addHeadItem: function addHeadItem(item) {
    var head = this.getHead();
    head.push(item);
    this.setHead(head);
  },
  getHeadByAttr: function getHeadByAttr(attr, value, tag) {
    var head = this.getHead();
    return head.filter(function (item) {
      return item.attributes && item.attributes[attr] == value && (!tag || tag === item.tag);
    })[0];
  },
  removeHeadByAttr: function removeHeadByAttr(attr, value, tag) {
    var head = this.getHead();
    var item = this.getHeadByAttr(attr, value, tag);
    var index = head.indexOf(item);

    if (index >= 0) {
      head.splice(index, 1);
      this.setHead(head);
    }
  },
  addLink: function addLink(href) {
    var tag = 'link';
    !this.getHeadByAttr('href', href, tag) && this.addHeadItem({
      tag: tag,
      attributes: {
        href: href,
        rel: 'stylesheet'
      }
    });
  },
  removeLink: function removeLink(href) {
    this.removeHeadByAttr('href', href, 'link');
  },
  addScript: function addScript(src) {
    var tag = 'script';
    !this.getHeadByAttr('src', src, tag) && this.addHeadItem({
      tag: tag,
      attributes: {
        src: src
      }
    });
  },
  removeScript: function removeScript(src) {
    this.removeHeadByAttr('src', src, 'script');
  }
}));

/***/ }),

/***/ "./src/canvas/view/CanvasView.js":
/*!***************************************!*\
  !*** ./src/canvas/view/CanvasView.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var _FrameView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FrameView */ "./src/canvas/view/FrameView.js");




var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
var timerZoom;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  events: {
    wheel: 'onWheel'
  },
  template: function template() {
    var pfx = this.pfx;
    return "\n      <div class=\"".concat(pfx, "canvas__frames\" data-frames></div>\n      <div id=\"").concat(pfx, "tools\" class=\"").concat(pfx, "canvas__tools\" data-tools></div>\n    ");
  },
  initialize: function initialize(o) {
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["bindAll"])(this, 'renderBody', 'onFrameScroll', 'clearOff', 'onKeyPress');
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(window, 'scroll resize', this.clearOff);
    var model = this.model;
    this.config = o.config || {};
    this.em = this.config.em || {};
    this.pfx = this.config.stylePrefix || '';
    this.ppfx = this.config.pStylePrefix || '';
    this.className = this.config.stylePrefix + 'canvas';
    this.listenTo(this.em, 'change:canvasOffset', this.clearOff);
    this.listenTo(model, 'change:zoom change:x change:y', this.updateFrames);
    this.toggleListeners(1);
    this.frame = new _FrameView__WEBPACK_IMPORTED_MODULE_3__["default"]({
      model: this.model.get('frame'),
      config: this.config
    });
  },
  remove: function remove() {
    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.remove.apply(this, arguments);
    this.toggleListeners();
  },
  preventDefault: function preventDefault(ev) {
    if (ev) {
      ev.preventDefault();
      ev._parentEvent && ev._parentEvent.preventDefault();
    }
  },
  toggleListeners: function toggleListeners(enable) {
    var method = enable ? 'on' : 'off';
    var methods = {
      on: utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"],
      off: utils_mixins__WEBPACK_IMPORTED_MODULE_2__["off"]
    };
    methods[method](document, 'keypress', this.onKeyPress);
  },
  onKeyPress: function onKeyPress(ev) {
    var em = this.em;
    var key = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["getKeyChar"])(ev);

    if (key === ' ' && em.getZoomDecimal() !== 1) {
      this.preventDefault(ev);
      em.get('Editor').runCommand('core:canvas-move');
    }
  },
  onWheel: function onWheel(ev) {
    if ((ev.ctrlKey || ev.metaKey) && this.em.getConfig('multiFrames')) {
      this.preventDefault(ev);
      var model = this.model;
      var delta = Math.max(-1, Math.min(1, ev.wheelDelta || -ev.detail));
      var zoom = model.get('zoom');
      model.set('zoom', zoom + delta * 2);
    }
  },
  updateFrames: function updateFrames(ev) {
    var em = this.em,
        model = this.model;
    var _model$attributes = model.attributes,
        x = _model$attributes.x,
        y = _model$attributes.y;
    var zoom = this.getZoom();
    var defOpts = {
      preserveSelected: 1
    };
    var mpl = zoom ? 1 / zoom : 1;
    this.framesArea.style.transform = "scale(".concat(zoom, ") translate(").concat(x * mpl, "px, ").concat(y * mpl, "px)");
    this.clearOff();
    this.onFrameScroll();
    em.stopDefault(defOpts);
    em.trigger('canvas:update', ev);
    timerZoom && clearTimeout(timerZoom);
    timerZoom = setTimeout(function () {
      return em.runDefault(defOpts);
    });
  },
  getZoom: function getZoom() {
    return this.em.getZoomDecimal();
  },

  /**
   * Checks if the element is visible in the canvas's viewport
   * @param  {HTMLElement}  el
   * @return {Boolean}
   */
  isElInViewport: function isElInViewport(el) {
    var rect = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["getElRect"])(Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["getElement"])(el));
    var frameRect = this.getFrameOffset();
    var rTop = rect.top;
    var rLeft = rect.left;
    return rTop >= 0 && rLeft >= 0 && rTop <= frameRect.height && rLeft <= frameRect.width;
  },

  /**
   * Update tools position
   * @private
   */
  onFrameScroll: function onFrameScroll() {
    var u = 'px';
    var body = this.frame.el.contentDocument.body;
    var zoom = this.getZoom();
    this.toolsEl.style.top = '-' + body.scrollTop * zoom + u;
    this.toolsEl.style.left = '-' + body.scrollLeft * zoom + u;
    this.em.trigger('canvasScroll');
  },

  /**
   * Insert scripts into head, it will call renderBody after all scripts loaded or failed
   * @private
   */
  renderScripts: function renderScripts() {
    var frame = this.frame;
    var that = this;

    frame.el.onload = function () {
      var scripts = that.config.scripts.slice(0),
          // clone
      counter = 0;

      function appendScript(scripts) {
        if (scripts.length > 0) {
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = scripts.shift();
          script.onerror = script.onload = appendScript.bind(null, scripts);
          frame.el.contentDocument.head.appendChild(script);
        } else {
          that.renderBody();
        }
      }

      appendScript(scripts);
    };
  },

  /**
   * Render inside frame's body
   * @private
   */
  renderBody: function renderBody() {
    var _this = this;

    var config = this.config,
        model = this.model;
    var wrap = this.model.get('frame').get('wrapper');
    var em = config.em;

    if (wrap) {
      var Canvas = em.get('Canvas');
      var ppfx = this.ppfx;
      var body = $(Canvas.getBody());
      var head = $(Canvas.getDocument().head);
      var cssc = em.get('CssComposer');
      var conf = em.get('Config');
      var externalStyles = '';
      config.styles.forEach(function (style) {
        externalStyles += "<link rel=\"stylesheet\" href=\"".concat(style, "\"/>");
      });
      var colorWarn = '#ffca6f'; // I need all this styles to make the editor work properly
      // Remove `html { height: 100%;}` from the baseCss as it gives jumpings
      // effects (on ENTER) with RTE like CKEditor (maybe some bug there?!?)
      // With `body {height: auto;}` jumps in CKEditor are removed but in
      // Firefox is impossible to drag stuff in empty canvas, so bring back
      // `body {height: 100%;}`.
      // For the moment I give the priority to Firefox as it might be
      // CKEditor's issue

      var frameCss = "\n        ".concat(em.config.baseCss || '', "\n\n        .").concat(ppfx, "dashed *[data-highlightable] {\n          outline: 1px dashed rgba(170,170,170,0.7);\n          outline-offset: -2px;\n        }\n\n        .").concat(ppfx, "comp-selected {\n          outline: 3px solid #3b97e3 !important;\n          outline-offset: -3px;\n        }\n\n        .").concat(ppfx, "comp-selected-parent {\n          outline: 2px solid ").concat(colorWarn, " !important\n        }\n\n        .").concat(ppfx, "no-select {\n          user-select: none;\n          -webkit-user-select:none;\n          -moz-user-select: none;\n        }\n\n        .").concat(ppfx, "freezed {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n\n        .").concat(ppfx, "no-pointer {\n          pointer-events: none;\n        }\n\n        .").concat(ppfx, "plh-image {\n          background: #f5f5f5;\n          border: none;\n          height: 100px;\n          width: 100px;\n          display: block;\n          outline: 3px solid #ffca6f;\n          cursor: pointer;\n          outline-offset: -2px\n        }\n\n        .").concat(ppfx, "grabbing {\n          cursor: grabbing;\n          cursor: -webkit-grabbing;\n        }\n\n        .").concat(ppfx, "is__grabbing {\n          overflow-x: hidden;\n        }\n\n        .").concat(ppfx, "is__grabbing,\n        .").concat(ppfx, "is__grabbing * {\n          cursor: grabbing !important;\n        }\n\n        ").concat(conf.canvasCss || '', "\n        ").concat(conf.protectedCss || '', "\n      ");

      if (externalStyles) {
        head.append(externalStyles);
      }

      body.append('<style>' + frameCss + '</style>');
      body.append(wrap.render()).append(cssc.render());
      body.append(this.getJsContainer());
      em.trigger('loaded');
      this.frame.el.contentWindow.onscroll = this.onFrameScroll;
      this.frame.updateOffset(); // Avoid the default link behaviour in the canvas

      body.on('click', function (ev) {
        return ev && ev.target.tagName == 'A' && ev.preventDefault();
      }); // Avoid the default form behaviour

      body.on('submit', function (ev) {
        return ev && ev.preventDefault();
      }); // When the iframe is focused the event dispatcher is not the same so
      // I need to delegate all events to the parent document

      var doc = document;
      var fdoc = this.frame.el.contentDocument; // Unfortunately just creating `KeyboardEvent(e.type, e)` is not enough,
      // the keyCode/which will be always `0`. Even if it's an old/deprecated
      // property keymaster (and many others) still use it... using `defineProperty`
      // hack seems the only way

      var createCustomEvent = function createCustomEvent(e, cls) {
        var oEvent;

        try {
          oEvent = new window[cls](e.type, e);
        } catch (e) {
          oEvent = document.createEvent(cls);
          oEvent.initEvent(e.type, true, true);
        }

        oEvent.keyCodeVal = e.keyCode;
        oEvent._parentEvent = e;
        ['keyCode', 'which'].forEach(function (prop) {
          Object.defineProperty(oEvent, prop, {
            get: function get() {
              return this.keyCodeVal;
            }
          });
        });
        return oEvent;
      };

      [{
        event: 'keydown keyup keypress',
        class: 'KeyboardEvent'
      }, {
        event: 'wheel',
        class: 'WheelEvent'
      }].forEach(function (obj) {
        return obj.event.split(' ').forEach(function (event) {
          fdoc.addEventListener(event, function (e) {
            return _this.el.dispatchEvent(createCustomEvent(e, obj.class));
          });
        });
      });
    }
  },

  /**
   * Get the offset of the element
   * @param  {HTMLElement} el
   * @return {Object}
   */
  offset: function offset(el) {
    var rect = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["getElRect"])(el);
    var docBody = el.ownerDocument.body;
    return {
      top: rect.top + docBody.scrollTop,
      left: rect.left + docBody.scrollLeft,
      width: rect.width,
      height: rect.height
    };
  },

  /**
   * Cleare cached offsets
   * @private
   */
  clearOff: function clearOff() {
    this.frmOff = null;
    this.cvsOff = null;
  },

  /**
   * Return frame offset
   * @return {Object}
   * @private
   */
  getFrameOffset: function getFrameOffset() {
    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    if (!this.frmOff || force) this.frmOff = this.offset(this.frame.el);
    return this.frmOff;
  },

  /**
   * Return canvas offset
   * @return {Object}
   * @private
   */
  getCanvasOffset: function getCanvasOffset() {
    if (!this.cvsOff) this.cvsOff = this.offset(this.el);
    return this.cvsOff;
  },

  /**
   * Returns element's data info
   * @param {HTMLElement} el
   * @return {Object}
   * @private
   */
  getElementPos: function getElementPos(el, opts) {
    var zoom = this.getZoom();
    var opt = opts || {};
    var frmOff = this.getFrameOffset();
    var cvsOff = this.getCanvasOffset();
    var eo = this.offset(el);
    var frmTop = opt.avoidFrameOffset ? 0 : frmOff.top;
    var frmLeft = opt.avoidFrameOffset ? 0 : frmOff.left;
    var top = eo.top * zoom + frmTop - cvsOff.top;
    var left = eo.left * zoom + frmLeft - cvsOff.left;
    var height = eo.height * zoom;
    var width = eo.width * zoom;
    return {
      top: top,
      left: left,
      height: height,
      width: width,
      zoom: zoom,
      rect: eo
    };
  },

  /**
   * Returns element's offsets like margins and paddings
   * @param {HTMLElement} el
   * @return {Object}
   * @private
   */
  getElementOffsets: function getElementOffsets(el) {
    var _this2 = this;

    if (!el || Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["isTextNode"])(el)) return {};
    var result = {};
    var styles = window.getComputedStyle(el);
    ['marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'].forEach(function (offset) {
      result[offset] = parseFloat(styles[offset]) * _this2.getZoom();
    });
    return result;
  },

  /**
   * Returns position data of the canvas element
   * @return {Object} obj Position object
   * @private
   */
  getPosition: function getPosition() {
    var doc = this.frame.el.contentDocument;
    if (!doc) return;
    var bEl = doc.body;
    var zoom = this.getZoom();
    var fo = this.getFrameOffset();
    var co = this.getCanvasOffset();
    return {
      top: fo.top + bEl.scrollTop * zoom - co.top,
      left: fo.left + bEl.scrollLeft * zoom - co.left,
      width: co.width,
      height: co.height
    };
  },

  /**
   * Update javascript of a specific component passed by its View
   * @param {View} view Component's View
   * @private
   */
  updateScript: function updateScript(view) {
    var model = view.model;
    var id = model.getId();

    if (!view.scriptContainer) {
      view.scriptContainer = $("<div id=\"".concat(id, "\">"));
      this.getJsContainer().appendChild(view.scriptContainer.get(0));
    }

    view.el.id = id;
    view.scriptContainer.html(''); // In editor, I make use of setTimeout as during the append process of elements
    // those will not be available immediately, therefore 'item' variable

    var script = document.createElement('script');
    script.innerHTML = "\n        setTimeout(function() {\n          var item = document.getElementById('".concat(id, "');\n          if (!item) return;\n          (function(){\n            ").concat(model.getScriptString(), ";\n          }.bind(item))()\n        }, 1);"); // #873
    // Adding setTimeout will make js components work on init of the editor

    setTimeout(function () {
      return view.scriptContainer.get(0).appendChild(script);
    }, 0);
  },

  /**
   * Get javascript container
   * @private
   */
  getJsContainer: function getJsContainer() {
    if (!this.jsContainer) {
      this.jsContainer = $("<div class=\"".concat(this.ppfx, "js-cont\">")).get(0);
    }

    return this.jsContainer;
  },
  render: function render() {
    var el = this.el,
        $el = this.$el,
        ppfx = this.ppfx,
        model = this.model;
    this.wrapper = model.get('wrapper');
    $el.html(this.template());
    var $frames = $el.find('[data-frames]');
    this.framesArea = $frames.get(0);

    if (this.wrapper && typeof this.wrapper.render == 'function') {
      model.get('frame').set('wrapper', this.wrapper);
      $frames.append(this.frame.render().el);
      var frame = this.frame;

      if (this.config.scripts.length === 0) {
        frame.el.onload = this.renderBody;
      } else {
        this.renderScripts(); // will call renderBody later
      }
    }

    $el.find('[data-tools]').append("\n      <div id=\"".concat(ppfx, "tools\" style=\"pointer-events:none\">\n        <div class=\"").concat(ppfx, "highlighter\"></div>\n        <div class=\"").concat(ppfx, "badge\"></div>\n        <div class=\"").concat(ppfx, "placeholder\">\n          <div class=\"").concat(ppfx, "placeholder-int\"></div>\n        </div>\n        <div class=\"").concat(ppfx, "ghost\"></div>\n        <div class=\"").concat(ppfx, "toolbar\" style=\"pointer-events:all\"></div>\n        <div class=\"").concat(ppfx, "resizer\"></div>\n        <div class=\"").concat(ppfx, "offset-v\"></div>\n        <div class=\"").concat(ppfx, "offset-fixed-v\"></div>\n      </div>\n    "));
    var toolsEl = el.querySelector("#".concat(ppfx, "tools"));
    this.hlEl = el.querySelector(".".concat(ppfx, "highlighter"));
    this.badgeEl = el.querySelector(".".concat(ppfx, "badge"));
    this.placerEl = el.querySelector(".".concat(ppfx, "placeholder"));
    this.ghostEl = el.querySelector(".".concat(ppfx, "ghost"));
    this.toolbarEl = el.querySelector(".".concat(ppfx, "toolbar"));
    this.resizerEl = el.querySelector(".".concat(ppfx, "resizer"));
    this.offsetEl = el.querySelector(".".concat(ppfx, "offset-v"));
    this.fixedOffsetEl = el.querySelector(".".concat(ppfx, "offset-fixed-v"));
    this.toolsEl = toolsEl;
    this.el.className = this.className;
    return this;
  }
}));

/***/ }),

/***/ "./src/canvas/view/FrameView.js":
/*!**************************************!*\
  !*** ./src/canvas/view/FrameView.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/dom */ "./src/utils/dom.js");



var motionsEv = 'transitionend oTransitionEnd transitionend webkitTransitionEnd';
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  tagName: 'iframe',
  attributes: {
    allowfullscreen: 'allowfullscreen'
  },
  initialize: function initialize(o) {
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["bindAll"])(this, 'updateOffset');
    this.config = o.config || {};
    this.ppfx = this.config.pStylePrefix || '';
    this.em = this.config.em;
    this.listenTo(this.model, 'change:head', this.updateHead);
    this.listenTo(this.em, 'change:device', this.updateDim);
  },

  /**
   * Update `<head>` content of the frame
   */
  updateHead: function updateHead() {
    var headEl = this.getHead();
    Object(utils_dom__WEBPACK_IMPORTED_MODULE_2__["empty"])(headEl);
    Object(utils_dom__WEBPACK_IMPORTED_MODULE_2__["appendVNodes"])(headEl, this.model.getHead());
  },

  /**
   * Update dimensions of the frame
   * @private
   */
  updateDim: function updateDim() {
    var em = this.em,
        el = this.el,
        $el = this.$el;
    var style = el.style;
    var device = em.getDeviceModel();
    var currW = style.width || '';
    var currH = style.height || '';
    var newW = device ? device.get('width') : '';
    var newH = device ? device.get('height') : '';
    var noChanges = currW == newW && currH == newH;
    style.width = newW;
    style.height = newH;
    this.updateOffset(); // Prevent fixed highlighting box which appears when on
    // component hover during the animation

    em.stopDefault({
      preserveSelected: 1
    });
    noChanges ? this.updateOffset() : $el.on(motionsEv, this.updateOffset);
  },
  updateOffset: function updateOffset() {
    var em = this.em;
    var offset = em.get('Canvas').getOffset();
    em.set('canvasOffset', offset);
    em.runDefault({
      preserveSelected: 1
    });
    this.$el.off(motionsEv, this.updateOffset);
  },
  getDoc: function getDoc() {
    return this.$el.get(0).contentDocument;
  },
  getHead: function getHead() {
    return this.getDoc().querySelector('head');
  },
  getBody: function getBody() {
    return this.getDoc().querySelector('body');
  },
  getWrapper: function getWrapper() {
    return this.$el.contents().find('body > div');
  },
  render: function render() {
    this.$el.attr({
      class: this.ppfx + 'frame'
    });
    return this;
  }
}));

/***/ }),

/***/ "./src/code_manager/config/config.js":
/*!*******************************************!*\
  !*** ./src/code_manager/config/config.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // Style prefix
  stylePrefix: 'cm-',
  inlineCss: false
});

/***/ }),

/***/ "./src/code_manager/index.js":
/*!***********************************!*\
  !*** ./src/code_manager/index.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/config */ "./src/code_manager/config/config.js");
/* harmony import */ var _model_HtmlGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/HtmlGenerator */ "./src/code_manager/model/HtmlGenerator.js");
/* harmony import */ var _model_CssGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/CssGenerator */ "./src/code_manager/model/CssGenerator.js");
/* harmony import */ var _model_JsonGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/JsonGenerator */ "./src/code_manager/model/JsonGenerator.js");
/* harmony import */ var _model_JsGenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model/JsGenerator */ "./src/code_manager/model/JsGenerator.js");
/* harmony import */ var _view_EditorView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./view/EditorView */ "./src/code_manager/view/EditorView.js");
/**
 * - [addGenerator](#addgenerator)
 * - [getGenerator](#getgenerator)
 * - [getGenerators](#getgenerators)
 * - [addViewer](#addviewer)
 * - [getViewer](#getviewer)
 * - [getViewers](#getviewers)
 * - [updateViewer](#updateviewer)
 * - [getCode](#getcode)
 *
 *
 * Before using methods you should get first the module from the editor instance, in this way:
 *
 * ```js
 * var codeManager = editor.CodeManager;
 * ```
 *
 * @module CodeManager
 */





 // import eCM from './model/CodeMirrorEditor';


/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var generators = {},
      defGenerators = {},
      viewers = {},
      defViewers = {};
  var defaultViewer = 'CodeMirror';
  return {
    getConfig: function getConfig() {
      return c;
    },
    config: c,
    EditorView: _view_EditorView__WEBPACK_IMPORTED_MODULE_6__["default"],

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'CodeManager',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     */
    init: function init(config) {
      c = config || {};

      for (var name in _config_config__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        if (!(name in c)) c[name] = _config_config__WEBPACK_IMPORTED_MODULE_1__["default"][name];
      }

      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix;
      defGenerators.html = new _model_HtmlGenerator__WEBPACK_IMPORTED_MODULE_2__["default"]();
      defGenerators.css = new _model_CssGenerator__WEBPACK_IMPORTED_MODULE_3__["default"]();
      defGenerators.json = new _model_JsonGenerator__WEBPACK_IMPORTED_MODULE_4__["default"]();
      defGenerators.js = new _model_JsGenerator__WEBPACK_IMPORTED_MODULE_5__["default"](); // defViewers.CodeMirror = new eCM();

      this.loadDefaultGenerators().loadDefaultViewers();
      return this;
    },

    /**
     * Add new code generator to the collection
     * @param  {string} id Code generator ID
     * @param  {Object} generator Code generator wrapper
     * @param {Function} generator.build Function that builds the code
     * @return {this}
     * @example
     * codeManager.addGenerator('html7',{
     *   build: function(model){
     *    return 'myCode';
     *   }
     * });
     * */
    addGenerator: function addGenerator(id, generator) {
      generators[id] = generator;
      return this;
    },

    /**
     * Get code generator by id
     * @param  {string} id Code generator ID
     * @return {Object|null}
     * @example
     * var generator = codeManager.getGenerator('html7');
     * generator.build = function(model){
     *   //extend
     * };
     * */
    getGenerator: function getGenerator(id) {
      return generators[id] || null;
    },

    /**
     * Returns all code generators
     * @return {Array<Object>}
     * */
    getGenerators: function getGenerators() {
      return generators;
    },

    /**
     * Add new code viewer
     * @param  {string} id Code viewer ID
     * @param  {Object} viewer Code viewer wrapper
     * @param {Function} viewer.init Set element on which viewer will be displayed
     * @param {Function} viewer.setContent Set content to the viewer
     * @return {this}
     * @example
     * codeManager.addViewer('ace',{
     *   init: function(el){
     *     var ace = require('ace-editor');
     *     this.editor  = ace.edit(el.id);
     *   },
     *   setContent: function(code){
     *    this.editor.setValue(code);
     *   }
     * });
     * */
    addViewer: function addViewer(id, viewer) {
      viewers[id] = viewer;
      return this;
    },

    /**
     * Get code viewer by id
     * @param  {string} id Code viewer ID
     * @return {Object|null}
     * @example
     * var viewer = codeManager.getViewer('ace');
     * */
    getViewer: function getViewer(id) {
      return viewers[id] || null;
    },

    /**
     * Returns all code viewers
     * @return {Array<Object>}
     * */
    getViewers: function getViewers() {
      return viewers;
    },
    createViewer: function createViewer() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var type = !Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(opts.type) ? opts.type : defaultViewer;
      var viewer = this.getViewer(type) && this.getViewer(type).clone();
      var cont = document.createElement('div');
      var txtarea = document.createElement('textarea');
      cont.appendChild(txtarea);
      viewer.set(opts);
      viewer.init(txtarea);
      viewer.setElement(cont);
      return viewer;
    },

    /**
     * Update code viewer content
     * @param  {Object} viewer Viewer instance
     * @param  {string} code  Code string
     * @example
     * var AceViewer = codeManager.getViewer('ace');
     * // ...
     * var viewer = AceViewer.init(el);
     * // ...
     * codeManager.updateViewer(AceViewer, 'code');
     * */
    updateViewer: function updateViewer(viewer, code) {
      viewer.setContent(code);
    },

    /**
     * Get code from model
     * @param  {Object} model Any kind of model that will be passed to the build method of generator
     * @param  {string} genId Code generator id
     * @param  {Object} [opt] Options
     * @return {string}
     * @example
     * var codeStr = codeManager.getCode(model, 'html');
     * */
    getCode: function getCode(model, genId) {
      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      opt.em = c.em;
      var generator = this.getGenerator(genId);
      return generator ? generator.build(model, opt) : '';
    },

    /**
     * Load default code generators
     * @return {this}
     * @private
     * */
    loadDefaultGenerators: function loadDefaultGenerators() {
      for (var id in defGenerators) {
        this.addGenerator(id, defGenerators[id]);
      }

      return this;
    },

    /**
     * Load default code viewers
     * @return {this}
     * @private
     * */
    loadDefaultViewers: function loadDefaultViewers() {
      for (var id in defViewers) {
        this.addViewer(id, defViewers[id]);
      }

      return this;
    }
  };
});

/***/ }),

/***/ "./src/code_manager/model/CssGenerator.js":
/*!************************************************!*\
  !*** ./src/code_manager/model/CssGenerator.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);


var maxValue = Number.MAX_VALUE;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  initialize: function initialize() {
    this.compCls = [];
    this.ids = [];
  },

  /**
   * Get CSS from a component
   * @param {Model} model
   * @return {String}
   */
  buildFromModel: function buildFromModel(model) {
    var _this = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var code = '';
    var em = this.em;
    var avoidInline = em && em.getConfig('avoidInlineStyle');
    var style = model.styleToString();
    var classes = model.get('classes');
    var wrapperIsBody = opts.wrapperIsBody;
    var isWrapper = model.get('wrapper');
    this.ids.push("#".concat(model.getId())); // Let's know what classes I've found

    classes.each(function (model) {
      return _this.compCls.push(model.getFullName());
    });

    if (!avoidInline && style) {
      var selector = "#".concat(model.getId());
      selector = wrapperIsBody && isWrapper ? 'body' : selector;
      code = "".concat(selector, "{").concat(style, "}");
    }

    var components = model.components();
    components.each(function (model) {
      return code += _this.buildFromModel(model, opts);
    });
    return code;
  },
  build: function build(model) {
    var _this2 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var cssc = opts.cssc;
    var em = opts.em || '';
    this.em = em;
    this.compCls = [];
    this.ids = [];
    var code = this.buildFromModel(model, opts);
    var clearStyles = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(opts.clearStyles) && em ? em.getConfig('clearStyles') : opts.clearStyles;

    if (cssc) {
      var rules = cssc.getAll();
      var atRules = {};
      var dump = [];
      rules.each(function (rule) {
        var atRule = rule.getAtRule();

        if (atRule) {
          var mRules = atRules[atRule];

          if (mRules) {
            mRules.push(rule);
          } else {
            atRules[atRule] = [rule];
          }

          return;
        }

        code += _this2.buildFromRule(rule, dump, opts);
      });
      this.sortMediaObject(atRules).forEach(function (item) {
        var rulesStr = '';
        var atRule = item.key;
        var mRules = item.value;
        mRules.forEach(function (rule) {
          var ruleStr = _this2.buildFromRule(rule, dump, opts);

          if (rule.get('singleAtRule')) {
            code += "".concat(atRule, "{").concat(ruleStr, "}");
          } else {
            rulesStr += ruleStr;
          }
        });

        if (rulesStr) {
          code += "".concat(atRule, "{").concat(rulesStr, "}");
        }
      });
      em && clearStyles && rules.remove(dump);
    }

    return code;
  },

  /**
   * Get CSS from the rule model
   * @param {Model} rule
   * @return {string} CSS string
   */
  buildFromRule: function buildFromRule(rule, dump) {
    var _this3 = this;

    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var result = '';
    var selectorStrNoAdd = rule.selectorsToString({
      skipAdd: 1
    });
    var selectorsAdd = rule.get('selectorsAdd');
    var singleAtRule = rule.get('singleAtRule');
    var found; // This will not render a rule if there is no its component

    rule.get('selectors').each(function (selector) {
      var name = selector.getFullName();

      if (_this3.compCls.indexOf(name) >= 0 || _this3.ids.indexOf(name) >= 0 || opts.keepUnusedStyles) {
        found = 1;
      }
    });

    if (selectorStrNoAdd && found || selectorsAdd || singleAtRule) {
      var block = rule.getDeclaration();
      block && (result += block);
    } else {
      dump.push(rule);
    }

    return result;
  },

  /**
   * Get the numeric length of the media query string
   * @param  {String} mediaQuery Media query string
   * @return {Number}
   */
  getQueryLength: function getQueryLength(mediaQuery) {
    var length = /(-?\d*\.?\d+)\w{0,}/.exec(mediaQuery);
    if (!length) return maxValue;
    return parseFloat(length[1]);
  },

  /**
   * Return a sorted array from media query object
   * @param  {Object} items
   * @return {Array}
   */
  sortMediaObject: function sortMediaObject() {
    var _this4 = this;

    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var itemsArr = [];
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["each"])(items, function (value, key) {
      return itemsArr.push({
        key: key,
        value: value
      });
    });
    return itemsArr.sort(function (a, b) {
      var isMobFirst = [a.key, b.key].every(function (mquery) {
        return mquery.indexOf('min-width') !== -1;
      });
      var left = isMobFirst ? a.key : b.key;
      var right = isMobFirst ? b.key : a.key;
      return _this4.getQueryLength(left) - _this4.getQueryLength(right);
    });
  }
}));

/***/ }),

/***/ "./src/code_manager/model/HtmlGenerator.js":
/*!*************************************************!*\
  !*** ./src/code_manager/model/HtmlGenerator.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  build: function build(model) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var models = model.get('components');

    if (opts.exportWrapper) {
      return opts.wrapperIsBody ? "<body>".concat(this.buildModels(models), "</body>") : model.toHTML();
    }

    return this.buildModels(models);
  },
  buildModels: function buildModels(models) {
    var code = '';
    models.each(function (model) {
      code += model.toHTML();
    });
    return code;
  }
}));

/***/ }),

/***/ "./src/code_manager/model/JsGenerator.js":
/*!***********************************************!*\
  !*** ./src/code_manager/model/JsGenerator.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend({
  mapModel: function mapModel(model) {
    var code = '';
    var script = model.get('script-export') || model.get('script');
    var type = model.get('type');
    var comps = model.get('components');
    var id = model.getId();

    if (script) {
      // If the component has scripts we need to expose his ID
      var attr = model.get('attributes');
      attr = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, attr, {
        id: id
      });
      model.set('attributes', attr, {
        silent: 1
      });
      var scrStr = model.getScriptString(script); // If the script was updated, I'll put its code in a separate container

      if (model.get('scriptUpdated')) {
        this.mapJs[type + '-' + id] = {
          ids: [id],
          code: scrStr
        };
      } else {
        var mapType = this.mapJs[type];

        if (mapType) {
          mapType.ids.push(id);
        } else {
          this.mapJs[type] = {
            ids: [id],
            code: scrStr
          };
        }
      }
    }

    comps.each(function (model) {
      code += this.mapModel(model);
    }, this);
    return code;
  },
  build: function build(model) {
    this.mapJs = {};
    this.mapModel(model);
    var code = '';

    for (var type in this.mapJs) {
      var mapType = this.mapJs[type];
      var ids = '#' + mapType.ids.join(', #');
      code += "\n        var items = document.querySelectorAll('".concat(ids, "');\n        for (var i = 0, len = items.length; i < len; i++) {\n          (function(){").concat(mapType.code, "}.bind(items[i]))();\n        }");
    }

    return code;
  }
}));

/***/ }),

/***/ "./src/code_manager/model/JsonGenerator.js":
/*!*************************************************!*\
  !*** ./src/code_manager/model/JsonGenerator.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend({
  /** @inheritdoc */
  build: function build(model) {
    var json = model.toJSON();
    this.beforeEach(json);
    Object(underscore__WEBPACK_IMPORTED_MODULE_0__["each"])(json, function (v, attr) {
      var obj = json[attr];

      if (obj instanceof backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model) {
        json[attr] = this.build(obj);
      } else if (obj instanceof backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection) {
        var coll = obj;
        json[attr] = [];

        if (coll.length) {
          coll.each(function (el, index) {
            json[attr][index] = this.build(el);
          }, this);
        }
      }
    }, this);
    return json;
  },

  /**
   * Execute on each object
   * @param {Object} obj
   */
  beforeEach: function beforeEach(obj) {
    delete obj.status;
  }
}));

/***/ }),

/***/ "./src/code_manager/view/EditorView.js":
/*!*********************************************!*\
  !*** ./src/code_manager/view/EditorView.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  template: Object(underscore__WEBPACK_IMPORTED_MODULE_0__["template"])("\n  <div class=\"<%= pfx %>editor\" id=\"<%= pfx %><%= codeName %>\">\n  \t<div id=\"<%= pfx %>title\"><%= label %></div>\n  \t<div id=\"<%= pfx %>code\"></div>\n  </div>"),
  initialize: function initialize(o) {
    this.config = o.config || {};
    this.pfx = this.config.stylePrefix;
  },
  render: function render() {
    var obj = this.model.toJSON();
    obj.pfx = this.pfx;
    this.$el.html(this.template(obj));
    this.$el.attr('class', this.pfx + 'editor-c');
    this.$el.find('#' + this.pfx + 'code').append(this.model.get('input'));
    return this;
  }
}));

/***/ }),

/***/ "./src/commands/config/config.js":
/*!***************************************!*\
  !*** ./src/commands/config/config.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'com-',
  // Default array of commands
  defaults: [],
  // If true, stateful commands (with `run` and `stop` methods) can't be runned multiple times.
  // So, if the command is already active, running it again will not execute the `run` method
  strict: 1
});

/***/ }),

/***/ "./src/commands/index.js":
/*!*******************************!*\
  !*** ./src/commands/index.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _view_CommandAbstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view/CommandAbstract */ "./src/commands/view/CommandAbstract.js");
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/config */ "./src/commands/config/config.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/commands/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  commands: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const commands = editor.Commands;
 * ```
 *
 * * [add](#add)
 * * [get](#get)
 * * [getAll](#getall)
 * * [extend](#extend)
 * * [has](#has)
 * * [run](#run)
 * * [stop](#stop)
 * * [isActive](#isactive)
 * * [getActive](#getactive)
 *
 * @module Commands
 */



/* harmony default export */ __webpack_exports__["default"] = (function () {
  var em;
  var c = {};
  var commands = {};
  var defaultCommands = {};
  var active = {};
  var commandsDef = [['preview', 'Preview', 'preview'], ['resize', 'Resize', 'resize'], // ['fullscreen', 'Fullscreen', 'fullscreen'],
  ['copy', 'CopyComponent'], ['paste', 'PasteComponent'], ['canvas-move', 'CanvasMove'], ['canvas-clear', 'CanvasClear'], // ['open-code', 'ExportTemplate', 'export-template'],
  ['open-layers', 'OpenLayers', 'open-layers'], ['open-styles', 'OpenStyleManager', 'open-sm'], ['open-traits', 'OpenTraitManager', 'open-tm'], ['open-blocks', 'OpenBlocks', 'open-blocks'], // ['open-assets', 'OpenAssets', 'open-assets'],
  ['component-select', 'SelectComponent', 'select-comp'], ['component-outline', 'SwitchVisibility', 'sw-visibility'], ['component-offset', 'ShowOffset', 'show-offset'], ['component-move', 'MoveComponent', 'move-comp'], ['component-next', 'ComponentNext'], ['component-prev', 'ComponentPrev'], ['component-enter', 'ComponentEnter'], ['component-exit', 'ComponentExit', 'select-parent'], ['component-delete', 'ComponentDelete'], ['component-style-clear', 'ComponentStyleClear'], ['component-drag', 'ComponentDrag']]; // Need it here as it would be used below

  var add = function add(id, obj) {
    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(obj)) obj = {
      run: obj
    };
    if (!obj.stop) obj.noStop = 1;
    delete obj.initialize;
    obj.id = id;
    commands[id] = _view_CommandAbstract__WEBPACK_IMPORTED_MODULE_3__["default"].extend(obj);
    return this;
  };

  return {
    CommandAbstract: _view_CommandAbstract__WEBPACK_IMPORTED_MODULE_3__["default"],

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'Commands',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @private
     */
    init: function init() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_4__["default"], {}, config);
      em = c.em;
      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix; // Load commands passed via configuration

      for (var k in c.defaults) {
        var obj = c.defaults[k];
        if (obj.id) this.add(obj.id, obj);
      }

      defaultCommands['tlb-delete'] = {
        run: function run(ed) {
          return ed.runCommand('core:component-delete');
        }
      };
      defaultCommands['tlb-clone'] = {
        run: function run(ed) {
          ed.runCommand('core:copy');
          ed.runCommand('core:paste');
        }
      };
      defaultCommands['tlb-move'] = {
        run: function run(ed, sender) {
          var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var dragger;
          var em = ed.getModel();
          var event = opts && opts.event;
          var target = opts.target;
          var sel = target || ed.getSelected();
          var selAll = target ? [target] : _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(ed.getSelectedAll());
          var nativeDrag = event && event.type == 'dragstart';
          var defComOptions = {
            preserveSelected: 1
          };
          var modes = ['absolute', 'translate'];

          var hideTlb = function hideTlb() {
            return em.stopDefault(defComOptions);
          }; // Dirty patch to prevent parent selection on drop (in absolute mode)


          em.set('_cmpDrag', 1);

          if (!sel || !sel.get('draggable')) {
            console.warn('The element is not draggable');
            return;
          }

          var mode = sel.get('dmode') || em.get('dmode'); // Without setTimeout the ghost image disappears

          nativeDrag ? setTimeout(hideTlb, 0) : hideTlb();

          var onEnd = function onEnd(e, opts) {
            em.runDefault(defComOptions);
            selAll.forEach(function (sel) {
              return sel.set('status', 'selected');
            });
            ed.select(selAll);
            sel.emitUpdate();
          };

          if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["includes"])(modes, mode)) {
            // TODO move grabbing func in editor/canvas from the Sorter
            dragger = ed.runCommand('core:component-drag', {
              guidesInfo: 1,
              mode: mode,
              target: sel,
              onEnd: onEnd,
              event: event
            });
          } else {
            if (nativeDrag) {
              event.dataTransfer.setDragImage(sel.view.el, 0, 0); //sel.set('status', 'freezed');
            }

            var cmdMove = ed.Commands.get('move-comp');
            cmdMove.onEndMoveFromModel = onEnd;
            cmdMove.initSorterFromModels(selAll);
          }

          selAll.forEach(function (sel) {
            return sel.set('status', 'freezed-selected');
          });
        }
      }; // Core commands

      defaultCommands['core:undo'] = function (e) {
        return e.UndoManager.undo();
      };

      defaultCommands['core:redo'] = function (e) {
        return e.UndoManager.redo();
      };

      commandsDef.forEach(function (item) {
        var oldCmd = item[2];

        var cmd = __webpack_require__("./src/commands/view sync recursive ^\\.\\/.*$")("./".concat(item[1])).default;

        var cmdName = "core:".concat(item[0]);
        defaultCommands[cmdName] = cmd;

        if (oldCmd) {
          defaultCommands[oldCmd] = cmd; // Propogate old commands (can be removed once we stop to call old commands)

          ['run', 'stop'].forEach(function (name) {
            em.on("".concat(name, ":").concat(oldCmd), function () {
              var _em;

              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return (_em = em).trigger.apply(_em, ["".concat(name, ":").concat(cmdName)].concat(args));
            });
          });
        }
      });
      if (c.em) c.model = c.em.get('Canvas');
      this.loadDefaultCommands();
      return this;
    },

    /**
     * Add new command to the collection
     * @param	{string} id Command's ID
     * @param	{Object|Function} command Object representing your command,
     *  By passing just a function it's intended as a stateless command
     *  (just like passing an object with only `run` method).
     * @return {this}
     * @example
     * commands.add('myCommand', {
     * 	run(editor, sender) {
     * 		alert('Hello world!');
     * 	},
     * 	stop(editor, sender) {
     * 	},
     * });
     * // As a function
     * commands.add('myCommand2', editor => { ... });
     * */
    add: add,

    /**
     * Get command by ID
     * @param	{string}	id Command's ID
     * @return {Object} Object representing the command
     * @example
     * var myCommand = commands.get('myCommand');
     * myCommand.run();
     * */
    get: function get(id) {
      var el = commands[id];

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(el)) {
        el = new el(c);
        commands[id] = el;
      } else if (!el) {
        em.logWarning("'".concat(id, "' command not found"));
      }

      return el;
    },

    /**
     * Extend the command. The command to extend should be defined as an object
     * @param	{string}	id Command's ID
     * @param {Object} Object with the new command functions
     * @returns {this}
     * @example
     * commands.extend('old-command', {
     *  someInnerFunction() {
     *  // ...
     *  }
     * });
     * */
    extend: function extend(id) {
      var cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var command = this.get(id);

      if (command) {
        var cmdObj = _objectSpread({}, command.constructor.prototype, {}, cmd);

        this.add(id, cmdObj); // Extend also old name commands if exist

        var oldCmd = commandsDef.filter(function (cmd) {
          return "core:".concat(cmd[0]) === id && cmd[2];
        })[0];
        oldCmd && this.add(oldCmd[2], cmdObj);
      }

      return this;
    },

    /**
     * Check if command exists
     * @param	{string}	id Command's ID
     * @return {Boolean}
     * */
    has: function has(id) {
      return !!commands[id];
    },

    /**
     * Get an object containing all the commands
     * @return {Object}
     */
    getAll: function getAll() {
      return commands;
    },

    /**
     * Execute the command
     * @param {String} id Command ID
     * @param {Object} [options={}] Options
     * @return {*} The return is defined by the command
     * @example
     * commands.run('myCommand', { someOption: 1 });
     */
    run: function run(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.runCommand(this.get(id), options);
    },

    /**
     * Stop the command
     * @param {String} id Command ID
     * @param {Object} [options={}] Options
     * @return {*} The return is defined by the command
     * @example
     * commands.stop('myCommand', { someOption: 1 });
     */
    stop: function stop(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.stopCommand(this.get(id), options);
    },

    /**
     * Check if the command is active. You activate commands with `run`
     * and disable them with `stop`. If the command was created without `stop`
     * method it can't be registered as active
     * @param  {String}  id Command id
     * @return {Boolean}
     * @example
     * const cId = 'some-command';
     * commands.run(cId);
     * commands.isActive(cId);
     * // -> true
     * commands.stop(cId);
     * commands.isActive(cId);
     * // -> false
     */
    isActive: function isActive(id) {
      return this.getActive().hasOwnProperty(id);
    },

    /**
     * Get all active commands
     * @return {Object}
     * @example
     * console.log(commands.getActive());
     * // -> { someCommand: itsLastReturn, anotherOne: ... };
     */
    getActive: function getActive() {
      return active;
    },

    /**
     * Load default commands
     * @return {this}
     * @private
     * */
    loadDefaultCommands: function loadDefaultCommands() {
      for (var id in defaultCommands) {
        this.add(id, defaultCommands[id]);
      }

      return this;
    },

    /**
     * Run command via its object
     * @param  {Object} command
     * @param {Object} options
     * @return {*} Result of the command
     * @private
     */
    runCommand: function runCommand(command) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var result;

      if (command && command.run) {
        var id = command.id;
        var editor = em.get('Editor');

        if (!this.isActive(id) || options.force || !c.strict) {
          result = command.callRun(editor, options);

          if (id && command.stop && !command.noStop && !options.abort) {
            active[id] = result;
          }
        }
      }

      return result;
    },

    /**
     * Stop the command
     * @param  {Object} command
     * @param {Object} options
     * @return {*} Result of the command
     * @private
     */
    stopCommand: function stopCommand(command) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var result;

      if (command && command.run) {
        var id = command.id;
        var editor = em.get('Editor');

        if (this.isActive(id) || options.force || !c.strict) {
          if (id) delete active[id];
          result = command.callStop(editor, options);
        }
      }

      return result;
    },

    /**
     * Create anonymous Command instance
     * @param {Object} command Command object
     * @return {Command}
     * @private
     * */
    create: function create(command) {
      if (!command.stop) command.noStop = 1;
      var cmd = _view_CommandAbstract__WEBPACK_IMPORTED_MODULE_3__["default"].extend(command);
      return new cmd(c);
    }
  };
});

/***/ }),

/***/ "./src/commands/view sync recursive ^\\.\\/.*$":
/*!*****************************************!*\
  !*** ./src/commands/view sync ^\.\/.*$ ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./CanvasClear": "./src/commands/view/CanvasClear.js",
	"./CanvasClear.js": "./src/commands/view/CanvasClear.js",
	"./CanvasMove": "./src/commands/view/CanvasMove.js",
	"./CanvasMove.js": "./src/commands/view/CanvasMove.js",
	"./CommandAbstract": "./src/commands/view/CommandAbstract.js",
	"./CommandAbstract.js": "./src/commands/view/CommandAbstract.js",
	"./ComponentDelete": "./src/commands/view/ComponentDelete.js",
	"./ComponentDelete.js": "./src/commands/view/ComponentDelete.js",
	"./ComponentDrag": "./src/commands/view/ComponentDrag.js",
	"./ComponentDrag.js": "./src/commands/view/ComponentDrag.js",
	"./ComponentEnter": "./src/commands/view/ComponentEnter.js",
	"./ComponentEnter.js": "./src/commands/view/ComponentEnter.js",
	"./ComponentExit": "./src/commands/view/ComponentExit.js",
	"./ComponentExit.js": "./src/commands/view/ComponentExit.js",
	"./ComponentNext": "./src/commands/view/ComponentNext.js",
	"./ComponentNext.js": "./src/commands/view/ComponentNext.js",
	"./ComponentPrev": "./src/commands/view/ComponentPrev.js",
	"./ComponentPrev.js": "./src/commands/view/ComponentPrev.js",
	"./ComponentStyleClear": "./src/commands/view/ComponentStyleClear.js",
	"./ComponentStyleClear.js": "./src/commands/view/ComponentStyleClear.js",
	"./CopyComponent": "./src/commands/view/CopyComponent.js",
	"./CopyComponent.js": "./src/commands/view/CopyComponent.js",
	"./DeleteComponent": "./src/commands/view/DeleteComponent.js",
	"./DeleteComponent.js": "./src/commands/view/DeleteComponent.js",
	"./ExportTemplate": "./src/commands/view/ExportTemplate.js",
	"./ExportTemplate.js": "./src/commands/view/ExportTemplate.js",
	"./Fullscreen": "./src/commands/view/Fullscreen.js",
	"./Fullscreen.js": "./src/commands/view/Fullscreen.js",
	"./MoveComponent": "./src/commands/view/MoveComponent.js",
	"./MoveComponent.js": "./src/commands/view/MoveComponent.js",
	"./OpenAssets": "./src/commands/view/OpenAssets.js",
	"./OpenAssets.js": "./src/commands/view/OpenAssets.js",
	"./OpenBlocks": "./src/commands/view/OpenBlocks.js",
	"./OpenBlocks.js": "./src/commands/view/OpenBlocks.js",
	"./OpenLayers": "./src/commands/view/OpenLayers.js",
	"./OpenLayers.js": "./src/commands/view/OpenLayers.js",
	"./OpenStyleManager": "./src/commands/view/OpenStyleManager.js",
	"./OpenStyleManager.js": "./src/commands/view/OpenStyleManager.js",
	"./OpenTraitManager": "./src/commands/view/OpenTraitManager.js",
	"./OpenTraitManager.js": "./src/commands/view/OpenTraitManager.js",
	"./PasteComponent": "./src/commands/view/PasteComponent.js",
	"./PasteComponent.js": "./src/commands/view/PasteComponent.js",
	"./Preview": "./src/commands/view/Preview.js",
	"./Preview.js": "./src/commands/view/Preview.js",
	"./Resize": "./src/commands/view/Resize.js",
	"./Resize.js": "./src/commands/view/Resize.js",
	"./SelectComponent": "./src/commands/view/SelectComponent.js",
	"./SelectComponent.js": "./src/commands/view/SelectComponent.js",
	"./SelectPosition": "./src/commands/view/SelectPosition.js",
	"./SelectPosition.js": "./src/commands/view/SelectPosition.js",
	"./ShowOffset": "./src/commands/view/ShowOffset.js",
	"./ShowOffset.js": "./src/commands/view/ShowOffset.js",
	"./SwitchVisibility": "./src/commands/view/SwitchVisibility.js",
	"./SwitchVisibility.js": "./src/commands/view/SwitchVisibility.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/commands/view sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/commands/view/CanvasClear.js":
/*!******************************************!*\
  !*** ./src/commands/view/CanvasClear.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    ed.DomComponents.clear();
    ed.CssComposer.clear();
  }
});

/***/ }),

/***/ "./src/commands/view/CanvasMove.js":
/*!*****************************************!*\
  !*** ./src/commands/view/CanvasMove.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var utils_Dragger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/Dragger */ "./src/utils/Dragger.js");



/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    Object(underscore__WEBPACK_IMPORTED_MODULE_0__["bindAll"])(this, 'onKeyUp', 'enableDragger', 'disableDragger');
    this.editor = ed;
    this.canvasModel = this.canvas.getCanvasView().model;
    this.toggleMove(1);
  },
  stop: function stop(ed) {
    this.toggleMove();
    this.disableDragger();
  },
  onKeyUp: function onKeyUp(ev) {
    if (Object(utils_mixins__WEBPACK_IMPORTED_MODULE_1__["getKeyChar"])(ev) === ' ') {
      this.editor.stopCommand(this.id);
    }
  },
  enableDragger: function enableDragger(ev) {
    this.toggleDragger(1, ev);
  },
  disableDragger: function disableDragger(ev) {
    this.toggleDragger(0, ev);
  },
  toggleDragger: function toggleDragger(enable, ev) {
    var canvasModel = this.canvasModel,
        em = this.em;
    var dragger = this.dragger;
    var methodCls = enable ? 'add' : 'remove';
    this.getCanvas().classList[methodCls]("".concat(this.ppfx, "is__grabbing"));

    if (!dragger) {
      dragger = new utils_Dragger__WEBPACK_IMPORTED_MODULE_2__["default"]({
        getPosition: function getPosition() {
          return {
            x: canvasModel.get('x'),
            y: canvasModel.get('y')
          };
        },
        setPosition: function setPosition(_ref) {
          var x = _ref.x,
              y = _ref.y;
          canvasModel.set({
            x: x,
            y: y
          });
        },
        onStart: function onStart(ev, dragger) {
          em.trigger('canvas:move:start', dragger);
        },
        onDrag: function onDrag(ev, dragger) {
          em.trigger('canvas:move', dragger);
        },
        onEnd: function onEnd(ev, dragger) {
          em.trigger('canvas:move:end', dragger);
        }
      });
      this.dragger = dragger;
    }

    enable ? dragger.start(ev) : dragger.stop();
  },
  toggleMove: function toggleMove(enable) {
    var ppfx = this.ppfx;
    var methodCls = enable ? 'add' : 'remove';
    var methodEv = enable ? 'on' : 'off';
    var methodsEv = {
      on: utils_mixins__WEBPACK_IMPORTED_MODULE_1__["on"],
      off: utils_mixins__WEBPACK_IMPORTED_MODULE_1__["off"]
    };
    var canvas = this.getCanvas();
    var classes = ["".concat(ppfx, "is__grab")];
    !enable && classes.push("".concat(ppfx, "is__grabbing"));
    classes.forEach(function (cls) {
      return canvas.classList[methodCls](cls);
    });
    methodsEv[methodEv](document, 'keyup', this.onKeyUp);
    methodsEv[methodEv](canvas, 'mousedown', this.enableDragger);
    methodsEv[methodEv](document, 'mouseup', this.disableDragger);
  }
});

/***/ }),

/***/ "./src/commands/view/CommandAbstract.js":
/*!**********************************************!*\
  !*** ./src/commands/view/CommandAbstract.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  /**
   * Initialize method that can't be removed
   * @param  {Object}  o Options
   * @private
   * */
  initialize: function initialize(o) {
    this.config = o || {};
    this.editorModel = this.em = this.config.em || {};
    this.pfx = this.config.stylePrefix;
    this.ppfx = this.config.pStylePrefix;
    this.hoverClass = this.pfx + 'hover';
    this.badgeClass = this.pfx + 'badge';
    this.plhClass = this.pfx + 'placeholder';
    this.freezClass = this.ppfx + 'freezed';
    this.canvas = this.em.get && this.em.get('Canvas');
    if (this.em.get) this.setElement(this.getCanvas());

    if (this.canvas) {
      this.$canvas = this.$el;
      this.$wrapper = $(this.getCanvasWrapper());
      this.frameEl = this.canvas.getFrameEl();
      this.canvasTool = this.getCanvasTools();
      this.bodyEl = this.getCanvasBody();
    }

    this.init(this.config);
  },

  /**
   * On frame scroll callback
   * @param  {[type]} e [description]
   * @return {[type]}   [description]
   */
  onFrameScroll: function onFrameScroll(e) {},

  /**
   * Returns canval element
   * @return {HTMLElement}
   */
  getCanvas: function getCanvas() {
    return this.canvas.getElement();
  },

  /**
   * Get canvas body element
   * @return {HTMLElement}
   */
  getCanvasBody: function getCanvasBody() {
    return this.canvas.getBody();
  },

  /**
   * Get canvas wrapper element
   * @return {HTMLElement}
   */
  getCanvasWrapper: function getCanvasWrapper() {
    return this.canvas.getWrapperEl();
  },

  /**
   * Get canvas wrapper element
   * @return {HTMLElement}
   */
  getCanvasTools: function getCanvasTools() {
    return this.canvas.getToolsEl();
  },

  /**
   * Get the offset of the element
   * @param  {HTMLElement} el
   * @return {Object}
   */
  offset: function offset(el) {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top + el.ownerDocument.body.scrollTop,
      left: rect.left + el.ownerDocument.body.scrollLeft
    };
  },

  /**
   * Callback triggered after initialize
   * @param  {Object}  o   Options
   * @private
   * */
  init: function init(o) {},

  /**
   * Method that run command
   * @param  {Object}  editor Editor instance
   * @param  {Object}  [options={}] Options
   * @private
   * */
  callRun: function callRun(editor) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var id = this.id;
    editor.trigger("run:".concat(id, ":before"), options);

    if (options && options.abort) {
      editor.trigger("abort:".concat(id), options);
      return;
    }

    var sender = options.sender || editor;
    var result = this.run(editor, sender, options);
    editor.trigger("run:".concat(id), result, options);
    editor.trigger('run', id, result, options);
    return result;
  },

  /**
   * Method that run command
   * @param  {Object}  editor Editor instance
   * @param  {Object}  [options={}] Options
   * @private
   * */
  callStop: function callStop(editor) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var id = this.id;
    var sender = options.sender || editor;
    editor.trigger("stop:".concat(id, ":before"), options);
    var result = this.stop(editor, sender, options);
    editor.trigger("stop:".concat(id), result, options);
    editor.trigger('stop', id, result, options);
    return result;
  },

  /**
   * Stop current command
   */
  stopCommand: function stopCommand() {
    this.em.get('Commands').stop(this.id);
  },

  /**
   * Method that run command
   * @param  {Object}  em     Editor model
   * @param  {Object}  sender  Button sender
   * @private
   * */
  run: function run(em, sender) {},

  /**
   * Method that stop command
   * @param  {Object}  em Editor model
   * @param  {Object}  sender  Button sender
   * @private
   * */
  stop: function stop(em, sender) {}
}));

/***/ }),

/***/ "./src/commands/view/ComponentDelete.js":
/*!**********************************************!*\
  !*** ./src/commands/view/ComponentDelete.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed, sender) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var components = opts.component || ed.getSelectedAll();
    components = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(components) ? _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(components) : [components]; // It's important to deselect components first otherwise,
    // with undo, the component will be set with the wrong `collection`

    ed.select(null);
    components.forEach(function (component) {
      if (!component || !component.get('removable')) {
        console.warn('The element is not removable', component);
        return;
      }

      if (component) {
        var coll = component.collection;
        component.trigger('component:destroy');
        coll && coll.remove(component);
      }
    });
    return components;
  }
});

/***/ }),

/***/ "./src/commands/view/ComponentDrag.js":
/*!********************************************!*\
  !*** ./src/commands/view/ComponentDrag.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_Dragger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/Dragger */ "./src/utils/Dragger.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor, sender) {
    var _this = this;

    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["bindAll"])(this, 'setPosition', 'onStart', 'onDrag', 'onEnd', 'getPosition', 'getGuidesStatic', 'renderGuide', 'getGuidesTarget');
    var target = opts.target,
        event = opts.event,
        mode = opts.mode,
        _opts$dragger = opts.dragger,
        dragger = _opts$dragger === void 0 ? {} : _opts$dragger;
    var el = target.getEl();

    var config = _objectSpread({
      doc: el.ownerDocument,
      onStart: this.onStart,
      onEnd: this.onEnd,
      onDrag: this.onDrag,
      getPosition: this.getPosition,
      setPosition: this.setPosition,
      guidesStatic: function guidesStatic() {
        return _this.guidesStatic;
      },
      guidesTarget: function guidesTarget() {
        return _this.guidesTarget;
      }
    }, dragger);

    this.setupGuides();
    this.opts = opts;
    this.editor = editor;
    this.em = editor.getModel();
    this.target = target;
    this.isTran = mode == 'translate';
    this.guidesContainer = this.getGuidesContainer();
    this.guidesTarget = this.getGuidesTarget();
    this.guidesStatic = this.getGuidesStatic();
    window.guidesTarget = this.guidesTarget;
    var drg = this.dragger;

    if (!drg) {
      drg = new utils_Dragger__WEBPACK_IMPORTED_MODULE_2__["default"](config);
      this.dragger = drg;
    } else {
      drg.setOptions(config);
    }

    event && drg.start(event);
    this.toggleDrag(1);
    return drg;
  },
  stop: function stop() {
    this.toggleDrag();
  },
  setupGuides: function setupGuides() {
    (this.guides || []).forEach(function (item) {
      var guide = item.guide;
      guide && guide.parentNode.removeChild(guide);
    });
    this.guides = [];
  },
  getGuidesContainer: function getGuidesContainer() {
    var _this2 = this;

    var guidesEl = this.guidesEl;

    if (!guidesEl) {
      var _editor = this.editor,
          em = this.em,
          opts = this.opts;

      var pfx = _editor.getConfig('stylePrefix');

      var elInfoX = document.createElement('div');
      var elInfoY = document.createElement('div');
      var guideContent = "<div class=\"".concat(pfx, "guide-info__line ").concat(pfx, "danger-bg\">\n        <div class=\"").concat(pfx, "guide-info__content ").concat(pfx, "danger-color\"></div>\n      </div>");
      guidesEl = document.createElement('div');
      guidesEl.className = "".concat(pfx, "guides");
      elInfoX.className = "".concat(pfx, "guide-info ").concat(pfx, "guide-info__x");
      elInfoY.className = "".concat(pfx, "guide-info ").concat(pfx, "guide-info__y");
      elInfoX.innerHTML = guideContent;
      elInfoY.innerHTML = guideContent;
      guidesEl.appendChild(elInfoX);
      guidesEl.appendChild(elInfoY);

      _editor.Canvas.getToolsEl().appendChild(guidesEl);

      this.guidesEl = guidesEl;
      this.elGuideInfoX = elInfoX;
      this.elGuideInfoY = elInfoY;
      this.elGuideInfoContentX = elInfoX.querySelector(".".concat(pfx, "guide-info__content"));
      this.elGuideInfoContentY = elInfoY.querySelector(".".concat(pfx, "guide-info__content"));
      em.on('canvas:update', function () {
        _this2.updateGuides();

        opts.debug && _this2.guides.forEach(function (item) {
          return _this2.renderGuide(item);
        });
      });
    }

    return guidesEl;
  },
  getGuidesStatic: function getGuidesStatic() {
    var _this3 = this;

    var result = [];
    var el = this.target.getEl();
    var _el$parentNode = el.parentNode,
        parentNode = _el$parentNode === void 0 ? {} : _el$parentNode;
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["each"])(parentNode.children, function (item) {
      return result = result.concat(el !== item ? _this3.getElementGuides(item) : []);
    });
    return result.concat(this.getElementGuides(parentNode));
  },
  getGuidesTarget: function getGuidesTarget() {
    return this.getElementGuides(this.target.getEl());
  },
  updateGuides: function updateGuides(guides) {
    (guides || this.guides).forEach(function (item) {
      var origin = item.origin;

      var _editor$Canvas$getEle = editor.Canvas.getElementPos(origin),
          top = _editor$Canvas$getEle.top,
          height = _editor$Canvas$getEle.height,
          left = _editor$Canvas$getEle.left,
          width = _editor$Canvas$getEle.width;

      switch (item.type) {
        case 't':
          return item.y = top;

        case 'b':
          return item.y = top + height;

        case 'l':
          return item.x = left;

        case 'r':
          return item.x = left + width;

        case 'x':
          return item.x = left + width / 2;

        case 'y':
          return item.y = top + height / 2;
      }
    });
  },
  getGuidePosUpdate: function getGuidePosUpdate(item, rect) {
    var result = {};
    var top = rect.top,
        height = rect.height,
        left = rect.left,
        width = rect.width;

    switch (item.type) {
      case 't':
        result.y = top;
        break;

      case 'b':
        result.y = top + height;
        break;

      case 'l':
        result.x = left;
        break;

      case 'r':
        result.x = left + width;
        break;

      case 'x':
        result.x = left + width / 2;
        break;

      case 'y':
        result.y = top + height / 2;
        break;
    }

    return result;
  },
  renderGuide: function renderGuide() {
    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var el = item.guide || document.createElement('div');
    var Canvas = this.editor.Canvas;

    var _Canvas$getRect = Canvas.getRect(),
        topScroll = _Canvas$getRect.topScroll,
        top = _Canvas$getRect.top;

    var frameTop = Canvas.getCanvasView().getFrameOffset().top;
    var un = 'px';
    var guideSize = item.active ? 2 : 1;
    var numEl = el.children[0];
    el.style = "position: absolute; background-color: ".concat(item.active ? 'green' : 'red', ";");

    if (!el.children.length) {
      numEl = document.createElement('div');
      numEl.style = 'position: absolute; color: red; padding: 5px; top: 0; left: 0;';
      el.appendChild(numEl);
    }

    if (item.y) {
      el.style.width = '100%';
      el.style.height = "".concat(guideSize).concat(un);
      el.style.top = "".concat(item.y).concat(un);
      el.style.left = 0;
    } else {
      el.style.width = "".concat(guideSize).concat(un);
      el.style.height = '100%';
      el.style.left = "".concat(item.x).concat(un);
      el.style.top = "".concat(topScroll - frameTop + top).concat(un);
    }

    !item.guide && this.guidesContainer.appendChild(el);
    return el;
  },
  getElementGuides: function getElementGuides(el) {
    var _this4 = this;

    var editor = this.editor,
        opts = this.opts;

    var _editor$Canvas$getEle2 = editor.Canvas.getElementPos(el),
        top = _editor$Canvas$getEle2.top,
        height = _editor$Canvas$getEle2.height,
        left = _editor$Canvas$getEle2.left,
        width = _editor$Canvas$getEle2.width;

    var guides = [{
      type: 't',
      y: top
    }, // Top
    {
      type: 'b',
      y: top + height
    }, // Bottom
    {
      type: 'l',
      x: left
    }, // Left
    {
      type: 'r',
      x: left + width
    }, // Right
    {
      type: 'x',
      x: left + width / 2
    }, // Mid x
    {
      type: 'y',
      y: top + height / 2 // Mid y

    }].map(function (item) {
      return _objectSpread({}, item, {
        origin: el,
        originRect: editor.Canvas.getElementPos(el),
        guide: opts.debug && _this4.renderGuide(item)
      });
    });
    guides.forEach(function (item) {
      return _this4.guides.push(item);
    });
    return guides;
  },
  getTranslate: function getTranslate(transform) {
    var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';
    var result = 0;
    (transform || '').split(' ').forEach(function (item) {
      var itemStr = item.trim();
      var fn = "translate".concat(axis.toUpperCase(), "(");
      if (itemStr.indexOf(fn) === 0) result = parseFloat(itemStr.replace(fn, ''));
    });
    return result;
  },
  setTranslate: function setTranslate(transform, axis, value) {
    var fn = "translate".concat(axis.toUpperCase(), "(");
    var val = "".concat(fn).concat(value, ")");
    var result = (transform || '').split(' ').map(function (item) {
      var itemStr = item.trim();
      if (itemStr.indexOf(fn) === 0) item = val;
      return item;
    }).join(' ');
    if (result.indexOf(fn) < 0) result += " ".concat(val);
    return result;
  },
  getPosition: function getPosition() {
    var target = this.target,
        isTran = this.isTran;

    var _target$getStyle = target.getStyle(),
        left = _target$getStyle.left,
        top = _target$getStyle.top,
        transform = _target$getStyle.transform;

    var x = 0;
    var y = 0;

    if (isTran) {
      x = this.getTranslate(transform);
      y = this.getTranslate(transform, 'y');
    } else {
      x = parseFloat(left);
      y = parseFloat(top);
    }

    return {
      x: x,
      y: y
    };
  },
  setPosition: function setPosition(_ref) {
    var x = _ref.x,
        y = _ref.y,
        end = _ref.end,
        position = _ref.position,
        width = _ref.width,
        height = _ref.height;
    var target = this.target,
        isTran = this.isTran;
    var unit = 'px';
    var en = !end ? 1 : ''; // this will trigger the final change

    var left = "".concat(x).concat(unit);
    var top = "".concat(y).concat(unit);

    if (isTran) {
      var transform = target.getStyle()['transform'] || '';
      transform = this.setTranslate(transform, 'x', left);
      transform = this.setTranslate(transform, 'y', top);
      return target.addStyle({
        transform: transform,
        en: en
      }, {
        avoidStore: !end
      });
    }

    var adds = {
      position: position,
      width: width,
      height: height
    };
    var style = {
      left: left,
      top: top,
      en: en
    };
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["keys"])(adds).forEach(function (add) {
      var prop = adds[add];
      if (prop) style[add] = prop;
    });
    target.addStyle(style, {
      avoidStore: !end
    });
  },
  onStart: function onStart() {
    var target = this.target,
        editor = this.editor,
        isTran = this.isTran,
        opts = this.opts;
    var center = opts.center;
    var Canvas = editor.Canvas;
    var style = target.getStyle();
    var position = 'absolute';
    if (isTran) return;

    if (style.position !== position) {
      var _Canvas$offset = Canvas.offset(target.getEl()),
          left = _Canvas$offset.left,
          top = _Canvas$offset.top,
          width = _Canvas$offset.width,
          height = _Canvas$offset.height; // Check if to center the target to the pointer position


      if (center) {
        var _Canvas$getMouseRelat = Canvas.getMouseRelativeCanvas(event),
            x = _Canvas$getMouseRelat.x,
            y = _Canvas$getMouseRelat.y;

        left = x;
        top = y;
      }

      this.setPosition({
        x: left,
        y: top,
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        position: position
      });
    }
  },
  onDrag: function onDrag() {
    var _this5 = this;

    var guidesTarget = this.guidesTarget,
        opts = this.opts;
    var onDrag = opts.onDrag;
    this.updateGuides(guidesTarget);
    opts.debug && guidesTarget.forEach(function (item) {
      return _this5.renderGuide(item);
    });
    opts.guidesInfo && this.renderGuideInfo(guidesTarget.filter(function (item) {
      return item.active;
    }));
    onDrag && onDrag.apply(void 0, arguments);
  },
  onEnd: function onEnd() {
    var editor = this.editor,
        opts = this.opts,
        id = this.id;
    var onEnd = opts.onEnd;
    onEnd && onEnd.apply(void 0, arguments);
    editor.stopCommand(id);
    this.hideGuidesInfo();
  },
  hideGuidesInfo: function hideGuidesInfo() {
    var _this6 = this;

    ['X', 'Y'].forEach(function (item) {
      var guide = _this6["elGuideInfo".concat(item)];

      if (guide) guide.style.display = 'none';
    });
  },

  /**
   * Render guides with spacing information
   */
  renderGuideInfo: function renderGuideInfo() {
    var _this7 = this;

    var guides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var guidesStatic = this.guidesStatic,
        editor = this.editor;
    this.hideGuidesInfo();
    guides.forEach(function (item) {
      var origin = item.origin,
          x = item.x;
      var rectOrigin = editor.Canvas.getElementPos(origin);
      var axis = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(x) ? 'y' : 'x';
      var isY = axis === 'y';
      var origEdge1 = rectOrigin[isY ? 'left' : 'top'];
      var origEdge1Raw = rectOrigin.rect[isY ? 'left' : 'top'];
      var origEdge2 = isY ? origEdge1 + rectOrigin.width : origEdge1 + rectOrigin.height;
      var origEdge2Raw = isY ? origEdge1Raw + rectOrigin.rect.width : origEdge1Raw + rectOrigin.rect.height;

      var elGuideInfo = _this7["elGuideInfo".concat(axis.toUpperCase())];

      var elGuideInfoCnt = _this7["elGuideInfoContent".concat(axis.toUpperCase())];

      var guideInfoStyle = elGuideInfo.style; // Find the nearest element

      var res = guidesStatic.filter(function (stat) {
        return stat[axis] === item[axis];
      }).map(function (stat) {
        var _stat$originRect = stat.originRect,
            left = _stat$originRect.left,
            width = _stat$originRect.width,
            top = _stat$originRect.top,
            height = _stat$originRect.height;
        var statEdge1 = isY ? left : top;
        var statEdge2 = isY ? left + width : top + height;
        return {
          gap: statEdge2 < origEdge1 ? origEdge1 - statEdge2 : statEdge1 - origEdge2,
          guide: stat
        };
      }).filter(function (item) {
        return item.gap > 0;
      }).sort(function (a, b) {
        return a.gap - b.gap;
      }).map(function (item) {
        return item.guide;
      })[0];

      if (res) {
        var _res$originRect = res.originRect,
            left = _res$originRect.left,
            width = _res$originRect.width,
            top = _res$originRect.top,
            height = _res$originRect.height,
            rect = _res$originRect.rect;
        var isEdge1 = isY ? left < rectOrigin.left : top < rectOrigin.top;
        var statEdge1 = isY ? left : top;
        var statEdge1Raw = isY ? rect.left : rect.top;
        var statEdge2 = isY ? left + width : top + height;
        var statEdge2Raw = isY ? rect.left + rect.width : rect.top + rect.height;
        var pos2 = "".concat(isY ? item.y : item.x, "px");
        var size = isEdge1 ? origEdge1 - statEdge2 : statEdge1 - origEdge2;
        var sizeRaw = isEdge1 ? origEdge1Raw - statEdge2Raw : statEdge1Raw - origEdge2Raw;
        guideInfoStyle.display = '';
        guideInfoStyle[isY ? 'top' : 'left'] = pos2;
        guideInfoStyle[isY ? 'left' : 'top'] = "".concat(isEdge1 ? statEdge2 : origEdge2, "px");
        guideInfoStyle[isY ? 'width' : 'height'] = "".concat(size, "px");
        elGuideInfoCnt.innerHTML = "".concat(Math.round(sizeRaw), "px");
      }
    });
  },
  toggleDrag: function toggleDrag(enable) {
    var ppfx = this.ppfx,
        editor = this.editor;
    var methodCls = enable ? 'add' : 'remove';
    var classes = ["".concat(ppfx, "is__grabbing")];
    var Canvas = editor.Canvas;
    var body = Canvas.getBody();
    classes.forEach(function (cls) {
      return body.classList[methodCls](cls);
    });
    Canvas[enable ? 'startAutoscroll' : 'stopAutoscroll']();
  }
});

/***/ }),

/***/ "./src/commands/view/ComponentEnter.js":
/*!*********************************************!*\
  !*** ./src/commands/view/ComponentEnter.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    if (!ed.Canvas.hasFocus()) return;
    var toSelect = [];
    ed.getSelectedAll().forEach(function (component) {
      var coll = component.components();
      var next = coll && coll.at(0);
      next && toSelect.push(next);
    });
    toSelect.length && ed.select(toSelect);
  }
});

/***/ }),

/***/ "./src/commands/view/ComponentExit.js":
/*!********************************************!*\
  !*** ./src/commands/view/ComponentExit.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed, snd) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!ed.Canvas.hasFocus() && !opts.force) return;
    var toSelect = [];
    ed.getSelectedAll().forEach(function (component) {
      var next = component.parent(); // Recurse through the parent() chain until a selectable parent is found

      while (next && !next.get('selectable')) {
        next = next.parent();
      }

      next && toSelect.push(next);
    });
    toSelect.length && ed.select(toSelect);
  }
});

/***/ }),

/***/ "./src/commands/view/ComponentNext.js":
/*!********************************************!*\
  !*** ./src/commands/view/ComponentNext.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    if (!ed.Canvas.hasFocus()) return;
    var toSelect = [];
    ed.getSelectedAll().forEach(function (component) {
      var coll = component.collection;
      var at = coll.indexOf(component);
      var next = coll.at(at + 1);
      toSelect.push(next || component);
    });
    toSelect.length && ed.select(toSelect);
  }
});

/***/ }),

/***/ "./src/commands/view/ComponentPrev.js":
/*!********************************************!*\
  !*** ./src/commands/view/ComponentPrev.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    if (!ed.Canvas.hasFocus()) return;
    var toSelect = [];
    ed.getSelectedAll().forEach(function (component) {
      var coll = component.collection;
      var at = coll.indexOf(component);
      var next = coll.at(at - 1);
      toSelect.push(next && at - 1 >= 0 ? next : component);
    });
    toSelect.length && ed.select(toSelect);
  }
});

/***/ }),

/***/ "./src/commands/view/ComponentStyleClear.js":
/*!**************************************************!*\
  !*** ./src/commands/view/ComponentStyleClear.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed, sender) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var target = opts.target;
    var dc = ed.DomComponents;
    var type = target.get('type');
    var len = dc.getWrapper().find("[data-gjs-type=\"".concat(type, "\"]")).length;
    var toRemove = [];

    if (!len) {
      var rules = ed.CssComposer.getAll();
      var toClear = target.get('style-signature');
      toClear = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isArray"])(toClear) ? toClear : [toClear];
      rules.forEach(function (rule) {
        var selector = rule.selectorsToString();
        toClear.forEach(function (part) {
          part && selector.indexOf(part) >= 0 && toRemove.push(rule);
        });
      });
      rules.remove(toRemove);
    }

    return toRemove;
  }
});

/***/ }),

/***/ "./src/commands/view/CopyComponent.js":
/*!********************************************!*\
  !*** ./src/commands/view/CopyComponent.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    var em = ed.getModel();

    var models = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(ed.getSelectedAll());

    if (models.length) {
      em.set('clipboard', models);
    }
  }
});

/***/ }),

/***/ "./src/commands/view/DeleteComponent.js":
/*!**********************************************!*\
  !*** ./src/commands/view/DeleteComponent.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _SelectComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SelectComponent */ "./src/commands/view/SelectComponent.js");



var $ = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _SelectComponent__WEBPACK_IMPORTED_MODULE_2__["default"], {
  init: function init(o) {
    Object(underscore__WEBPACK_IMPORTED_MODULE_0__["bindAll"])(this, 'startDelete', 'stopDelete', 'onDelete');
    this.hoverClass = this.pfx + 'hover-delete';
    this.badgeClass = this.pfx + 'badge-red';
  },
  enable: function enable() {
    var that = this;
    this.$el.find('*').mouseover(this.startDelete).mouseout(this.stopDelete).click(this.onDelete);
  },

  /**
   * Start command
   * @param {Object}  e
   * @private
   */
  startDelete: function startDelete(e) {
    e.stopPropagation();
    var $this = $(e.target); // Show badge if possible

    if ($this.data('model').get('removable')) {
      $this.addClass(this.hoverClass);
      this.attachBadge($this.get(0));
    }
  },

  /**
   * Stop command
   * @param {Object}  e
   * @private
   */
  stopDelete: function stopDelete(e) {
    e.stopPropagation();
    var $this = $(e.target);
    $this.removeClass(this.hoverClass); // Hide badge if possible

    if (this.badge) this.badge.css({
      left: -1000,
      top: -1000
    });
  },

  /**
   * Delete command
   * @param {Object}  e
   * @private
   */
  onDelete: function onDelete(e) {
    e.stopPropagation();
    var $this = $(e.target); // Do nothing in case can't remove

    if (!$this.data('model').get('removable')) return;
    $this.data('model').destroy();
    this.removeBadge();
    this.clean();
  },

  /**
   * Updates badge label
   * @param   {Object}  model
   * @private
   * */
  updateBadgeLabel: function updateBadgeLabel(model) {
    this.badge.html('Remove ' + model.getName());
  }
}));

/***/ }),

/***/ "./src/commands/view/ExportTemplate.js":
/*!*********************************************!*\
  !*** ./src/commands/view/ExportTemplate.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor, sender) {
    var _this = this;

    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    sender && sender.set && sender.set('active', 0);
    var config = editor.getConfig();
    var modal = editor.Modal;
    var pfx = config.stylePrefix;
    this.cm = editor.CodeManager || null;

    if (!this.$editors) {
      var oHtmlEd = this.buildEditor('htmlmixed', 'hopscotch', 'HTML');
      var oCsslEd = this.buildEditor('css', 'hopscotch', 'CSS');
      this.htmlEditor = oHtmlEd.el;
      this.cssEditor = oCsslEd.el;
      var $editors = $("<div class=\"".concat(pfx, "export-dl\"></div>"));
      $editors.append(oHtmlEd.$el).append(oCsslEd.$el);
      this.$editors = $editors;
    }

    modal.open({
      title: config.textViewCode,
      content: this.$editors
    }).getModel().once('change:open', function () {
      return editor.stopCommand(_this.id);
    });
    this.htmlEditor.setContent(editor.getHtml());
    this.cssEditor.setContent(editor.getCss());
  },
  stop: function stop(editor) {
    var modal = editor.Modal;
    modal && modal.close();
  },
  buildEditor: function buildEditor(codeName, theme, label) {
    var input = document.createElement('textarea');
    !this.codeMirror && (this.codeMirror = this.cm.getViewer('CodeMirror'));
    var el = this.codeMirror.clone().set({
      label: label,
      codeName: codeName,
      theme: theme,
      input: input
    });
    var $el = new this.cm.EditorView({
      model: el,
      config: this.cm.getConfig()
    }).render().$el;
    el.init(input);
    return {
      el: el,
      $el: $el
    };
  }
});

/***/ }),

/***/ "./src/commands/view/Fullscreen.js":
/*!*****************************************!*\
  !*** ./src/commands/view/Fullscreen.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  /**
   * Check if fullscreen mode is enabled
   * @return {Boolean}
   */
  isEnabled: function isEnabled() {
    var d = document;
    if (d.fullscreenElement || d.webkitFullscreenElement || d.mozFullScreenElement) return 1;else return 0;
  },

  /**
   * Enable fullscreen mode and return browser prefix
   * @param  {HTMLElement} el
   * @return {string}
   */
  enable: function enable(el) {
    var pfx = '';
    if (el.requestFullscreen) el.requestFullscreen();else if (el.webkitRequestFullscreen) {
      pfx = 'webkit';
      el.webkitRequestFullscreen();
    } else if (el.mozRequestFullScreen) {
      pfx = 'moz';
      el.mozRequestFullScreen();
    } else if (el.msRequestFullscreen) el.msRequestFullscreen();else console.warn('Fullscreen not supported');
    return pfx;
  },

  /**
   * Disable fullscreen mode
   */
  disable: function disable() {
    var d = document;

    if (this.isEnabled()) {
      if (d.exitFullscreen) d.exitFullscreen();else if (d.webkitExitFullscreen) d.webkitExitFullscreen();else if (d.mozCancelFullScreen) d.mozCancelFullScreen();else if (d.msExitFullscreen) d.msExitFullscreen();
    }
  },

  /**
   * Triggered when the state of the fullscreen is changed. Inside detects if
   * it's enabled
   * @param  {strinf} pfx Browser prefix
   * @param  {Event} e
   */
  fsChanged: function fsChanged(pfx, e) {
    var d = document;
    var ev = (pfx || '') + 'fullscreenchange';

    if (!this.isEnabled()) {
      this.stop(null, this.sender);
      document.removeEventListener(ev, this.fsChanged);
    }
  },
  run: function run(editor, sender) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.sender = sender;
    var target = opts.target;
    var targetEl = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isElement"])(target) ? target : document.querySelector(target);
    var pfx = this.enable(targetEl || editor.getContainer());
    this.fsChanged = this.fsChanged.bind(this, pfx);
    document.addEventListener(pfx + 'fullscreenchange', this.fsChanged);
    editor.trigger('change:canvasOffset');
  },
  stop: function stop(editor, sender) {
    if (sender && sender.set) sender.set('active', false);
    this.disable();
    if (editor) editor.trigger('change:canvasOffset');
  }
});

/***/ }),

/***/ "./src/commands/view/MoveComponent.js":
/*!********************************************!*\
  !*** ./src/commands/view/MoveComponent.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var _SelectComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SelectComponent */ "./src/commands/view/SelectComponent.js");
/* harmony import */ var _SelectPosition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SelectPosition */ "./src/commands/view/SelectPosition.js");





var $ = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _SelectPosition__WEBPACK_IMPORTED_MODULE_4__["default"], _SelectComponent__WEBPACK_IMPORTED_MODULE_3__["default"], {
  init: function init(o) {
    _SelectComponent__WEBPACK_IMPORTED_MODULE_3__["default"].init.apply(this, arguments);
    Object(underscore__WEBPACK_IMPORTED_MODULE_0__["bindAll"])(this, 'initSorter', 'rollback', 'onEndMove');
    this.opt = o;
    this.hoverClass = this.ppfx + 'highlighter-warning';
    this.badgeClass = this.ppfx + 'badge-warning';
    this.noSelClass = this.ppfx + 'no-select';
  },
  enable: function enable() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _SelectComponent__WEBPACK_IMPORTED_MODULE_3__["default"].enable.apply(this, args);
    this.getBadgeEl().addClass(this.badgeClass);
    this.getHighlighterEl().addClass(this.hoverClass);
    var wp = this.$wrapper;
    wp.css('cursor', 'move');
    wp.on('mousedown', this.initSorter); // Avoid strange moving behavior

    wp.addClass(this.noSelClass);
  },

  /**
   * Overwrite for doing nothing
   * @private
   */
  toggleClipboard: function toggleClipboard() {},

  /**
   * Delegate sorting
   * @param  {Event} e
   * @private
   * */
  initSorter: function initSorter(e) {
    var el = $(e.target).data('model');
    var drag = el.get('draggable');
    if (!drag) return; // Avoid badge showing on move

    this.cacheEl = null;
    this.startSelectPosition(e.target, this.frameEl.contentDocument);
    this.sorter.draggable = drag;
    this.sorter.onEndMove = this.onEndMove.bind(this);
    this.stopSelectComponent();
    this.$wrapper.off('mousedown', this.initSorter);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(this.getContentWindow(), 'keydown', this.rollback);
  },

  /**
   * Init sorter from model
   * @param  {Object} model
   * @private
   */
  initSorterFromModel: function initSorterFromModel(model) {
    var drag = model.get('draggable');
    if (!drag) return; // Avoid badge showing on move

    this.cacheEl = null;
    var el = model.view.el;
    this.startSelectPosition(el, this.frameEl.contentDocument);
    this.sorter.draggable = drag;
    this.sorter.onEndMove = this.onEndMoveFromModel.bind(this);
    /*
    this.sorter.setDragHelper(el);
    var dragHelper = this.sorter.dragHelper;
    dragHelper.className = this.ppfx + 'drag-helper';
    dragHelper.innerHTML = '';
    dragHelper.backgroundColor = 'white';
    */

    this.stopSelectComponent();
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(this.getContentWindow(), 'keydown', this.rollback);
  },

  /**
   * Init sorter from models
   * @param  {Object} model
   * @private
   */
  initSorterFromModels: function initSorterFromModels(models) {
    // TODO: if one only check for `draggable`
    // Avoid badge showing on move
    this.cacheEl = null;
    var lastModel = models[models.length - 1];
    var doc = this.frameEl.contentDocument;
    this.startSelectPosition(lastModel.view.el, doc);
    this.sorter.draggable = lastModel.get('draggable');
    this.sorter.toMove = models;
    this.sorter.onEndMove = this.onEndMoveFromModel.bind(this);
    this.stopSelectComponent();
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(this.getContentWindow(), 'keydown', this.rollback);
  },
  onEndMoveFromModel: function onEndMoveFromModel() {
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["off"])(this.getContentWindow(), 'keydown', this.rollback);
  },

  /**
   * Callback after sorting
   * @private
   */
  onEndMove: function onEndMove() {
    this.enable();
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["off"])(this.getContentWindow(), 'keydown', this.rollback);
  },

  /**
   * Say what to do after the component was selected (selectComponent)
   * @param {Event} e
   * @param {Object} Selected element
   * @private
   * */
  onSelect: function onSelect(e, el) {},

  /**
   * Used to bring the previous situation before start moving the component
   * @param {Event} e
   * @param {Boolean} Indicates if rollback in anycase
   * @private
   * */
  rollback: function rollback(e, force) {
    var key = e.which || e.keyCode;

    if (key == 27 || force) {
      this.sorter.moved = false;
      this.sorter.endMove();
    }

    return;
  },

  /**
   * Returns badge element
   * @return {HTMLElement}
   * @private
   */
  getBadgeEl: function getBadgeEl() {
    if (!this.$badge) this.$badge = $(this.getBadge());
    return this.$badge;
  },

  /**
   * Returns highlighter element
   * @return {HTMLElement}
   * @private
   */
  getHighlighterEl: function getHighlighterEl() {
    if (!this.$hl) this.$hl = $(this.canvas.getHighlighter());
    return this.$hl;
  },
  stop: function stop() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _SelectComponent__WEBPACK_IMPORTED_MODULE_3__["default"].stop.apply(this, args);
    this.getBadgeEl().removeClass(this.badgeClass);
    this.getHighlighterEl().removeClass(this.hoverClass);
    var wp = this.$wrapper;
    wp.css('cursor', '').unbind().removeClass(this.noSelClass);
  }
}));

/***/ }),

/***/ "./src/commands/view/OpenAssets.js":
/*!*****************************************!*\
  !*** ./src/commands/view/OpenAssets.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor, sender) {
    var _this = this;

    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var modal = editor.Modal;
    var am = editor.AssetManager;
    var config = am.getConfig();
    var amContainer = am.getContainer();
    var title = opts.modalTitle || config.modalTitle || '';
    var types = opts.types;
    var accept = opts.accept;
    am.setTarget(opts.target);
    am.onClick(opts.onClick);
    am.onDblClick(opts.onDblClick);
    am.onSelect(opts.onSelect);

    if (!this.rendered || types) {
      var assets = am.getAll().filter(function (i) {
        return 1;
      });

      if (types && types.length) {
        assets = assets.filter(function (a) {
          return types.indexOf(a.get('type')) !== -1;
        });
      }

      am.render(assets);
      this.rendered = 1;
    }

    if (accept) {
      var uploadEl = amContainer.querySelector("input#".concat(config.stylePrefix, "uploadFile"));
      uploadEl && uploadEl.setAttribute('accept', accept);
    }

    modal.open({
      title: title,
      content: amContainer
    }).getModel().once('change:open', function () {
      return editor.stopCommand(_this.id);
    });
    return this;
  },
  stop: function stop(editor) {
    editor.Modal.close();
    return this;
  }
});

/***/ }),

/***/ "./src/commands/view/OpenBlocks.js":
/*!*****************************************!*\
  !*** ./src/commands/view/OpenBlocks.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor, sender) {
    var bm = editor.BlockManager;
    var pn = editor.Panels;

    if (!this.blocks) {
      bm.render();
      var id = 'views-container';
      var blocks = document.createElement('div');
      var panels = pn.getPanel(id) || pn.addPanel({
        id: id
      });
      blocks.appendChild(bm.getContainer());
      panels.set('appendContent', blocks).trigger('change:appendContent');
      this.blocks = blocks;
    }

    this.blocks.style.display = 'block';
  },
  stop: function stop() {
    var blocks = this.blocks;
    blocks && (blocks.style.display = 'none');
  }
});

/***/ }),

/***/ "./src/commands/view/OpenLayers.js":
/*!*****************************************!*\
  !*** ./src/commands/view/OpenLayers.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var navigator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! navigator */ "./src/navigator/index.js");


var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor) {
    var lm = editor.LayerManager;
    var pn = editor.Panels;

    if (!this.layers) {
      var id = 'views-container';
      var layers = document.createElement('div');
      var panels = pn.getPanel(id) || pn.addPanel({
        id: id
      });
      layers.appendChild(lm.render());
      panels.set('appendContent', layers).trigger('change:appendContent');
      this.layers = layers;
    }

    this.layers.style.display = 'block';
  },
  stop: function stop() {
    var layers = this.layers;
    layers && (layers.style.display = 'none');
  }
});

/***/ }),

/***/ "./src/commands/view/OpenStyleManager.js":
/*!***********************************************!*\
  !*** ./src/commands/view/OpenStyleManager.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var style_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style_manager */ "./src/style_manager/index.js");


var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(em, sender) {
    this.sender = sender;

    if (!this.$cn) {
      var config = em.getConfig(),
          panels = em.Panels; // Main container

      this.$cn = $('<div></div>'); // Secondary container

      this.$cn2 = $('<div></div>');
      this.$cn.append(this.$cn2); // Device Manager

      var dvm = em.DeviceManager;

      if (dvm && config.showDevices) {
        var devicePanel = panels.addPanel({
          id: 'devices-c'
        });
        devicePanel.set('appendContent', dvm.render()).trigger('change:appendContent');
      } // Class Manager container


      var clm = em.SelectorManager;
      if (clm) this.$cn2.append(clm.render([]));
      this.$cn2.append(em.StyleManager.render());
      var smConfig = em.StyleManager.getConfig();
      var pfx = smConfig.stylePrefix; // Create header

      this.$header = $("<div class=\"".concat(pfx, "header\">").concat(smConfig.textNoElement, "</div>"));
      this.$cn.append(this.$header); // Create panel if not exists

      if (!panels.getPanel('views-container')) this.panel = panels.addPanel({
        id: 'views-container'
      });else this.panel = panels.getPanel('views-container'); // Add all containers to the panel

      this.panel.set('appendContent', this.$cn).trigger('change:appendContent');
      this.target = em.editor;
      this.listenTo(this.target, 'component:toggled', this.toggleSm);
    }

    this.toggleSm();
  },

  /**
   * Toggle Style Manager visibility
   * @private
   */
  toggleSm: function toggleSm() {
    var target = this.target,
        sender = this.sender;
    if (sender && sender.get && !sender.get('active')) return;

    if (target.getSelectedAll().length === 1) {
      this.$cn2.show();
      this.$header.hide();
    } else {
      this.$cn2.hide();
      this.$header.show();
    }
  },
  stop: function stop() {
    // Hide secondary container if exists
    if (this.$cn2) this.$cn2.hide(); // Hide header container if exists

    if (this.$header) this.$header.hide();
  }
});

/***/ }),

/***/ "./src/commands/view/OpenTraitManager.js":
/*!***********************************************!*\
  !*** ./src/commands/view/OpenTraitManager.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor, sender) {
    this.sender = sender;
    var config = editor.Config;
    var pfx = config.stylePrefix;
    var tm = editor.TraitManager;
    var panelC;

    if (!this.$cn) {
      var tmView = tm.getTraitsViewer();
      var confTm = tm.getConfig();
      this.$cn = $('<div></div>');
      this.$cn2 = $('<div></div>');
      this.$cn.append(this.$cn2);
      this.$header = $('<div>').append("<div class=\"".concat(confTm.stylePrefix, "header\">").concat(confTm.textNoElement, "</div>"));
      this.$cn.append(this.$header);
      this.$cn2.append("<div class=\"".concat(pfx, "traits-label\">").concat(confTm.labelContainer, "</div>"));
      this.$cn2.append(tmView.render().el);
      var panels = editor.Panels;
      if (!panels.getPanel('views-container')) panelC = panels.addPanel({
        id: 'views-container'
      });else panelC = panels.getPanel('views-container');
      panelC.set('appendContent', this.$cn.get(0)).trigger('change:appendContent');
      this.target = editor.getModel();
      this.listenTo(this.target, 'component:toggled', this.toggleTm);
    }

    this.toggleTm();
  },

  /**
   * Toggle Trait Manager visibility
   * @private
   */
  toggleTm: function toggleTm() {
    var sender = this.sender;
    if (sender && sender.get && !sender.get('active')) return;

    if (this.target.getSelectedAll().length === 1) {
      this.$cn2.show();
      this.$header.hide();
    } else {
      this.$cn2.hide();
      this.$header.show();
    }
  },
  stop: function stop() {
    this.$cn2 && this.$cn2.hide();
    this.$header && this.$header.hide();
  }
});

/***/ }),

/***/ "./src/commands/view/PasteComponent.js":
/*!*********************************************!*\
  !*** ./src/commands/view/PasteComponent.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    var em = ed.getModel();
    var clp = em.get('clipboard');
    var selected = ed.getSelected();

    if (clp && selected) {
      ed.getSelectedAll().forEach(function (comp) {
        if (!comp) return;
        var coll = comp.collection;
        var at = coll.indexOf(comp) + 1;
        var copyable = clp.filter(function (cop) {
          return cop.get('copyable');
        });
        var added;

        if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["contains"])(clp, comp) && comp.get('copyable')) {
          added = coll.add(comp.clone(), {
            at: at
          });
        } else {
          added = coll.add(copyable.map(function (cop) {
            return cop.clone();
          }), {
            at: at
          });
        }

        added = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isArray"])(added) ? added : [added];
        added.forEach(function (add) {
          return ed.trigger('component:paste', add);
        });
      });
      selected.emitUpdate();
    }
  }
});

/***/ }),

/***/ "./src/commands/view/Preview.js":
/*!**************************************!*\
  !*** ./src/commands/view/Preview.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  getPanels: function getPanels(editor) {
    if (!this.panels) {
      this.panels = editor.Panels.getPanelsEl();
    }

    return this.panels;
  },
  tglPointers: function tglPointers(editor, val) {
    var body = editor.Canvas.getBody();
    var elP = body.querySelectorAll(".".concat(this.ppfx, "no-pointer"));
    Object(underscore__WEBPACK_IMPORTED_MODULE_0__["each"])(elP, function (item) {
      return item.style.pointerEvents = val ? '' : 'all';
    });
  },
  run: function run(editor, sender) {
    var _this = this;

    this.sender = sender;
    editor.stopCommand('sw-visibility');
    editor.getModel().stopDefault();
    var panels = this.getPanels(editor);
    var canvas = editor.Canvas.getElement();
    var editorEl = editor.getEl();
    var pfx = editor.Config.stylePrefix;

    if (!this.helper) {
      var helper = document.createElement('span');
      helper.className = "".concat(pfx, "off-prv fa fa-eye-slash");
      editorEl.appendChild(helper);

      helper.onclick = function () {
        return _this.stopCommand();
      };

      this.helper = helper;
    }

    this.helper.style.display = 'inline-block';
    this.tglPointers(editor);
    panels.style.display = 'none';
    var canvasS = canvas.style;
    canvasS.width = '100%';
    canvasS.height = '100%';
    canvasS.top = '0';
    canvasS.left = '0';
    canvasS.padding = '0';
    canvasS.margin = '0';
    editor.refresh();
  },
  stop: function stop(editor) {
    var _this$sender = this.sender,
        sender = _this$sender === void 0 ? {} : _this$sender;
    sender.set && sender.set('active', 0);
    var panels = this.getPanels(editor);
    editor.runCommand('sw-visibility');
    editor.getModel().runDefault();
    panels.style.display = '';
    var canvas = editor.Canvas.getElement();
    canvas.setAttribute('style', '');

    if (this.helper) {
      this.helper.style.display = 'none';
    }

    editor.refresh();
    this.tglPointers(editor, 1);
  }
});

/***/ }),

/***/ "./src/commands/view/Resize.js":
/*!*************************************!*\
  !*** ./src/commands/view/Resize.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(editor, sender, opts) {
    var opt = opts || {};
    var el = opt.el || '';
    var canvas = editor.Canvas;
    var canvasResizer = this.canvasResizer;
    var options = opt.options || {};
    var canvasView = canvas.getCanvasView();
    options.appendTo = canvas.getResizerEl();
    options.prefix = editor.getConfig().stylePrefix;
    options.posFetcher = canvasView.getElementPos.bind(canvasView);
    options.mousePosFetcher = canvas.getMouseRelativePos; // Create the resizer for the canvas if not yet created

    if (!canvasResizer || opt.forceNew) {
      this.canvasResizer = editor.Utils.Resizer.init(options);
      canvasResizer = this.canvasResizer;
    }

    canvasResizer.setOptions(options);
    canvasResizer.blur();
    canvasResizer.focus(el);
    return canvasResizer;
  },
  stop: function stop() {
    var resizer = this.canvasResizer;
    resizer && resizer.blur();
  }
});

/***/ }),

/***/ "./src/commands/view/SelectComponent.js":
/*!**********************************************!*\
  !*** ./src/commands/view/SelectComponent.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var dom_components_view_ToolbarView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dom_components/view/ToolbarView */ "./src/dom_components/view/ToolbarView.js");
/* harmony import */ var dom_components_model_Toolbar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dom_components/model/Toolbar */ "./src/dom_components/model/Toolbar.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






var $ = backbone__WEBPACK_IMPORTED_MODULE_2___default.a.$;
var showOffsets;
/* harmony default export */ __webpack_exports__["default"] = ({
  init: function init(o) {
    Object(underscore__WEBPACK_IMPORTED_MODULE_3__["bindAll"])(this, 'onHover', 'onOut', 'onClick', 'onFrameScroll');
  },
  enable: function enable() {
    this.frameOff = this.canvasOff = this.adjScroll = null;
    this.startSelectComponent();
    var em = this.config.em;
    showOffsets = 1;
    em.on('component:update', this.updateAttached, this);
    em.on('change:canvasOffset', this.updateAttached, this);
  },

  /**
   * Start select component event
   * @private
   * */
  startSelectComponent: function startSelectComponent() {
    this.toggleSelectComponent(1);
  },

  /**
   * Stop select component event
   * @private
   * */
  stopSelectComponent: function stopSelectComponent() {
    this.toggleSelectComponent();
  },

  /**
   * Toggle select component event
   * @private
   * */
  toggleSelectComponent: function toggleSelectComponent(enable) {
    var em = this.em;
    var method = enable ? 'on' : 'off';
    var methods = {
      on: utils_mixins__WEBPACK_IMPORTED_MODULE_4__["on"],
      off: utils_mixins__WEBPACK_IMPORTED_MODULE_4__["off"]
    };
    var body = this.getCanvasBody();
    var win = this.getContentWindow();
    methods[method](body, 'mouseover', this.onHover);
    methods[method](body, 'mouseout', this.onOut);
    methods[method](body, 'click touchend', this.onClick);
    methods[method](win, 'scroll resize', this.onFrameScroll);
    em[method]('component:toggled', this.onSelect, this);
    em[method]('change:componentHovered', this.onHovered, this);
  },

  /**
   * Hover command
   * @param {Object}  e
   * @private
   */
  onHover: function onHover(e) {
    e.stopPropagation();
    var trg = e.target;
    var $el = $(trg);
    var model = $el.data('model');

    if (!model) {
      var parent = $el.parent();

      while (!model && parent.length > 0) {
        model = parent.data('model');
        parent = parent.parent();
      }
    } // Adjust tools scroll top


    if (!this.adjScroll) {
      this.adjScroll = 1;
      this.updateAttached();
    }

    if (model && !model.get('hoverable')) {
      var _parent = model && model.parent();

      while (_parent && !_parent.get('hoverable')) {
        _parent = _parent.parent();
      }

      model = _parent;
    }

    this.em.setHovered(model, {
      forceChange: 1
    });
  },
  onHovered: function onHovered(em, component) {
    var trg = component && component.getEl();

    if (trg) {
      var pos = this.getElementPos(trg);
      this.updateBadge(trg, pos);
      this.updateHighlighter(trg, pos);
      this.showElementOffset(trg, pos);
    }
  },

  /**
   * Out command
   * @param {Object}  e
   * @private
   */
  onOut: function onOut(ev) {
    ev && ev.stopPropagation();
    this.hideBadge();
    this.hideHighlighter();
    this.hideElementOffset();
  },

  /**
   * Show element offset viewer
   * @param {HTMLElement}  el
   * @param {Object} pos
   */
  showElementOffset: function showElementOffset(el, pos) {
    var $el = $(el);
    var model = $el.data('model');

    if (model && model.get('status') == 'selected' || !showOffsets) {
      return;
    }

    this.editor.runCommand('show-offset', {
      el: el,
      elPos: pos,
      force: 1
    });
  },

  /**
   * Hide element offset viewer
   * @param {HTMLElement}  el
   * @param {Object} pos
   */
  hideElementOffset: function hideElementOffset(el, pos) {
    var editor = this.editor;
    editor && editor.stopCommand('show-offset');
  },

  /**
   * Show fixed element offset viewer
   * @param {HTMLElement}  el
   * @param {Object} pos
   */
  showFixedElementOffset: function showFixedElementOffset(el, pos) {
    this.editor.runCommand('show-offset', {
      el: el,
      elPos: pos,
      state: 'Fixed'
    });
  },

  /**
   * Hide fixed element offset viewer
   * @param {HTMLElement}  el
   * @param {Object} pos
   */
  hideFixedElementOffset: function hideFixedElementOffset(el, pos) {
    if (this.editor) this.editor.stopCommand('show-offset', {
      state: 'Fixed'
    });
  },

  /**
   * Hide Highlighter element
   */
  hideHighlighter: function hideHighlighter() {
    this.canvas.getHighlighter().style.display = 'none';
  },

  /**
   * On element click
   * @param {Event}  e
   * @private
   */
  onClick: function onClick(e) {
    var em = this.em;
    e.stopPropagation();
    e.preventDefault();
    if (em.get('_cmpDrag')) return em.set('_cmpDrag');
    var $el = $(e.target);
    var model = $el.data('model');

    if (!model) {
      var parent = $el.parent();

      while (!model && parent.length > 0) {
        model = parent.data('model');
        parent = parent.parent();
      }
    }

    if (model) {
      if (model.get('selectable')) {
        this.select(model, e);
      } else {
        var _parent2 = model.parent();

        while (_parent2 && !_parent2.get('selectable')) {
          _parent2 = _parent2.parent();
        }

        this.select(_parent2, e);
      }
    }
  },

  /**
   * Select component
   * @param  {Component} model
   * @param  {Event} event
   */
  select: function select(model) {
    var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!model) return;
    var ctrlKey = event.ctrlKey || event.metaKey;
    var shiftKey = event.shiftKey;
    var editor = this.editor;
    var multiple = editor.getConfig('multipleSelection');
    var em = this.em;

    if (ctrlKey && multiple) {
      editor.selectToggle(model);
    } else if (shiftKey && multiple) {
      em.clearSelection(editor.Canvas.getWindow());
      var coll = model.collection;
      var index = coll.indexOf(model);
      var selAll = editor.getSelectedAll();
      var min, max; // Fin min and max siblings

      editor.getSelectedAll().forEach(function (sel) {
        var selColl = sel.collection;
        var selIndex = selColl.indexOf(sel);

        if (selColl === coll) {
          if (selIndex < index) {
            // First model BEFORE the selected one
            min = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(min) ? selIndex : Math.max(min, selIndex);
          } else if (selIndex > index) {
            // First model AFTER the selected one
            max = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(max) ? selIndex : Math.min(max, selIndex);
          }
        }
      });

      if (!Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(min)) {
        while (min !== index) {
          editor.selectAdd(coll.at(min));
          min++;
        }
      }

      if (!Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(max)) {
        while (max !== index) {
          editor.selectAdd(coll.at(max));
          max--;
        }
      }

      editor.selectAdd(model);
    } else {
      editor.select(model);
    }

    this.initResize(model);
  },

  /**
   * Update badge for the component
   * @param {Object} Component
   * @param {Object} pos Position object
   * @private
   * */
  updateBadge: function updateBadge(el, pos) {
    var $el = $(el);
    var canvas = this.canvas;
    var config = canvas.getConfig();
    var ppfx = config.pStylePrefix || '';
    var customeLabel = config.customBadgeLabel;
    this.cacheEl = el;
    var model = $el.data('model');
    if (!model || !model.get('badgable')) return;
    var badge = this.getBadge();
    var icon = model.getIcon();
    var clsBadge = "".concat(ppfx, "badge");
    var badgeLabel = "".concat(icon ? "<div class=\"".concat(clsBadge, "__icon\">").concat(icon, "</div>") : '', "\n      <div class=\"").concat(clsBadge, "__name\">").concat(model.getName(), "</div>");
    badgeLabel = customeLabel ? customeLabel(model) : badgeLabel;
    badge.innerHTML = badgeLabel;
    var bStyle = badge.style;
    var u = 'px';
    bStyle.display = 'block';
    var canvasPos = this.getCanvasPosition();

    if (canvasPos) {
      var canvasTop = canvasPos.top;
      var canvasLeft = canvasPos.left;
      var posTop = pos.top - (badge ? badge.offsetHeight : 0);
      var badgeW = badge ? badge.offsetWidth : 0;
      var top = posTop < canvasTop ? canvasTop : posTop;
      var left = pos.left + badgeW < canvasLeft ? canvasLeft : pos.left;
      bStyle.top = top + u;
      bStyle.left = left + u;
    }
  },

  /**
   * Update highlighter element
   * @param {HTMLElement} el
   * @param {Object} pos Position object
   * @private
   */
  updateHighlighter: function updateHighlighter(el, pos) {
    var $el = $(el);
    var model = $el.data('model');

    if (!model || !model.get('hoverable') || model.get('status') == 'selected') {
      return;
    }

    var hlEl = this.canvas.getHighlighter();
    var hlStyle = hlEl.style;
    var unit = 'px';
    hlStyle.left = pos.left + unit;
    hlStyle.top = pos.top + unit;
    hlStyle.height = pos.height + unit;
    hlStyle.width = pos.width + unit;
    hlStyle.display = 'block';
  },

  /**
   * Say what to do after the component was selected
   * @param {Object}  e
   * @param {Object}  el
   * @private
   * */
  onSelect: function onSelect() {
    // Get the selected model directly from the Editor as the event might
    // be triggered manually without the model
    var model = this.em.getSelected();
    var view = model && model.view;
    this.updateToolbar(model);

    if (view) {
      var el = view.el;
      this.showFixedElementOffset(el);
      this.hideElementOffset();
      this.hideHighlighter();
      this.initResize(el);
    } else {
      this.editor.stopCommand('resize');
    }
  },

  /**
   * Init resizer on the element if possible
   * @param  {HTMLElement|Component} elem
   * @private
   */
  initResize: function initResize(elem) {
    var em = this.em,
        canvas = this.canvas;
    var editor = em ? em.get('Editor') : '';
    var config = em ? em.get('Config') : '';
    var pfx = config.stylePrefix || '';
    var resizeClass = "".concat(pfx, "resizing");
    var model = !Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isElement"])(elem) && Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["isTaggableNode"])(elem) ? elem : em.getSelected();
    var resizable = model.get('resizable');
    var el = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isElement"])(elem) ? elem : model.getEl();
    var options = {};
    var modelToStyle;

    var toggleBodyClass = function toggleBodyClass(method, e, opts) {
      var docs = opts.docs;
      docs && docs.forEach(function (doc) {
        var body = doc.body;
        var cls = body.className || '';
        body.className = (method == 'add' ? "".concat(cls, " ").concat(resizeClass) : cls.replace(resizeClass, '')).trim();
      });
    };

    if (editor && resizable) {
      options = {
        // Here the resizer is updated with the current element height and width
        onStart: function onStart(e) {
          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var el = opts.el,
              config = opts.config,
              resizer = opts.resizer;
          var keyHeight = config.keyHeight,
              keyWidth = config.keyWidth,
              currentUnit = config.currentUnit,
              keepAutoHeight = config.keepAutoHeight,
              keepAutoWidth = config.keepAutoWidth;
          toggleBodyClass('add', e, opts);
          modelToStyle = em.get('StyleManager').getModelToStyle(model);
          var computedStyle = getComputedStyle(el);
          var modelStyle = modelToStyle.getStyle();
          var currentWidth = modelStyle[keyWidth];
          config.autoWidth = keepAutoWidth && currentWidth === 'auto';

          if (isNaN(parseFloat(currentWidth))) {
            currentWidth = computedStyle[keyWidth];
          }

          var currentHeight = modelStyle[keyHeight];
          config.autoHeight = keepAutoHeight && currentHeight === 'auto';

          if (isNaN(parseFloat(currentHeight))) {
            currentHeight = computedStyle[keyHeight];
          }

          resizer.startDim.w = parseFloat(currentWidth);
          resizer.startDim.h = parseFloat(currentHeight);
          showOffsets = 0;

          if (currentUnit) {
            config.unitHeight = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getUnitFromValue"])(currentHeight);
            config.unitWidth = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getUnitFromValue"])(currentWidth);
          }
        },
        // Update all positioned elements (eg. component toolbar)
        onMove: function onMove() {
          editor.trigger('change:canvasOffset');
        },
        onEnd: function onEnd(e, opts) {
          toggleBodyClass('remove', e, opts);
          editor.trigger('change:canvasOffset');
          showOffsets = 1;
        },
        updateTarget: function updateTarget(el, rect) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          if (!modelToStyle) {
            return;
          }

          var store = options.store,
              selectedHandler = options.selectedHandler,
              config = options.config;
          var keyHeight = config.keyHeight,
              keyWidth = config.keyWidth,
              autoHeight = config.autoHeight,
              autoWidth = config.autoWidth,
              unitWidth = config.unitWidth,
              unitHeight = config.unitHeight;
          var onlyHeight = ['tc', 'bc'].indexOf(selectedHandler) >= 0;
          var onlyWidth = ['cl', 'cr'].indexOf(selectedHandler) >= 0;
          var style = modelToStyle.getStyle();

          if (!onlyHeight) {
            var bodyw = canvas.getBody().offsetWidth;
            var width = rect.w < bodyw ? rect.w : bodyw;
            style[keyWidth] = autoWidth ? 'auto' : "".concat(width).concat(unitWidth);
          }

          if (!onlyWidth) {
            style[keyHeight] = autoHeight ? 'auto' : "".concat(rect.h).concat(unitHeight);
          }

          modelToStyle.setStyle(style, {
            avoidStore: 1
          });
          var updateEvent = "update:component:style";
          em && em.trigger("".concat(updateEvent, ":").concat(keyHeight, " ").concat(updateEvent, ":").concat(keyWidth));

          if (store) {
            modelToStyle.trigger('change:style', modelToStyle, style, {});
          }
        }
      };

      if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1___default()(resizable) == 'object') {
        options = _objectSpread({}, options, {}, resizable);
      }

      this.resizer = editor.runCommand('resize', {
        el: el,
        options: options,
        force: 1
      });
    } else {
      editor.stopCommand('resize');
      this.resizer = null;
    }
  },

  /**
   * Update toolbar if the component has one
   * @param {Object} mod
   */
  updateToolbar: function updateToolbar(mod) {
    var _this = this;

    var em = this.config.em;
    var model = mod == em ? em.getSelected() : mod;
    var toolbarEl = this.canvas.getToolbarEl();
    var toolbarStyle = toolbarEl.style;

    if (!model) {
      // By putting `toolbarStyle.display = 'none'` will cause kind
      // of freezed effect with component selection (probably by iframe
      // switching)
      toolbarStyle.opacity = 0;
      return;
    }

    var toolbar = model.get('toolbar');
    var ppfx = this.ppfx;
    var showToolbar = em.get('Config').showToolbar;

    if (showToolbar && toolbar && toolbar.length) {
      toolbarStyle.opacity = '';
      toolbarStyle.display = '';

      if (!this.toolbar) {
        toolbarEl.innerHTML = '';
        this.toolbar = new dom_components_model_Toolbar__WEBPACK_IMPORTED_MODULE_6__["default"](toolbar);
        var toolbarView = new dom_components_view_ToolbarView__WEBPACK_IMPORTED_MODULE_5__["default"]({
          collection: this.toolbar,
          editor: this.editor
        });
        toolbarEl.appendChild(toolbarView.render().el);
      }

      this.toolbar.reset(toolbar);
      var view = model.view;
      toolbarStyle.top = '-100px';
      toolbarStyle.left = 0;
      setTimeout(function () {
        return view && _this.updateToolbarPos(view.el);
      }, 0);
    } else {
      toolbarStyle.display = 'none';
    }
  },

  /**
   * Update toolbar positions
   * @param {HTMLElement} el
   * @param {Object} pos
   */
  updateToolbarPos: function updateToolbarPos(el, elPos) {
    var canvas = this.canvas;
    var unit = 'px';
    var toolbarEl = canvas.getToolbarEl();
    var toolbarStyle = toolbarEl.style;
    toolbarStyle.opacity = 0;
    var pos = canvas.getTargetToElementDim(toolbarEl, el, {
      elPos: elPos,
      event: 'toolbarPosUpdate'
    });

    if (pos) {
      var frameOffset = canvas.getCanvasView().getFrameOffset(); // Scroll with the window if the top edge is reached and the
      // element is bigger than the canvas

      if (pos.top <= pos.canvasTop && !(pos.elementHeight + pos.targetHeight >= frameOffset.height)) {
        pos.top = pos.elementTop + pos.elementHeight;
      } // Check left position of the toolbar


      var elRight = pos.elementLeft + pos.elementWidth;
      var left = elRight - pos.targetWidth;

      if (elRight > pos.canvasWidth) {
        left -= elRight - pos.canvasWidth;
      }

      left = left < 0 ? 0 : left;
      toolbarStyle.top = "".concat(pos.top).concat(unit);
      toolbarStyle.left = "".concat(left).concat(unit);
      toolbarStyle.opacity = '';
    }
  },

  /**
   * Return canvas dimensions and positions
   * @return {Object}
   */
  getCanvasPosition: function getCanvasPosition() {
    return this.canvas.getCanvasView().getPosition();
  },

  /**
   * Removes all highlighting effects on components
   * @private
   * */
  clean: function clean() {
    if (this.selEl) this.selEl.removeClass(this.hoverClass);
  },

  /**
   * Returns badge element
   * @return {HTMLElement}
   * @private
   */
  getBadge: function getBadge() {
    return this.canvas.getBadgeEl();
  },

  /**
   * On frame scroll callback
   * @private
   */
  onFrameScroll: function onFrameScroll() {
    var el = this.cacheEl;

    if (el) {
      var elPos = this.getElementPos(el);
      this.updateBadge(el, elPos);
      var model = this.em.getSelected();
      var viewEl = model && model.getEl();
      viewEl && this.updateToolbarPos(viewEl);
    }
  },

  /**
   * Update attached elements, eg. component toolbar
   */
  updateAttached: function updateAttached() {
    var resizer = this.resizer,
        em = this.em;
    var model = em.getSelected();
    var view = model && model.view;

    if (view) {
      var el = view.el;
      this.updateToolbarPos(el);
      this.showFixedElementOffset(el);
      resizer && resizer.updateContainer();
    }
  },

  /**
   * Returns element's data info
   * @param {HTMLElement} el
   * @return {Object}
   * @private
   */
  getElementPos: function getElementPos(el, badge) {
    return this.canvas.getCanvasView().getElementPos(el);
  },

  /**
   * Hide badge
   * @private
   * */
  hideBadge: function hideBadge() {
    this.getBadge().style.display = 'none';
  },

  /**
   * Clean previous model from different states
   * @param {Component} model
   * @private
   */
  cleanPrevious: function cleanPrevious(model) {
    model && model.set({
      status: '',
      state: ''
    });
  },

  /**
   * Returns content window
   * @private
   */
  getContentWindow: function getContentWindow() {
    return this.frameEl.contentWindow;
  },
  run: function run(editor) {
    this.editor = editor && editor.get('Editor');
    this.enable();
    this.onSelect();
  },
  stop: function stop(ed, sender) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var em = this.em,
        editor = this.editor;
    this.stopSelectComponent();
    !opts.preserveSelected && em.setSelected(null);
    this.clean();
    this.onOut();
    this.hideFixedElementOffset();
    this.canvas.getToolbarEl().style.display = 'none';
    editor && editor.stopCommand('resize');
    em.off('component:update', this.updateAttached, this);
    em.off('change:canvasOffset', this.updateAttached, this);
  }
});

/***/ }),

/***/ "./src/commands/view/SelectPosition.js":
/*!*********************************************!*\
  !*** ./src/commands/view/SelectPosition.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = ({
  /**
   * Start select position event
   * @param {HTMLElement} trg
   * @private
   * */
  startSelectPosition: function startSelectPosition(trg, doc) {
    var _this = this;

    this.isPointed = false;
    var utils = this.editorModel.get('Utils');
    if (utils && !this.sorter) this.sorter = new utils.Sorter({
      container: this.getCanvasBody(),
      placer: this.canvas.getPlacerEl(),
      containerSel: '*',
      itemSel: '*',
      pfx: this.ppfx,
      direction: 'a',
      document: doc,
      wmargin: 1,
      nested: 1,
      em: this.editorModel,
      canvasRelative: 1,
      scale: function scale() {
        return _this.em.getZoomDecimal();
      }
    });
    trg && this.sorter.startSort(trg);
  },

  /**
   * Get frame position
   * @return {Object}
   * @private
   */
  getOffsetDim: function getOffsetDim() {
    var frameOff = this.offset(this.canvas.getFrameEl());
    var canvasOff = this.offset(this.canvas.getElement());
    var top = frameOff.top - canvasOff.top;
    var left = frameOff.left - canvasOff.left;
    return {
      top: top,
      left: left
    };
  },

  /**
   * Stop select position event
   * @private
   * */
  stopSelectPosition: function stopSelectPosition() {
    this.posTargetCollection = null;
    this.posIndex = this.posMethod == 'after' && this.cDim.length !== 0 ? this.posIndex + 1 : this.posIndex; //Normalize

    if (this.sorter) {
      this.sorter.moved = 0;
      this.sorter.endMove();
    }

    if (this.cDim) {
      this.posIsLastEl = this.cDim.length !== 0 && this.posMethod == 'after' && this.posIndex == this.cDim.length;
      this.posTargetEl = this.cDim.length === 0 ? $(this.outsideElem) : !this.posIsLastEl && this.cDim[this.posIndex] ? $(this.cDim[this.posIndex][5]).parent() : $(this.outsideElem);
      this.posTargetModel = this.posTargetEl.data('model');
      this.posTargetCollection = this.posTargetEl.data('model-comp');
    }
  },

  /**
   * Enabel select position
   * @private
   */
  enable: function enable() {
    this.startSelectPosition();
  },

  /**
   * Check if the pointer is near to the float component
   * @param {number} index
   * @param {string} method
   * @param {Array<Array>} dims
   * @return {Boolean}
   * @private
   * */
  nearFloat: function nearFloat(index, method, dims) {
    var i = index || 0;
    var m = method || 'before';
    var len = dims.length;
    var isLast = len !== 0 && m == 'after' && i == len;
    if (len !== 0 && (!isLast && !dims[i][4] || dims[i - 1] && !dims[i - 1][4] || isLast && !dims[i - 1][4])) return 1;
    return 0;
  },
  run: function run() {
    this.enable();
  },
  stop: function stop() {
    this.stopSelectPosition();
    this.$wrapper.css('cursor', '');
    this.$wrapper.unbind();
  }
});

/***/ }),

/***/ "./src/commands/view/ShowOffset.js":
/*!*****************************************!*\
  !*** ./src/commands/view/ShowOffset.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");


var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = ({
  getOffsetMethod: function getOffsetMethod(state) {
    var method = state || '';
    return 'get' + method + 'OffsetViewerEl';
  },
  run: function run(editor, sender, opts) {
    var opt = opts || {};
    var state = opt.state || '';
    var config = editor.getConfig();
    var zoom = this.em.getZoomDecimal();
    var el = opt.el || '';

    if (!config.showOffsets || Object(utils_mixins__WEBPACK_IMPORTED_MODULE_1__["isTextNode"])(el) || !config.showOffsetsSelected && state == 'Fixed') {
      editor.stopCommand(this.id, opts);
      return;
    }

    var canvas = editor.Canvas;
    var pos = opt.elPos || canvas.getElementPos(el);
    var style = window.getComputedStyle(el);
    var ppfx = this.ppfx;
    var stateVar = state + 'State';
    var method = this.getOffsetMethod(state);
    var offsetViewer = canvas[method]();
    offsetViewer.style.display = 'block';
    var marginT = this['marginT' + state];
    var marginB = this['marginB' + state];
    var marginL = this['marginL' + state];
    var marginR = this['marginR' + state];
    var padT = this['padT' + state];
    var padB = this['padB' + state];
    var padL = this['padL' + state];
    var padR = this['padR' + state];

    if (!this[stateVar]) {
      var stateLow = state.toLowerCase();
      var marginName = stateLow + 'margin-v';
      var paddingName = stateLow + 'padding-v';
      var marginV = $("<div class=\"".concat(ppfx, "marginName\">")).get(0);
      var paddingV = $("<div class=\"".concat(ppfx, "paddingName\">")).get(0);
      var marginEls = ppfx + marginName + '-el';
      var paddingEls = ppfx + paddingName + '-el';
      var fullMargName = "".concat(marginEls, " ").concat(ppfx + marginName);
      var fullPadName = "".concat(paddingEls, " ").concat(ppfx + paddingName);
      marginT = $("<div class=\"".concat(fullMargName, "-top\"></div>")).get(0);
      marginB = $("<div class=\"".concat(fullMargName, "-bottom\"></div>")).get(0);
      marginL = $("<div class=\"".concat(fullMargName, "-left\"></div>")).get(0);
      marginR = $("<div class=\"".concat(fullMargName, "-right\"></div>")).get(0);
      padT = $("<div class=\"".concat(fullPadName, "-top\"></div>")).get(0);
      padB = $("<div class=\"".concat(fullPadName, "-bottom\"></div>")).get(0);
      padL = $("<div class=\"".concat(fullPadName, "-left\"></div>")).get(0);
      padR = $("<div class=\"".concat(fullPadName, "-right\"></div>")).get(0);
      this['marginT' + state] = marginT;
      this['marginB' + state] = marginB;
      this['marginL' + state] = marginL;
      this['marginR' + state] = marginR;
      this['padT' + state] = padT;
      this['padB' + state] = padB;
      this['padL' + state] = padL;
      this['padR' + state] = padR;
      marginV.appendChild(marginT);
      marginV.appendChild(marginB);
      marginV.appendChild(marginL);
      marginV.appendChild(marginR);
      paddingV.appendChild(padT);
      paddingV.appendChild(padB);
      paddingV.appendChild(padL);
      paddingV.appendChild(padR);
      offsetViewer.appendChild(marginV);
      offsetViewer.appendChild(paddingV);
      this[stateVar] = '1';
    }

    var unit = 'px';
    var marginLeftSt = parseFloat(style.marginLeft.replace(unit, '')) * zoom;
    var marginRightSt = parseFloat(style.marginRight.replace(unit, '')) * zoom;
    var marginTopSt = parseFloat(style.marginTop.replace(unit, '')) * zoom;
    var marginBottomSt = parseFloat(style.marginBottom.replace(unit, '')) * zoom;
    var mtStyle = marginT.style;
    var mbStyle = marginB.style;
    var mlStyle = marginL.style;
    var mrStyle = marginR.style;
    var ptStyle = padT.style;
    var pbStyle = padB.style;
    var plStyle = padL.style;
    var prStyle = padR.style;
    var posLeft = parseFloat(pos.left);
    var widthEl = parseFloat(style.width) * zoom + unit; // Margin style

    mtStyle.height = marginTopSt + unit;
    mtStyle.width = widthEl;
    mtStyle.top = pos.top - marginTopSt + unit;
    mtStyle.left = posLeft + unit;
    mbStyle.height = marginBottomSt + unit;
    mbStyle.width = widthEl;
    mbStyle.top = pos.top + pos.height + unit;
    mbStyle.left = posLeft + unit;
    var marginSideH = pos.height + marginTopSt + marginBottomSt + unit;
    var marginSideT = pos.top - marginTopSt + unit;
    mlStyle.height = marginSideH;
    mlStyle.width = marginLeftSt + unit;
    mlStyle.top = marginSideT;
    mlStyle.left = posLeft - marginLeftSt + unit;
    mrStyle.height = marginSideH;
    mrStyle.width = marginRightSt + unit;
    mrStyle.top = marginSideT;
    mrStyle.left = posLeft + pos.width + unit; // Padding style

    var padTop = parseFloat(style.paddingTop) * zoom;
    ptStyle.height = padTop + unit;
    ptStyle.width = widthEl;
    ptStyle.top = pos.top + unit;
    ptStyle.left = posLeft + unit;
    var padBot = parseFloat(style.paddingBottom) * zoom;
    pbStyle.height = padBot + unit;
    pbStyle.width = widthEl;
    pbStyle.top = pos.top + pos.height - padBot + unit;
    pbStyle.left = posLeft + unit;
    var padSideH = pos.height - padBot - padTop + unit;
    var padSideT = pos.top + padTop + unit;
    plStyle.height = padSideH;
    plStyle.width = parseFloat(style.paddingLeft) * zoom + unit;
    plStyle.top = padSideT;
    plStyle.left = pos.left + unit;
    var padRight = parseFloat(style.paddingRight) * zoom;
    prStyle.height = padSideH;
    prStyle.width = padRight + unit;
    prStyle.top = padSideT;
    prStyle.left = pos.left + pos.width - padRight + unit;
  },
  stop: function stop(editor, sender, opts) {
    var opt = opts || {};
    var state = opt.state || '';
    var method = this.getOffsetMethod(state);
    var canvas = editor.Canvas;
    var offsetViewer = canvas[method]();
    offsetViewer.style.display = 'none';
  }
});

/***/ }),

/***/ "./src/commands/view/SwitchVisibility.js":
/*!***********************************************!*\
  !*** ./src/commands/view/SwitchVisibility.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  run: function run(ed) {
    ed.Canvas.getBody().className = this.ppfx + 'dashed';
  },
  stop: function stop(ed) {
    ed.Canvas.getBody().className = '';
  }
});

/***/ }),

/***/ "./src/css_composer/config/config.js":
/*!*******************************************!*\
  !*** ./src/css_composer/config/config.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // Style prefix
  stylePrefix: 'css-',
  // Custom CSS string to render on top
  staticRules: '',
  // Default CSS style
  rules: []
});

/***/ }),

/***/ "./src/css_composer/index.js":
/*!***********************************!*\
  !*** ./src/css_composer/index.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/config */ "./src/css_composer/config/config.js");
/* harmony import */ var _model_CssRule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/CssRule */ "./src/css_composer/model/CssRule.js");
/* harmony import */ var _model_CssRules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/CssRules */ "./src/css_composer/model/CssRules.js");
/* harmony import */ var _view_CssRulesView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view/CssRulesView */ "./src/css_composer/view/CssRulesView.js");
/* harmony import */ var selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! selector_manager/model/Selectors */ "./src/selector_manager/model/Selectors.js");
/* harmony import */ var selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! selector_manager/model/Selector */ "./src/selector_manager/model/Selector.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * This module contains and manage CSS rules for the template inside the canvas.
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/css_composer/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  cssComposer: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const cssComposer = editor.CssComposer;
 * ```
 *
 * * [load](#load)
 * * [store](#store)
 * * [add](#add)
 * * [get](#get)
 * * [getAll](#getall)
 * * [clear](#clear)
 * * [setRule](#setrule)
 * * [getRule](#getrule)
 *
 * @module CssComposer
 */







/* harmony default export */ __webpack_exports__["default"] = (function () {
  var em;
  var c = {};
  var rules, rulesView;
  return {
    Selectors: selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_6__["default"],

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'CssComposer',

    /**
     * Mandatory for the storage manager
     * @type {String}
     * @private
     */
    storageKey: function storageKey() {
      var keys = [];
      var smc = c.stm && c.stm.getConfig() || {};
      if (smc.storeCss) keys.push('css');
      if (smc.storeStyles) keys.push('styles');
      return keys;
    },

    /**
     * Initializes module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @private
     */
    init: function init(config) {
      c = config || {};

      for (var name in _config_config__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        if (!(name in c)) c[name] = _config_config__WEBPACK_IMPORTED_MODULE_2__["default"][name];
      }

      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix;
      var elStyle = c.em && c.em.config.style || '';
      c.rules = elStyle || c.rules;
      em = c.em;
      rules = new _model_CssRules__WEBPACK_IMPORTED_MODULE_4__["default"]([], c);
      rulesView = new _view_CssRulesView__WEBPACK_IMPORTED_MODULE_5__["default"]({
        collection: rules,
        config: c
      });
      return this;
    },

    /**
     * On load callback
     * @private
     */
    onLoad: function onLoad() {
      rules.add(c.rules);
    },

    /**
     * Do stuff after load
     * @param  {Editor} em
     * @private
     */
    postLoad: function postLoad(em) {
      var _this = this;

      var ev = 'add remove';
      var rules = this.getAll();
      var um = em.get('UndoManager');
      um && um.add(rules);
      em.stopListening(rules, ev, this.handleChange);
      em.listenTo(rules, ev, this.handleChange);
      rules.each(function (rule) {
        return _this.handleChange(rule, {
          avoidStore: 1
        });
      });
    },

    /**
     * Handle rule changes
     * @private
     */
    handleChange: function handleChange(model) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var ev = 'change:style';
      var um = em.get('UndoManager');
      um && um.add(model);
      var handleUpdates = em.handleUpdates.bind(em);
      em.stopListening(model, ev, handleUpdates);
      em.listenTo(model, ev, handleUpdates);
      !opts.avoidStore && handleUpdates('', '', opts);
    },

    /**
     * Load data from the passed object, if the object is empty will try to fetch them
     * autonomously from the storage manager.
     * The fetched data will be added to the collection
     * @param {Object} data Object of data to load
     * @return {Object} Loaded rules
     */
    load: function load(data) {
      var d = data || '';

      if (!d && c.stm) {
        d = c.em.getCacheLoad();
      }

      var obj = d.styles || '';

      if (d.styles) {
        try {
          obj = JSON.parse(d.styles);
        } catch (err) {}
      } else if (d.css) {
        obj = c.em.get('Parser').parseCss(d.css);
      }

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(obj)) {
        obj.length && rules.reset(obj);
      } else if (obj) {
        rules.reset(obj);
      }

      return obj;
    },

    /**
     * Store data to the selected storage
     * @param {Boolean} noStore If true, won't store
     * @return {Object} Data to store
     */
    store: function store(noStore) {
      if (!c.stm) return;
      var obj = {};
      var keys = this.storageKey();
      if (keys.indexOf('css') >= 0) obj.css = c.em.getCss();
      if (keys.indexOf('styles') >= 0) obj.styles = JSON.stringify(rules);
      if (!noStore) c.stm.store(obj);
      return obj;
    },

    /**
     * Add new rule to the collection, if not yet exists with the same selectors
     * @param {Array<Selector>} selectors Array of selectors
     * @param {String} state Css rule state
     * @param {String} width For which device this style is oriented
     * @param {Object} opts Other options for the rule
     * @return {Model}
     * @example
     * var sm = editor.SelectorManager;
     * var sel1 = sm.add('myClass1');
     * var sel2 = sm.add('myClass2');
     * var rule = cssComposer.add([sel1, sel2], 'hover');
     * rule.set('style', {
     *   width: '100px',
     *   color: '#fff',
     * });
     * */
    add: function add(selectors, state, width) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var s = state || '';
      var w = width || '';

      var opt = _objectSpread({}, opts);

      var rule = this.get(selectors, s, w, opt); // do not create rules that were found before
      // unless this is a single at-rule, for which multiple declarations
      // make sense (e.g. multiple `@font-type`s)

      if (rule && rule.config && !rule.config.singleAtRule) {
        return rule;
      } else {
        opt.state = s;
        opt.mediaText = w;
        opt.selectors = '';
        rule = new _model_CssRule__WEBPACK_IMPORTED_MODULE_3__["default"](opt, c);
        rule.get('selectors').add(selectors);
        rules.add(rule);
        return rule;
      }
    },

    /**
     * Get the rule
     * @param {Array<Selector>} selectors Array of selectors
     * @param {String} state Css rule state
     * @param {String} width For which device this style is oriented
     * @param {Object} ruleProps Other rule props
     * @return  {Model|null}
     * @example
     * var sm = editor.SelectorManager;
     * var sel1 = sm.add('myClass1');
     * var sel2 = sm.add('myClass2');
     * var rule = cssComposer.get([sel1, sel2], 'hover');
     * // Update the style
     * rule.set('style', {
     *   width: '300px',
     *   color: '#000',
     * });
     * */
    get: function get(selectors, state, width, ruleProps) {
      var rule = null;
      rules.each(function (m) {
        if (rule) return;
        if (m.compare(selectors, state, width, ruleProps)) rule = m;
      });
      return rule;
    },

    /**
     * Get the collection of rules
     * @return {Collection}
     * */
    getAll: function getAll() {
      return rules;
    },

    /**
     * Remove all rules
     * @return {this}
     */
    clear: function clear() {
      this.getAll().reset();
      return this;
    },

    /**
     * Add a raw collection of rule objects
     * This method overrides styles, in case, of already defined rule
     * @param {Array<Object>} data Array of rule objects, eg . [{selectors: ['class1'], style: {....}}, ..]
     * @param {Object} opts Options
     * @return {Array<Model>}
     * @private
     */
    addCollection: function addCollection(data) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var result = [];
      var d = data instanceof Array ? data : [data];

      for (var i = 0, l = d.length; i < l; i++) {
        var rule = d[i] || {};
        if (!rule.selectors) continue;
        var sm = c.em && c.em.get('SelectorManager');
        if (!sm) console.warn('Selector Manager not found');
        var sl = rule.selectors;
        var sels = sl instanceof Array ? sl : [sl];
        var newSels = [];

        for (var j = 0, le = sels.length; j < le; j++) {
          var selec = sm.add(sels[j]);
          newSels.push(selec);
        }

        var modelExists = this.get(newSels, rule.state, rule.mediaText, rule);
        var model = this.add(newSels, rule.state, rule.mediaText, rule);
        var updateStyle = !modelExists || !opts.avoidUpdateStyle;
        var style = rule.style || {};

        if (updateStyle) {
          var styleUpdate = opts.extend ? _objectSpread({}, model.get('style'), {}, style) : style;
          model.set('style', styleUpdate);
        }

        result.push(model);
      }

      return result;
    },

    /**
     * Add/update the CSS rule with a generic selector
     * @param {string} selectors Selector, eg. '.myclass'
     * @param {Object} style  Style properties and values
     * @param {Object} [opts={}]  Additional properties
     * @param {String} [opts.atRuleType='']  At-rule type, eg. 'media'
     * @param {String} [opts.atRuleParams='']  At-rule parameters, eg. '(min-width: 500px)'
     * @return {CssRule} The new/updated rule
     * @example
     * // Simple class-based rule
     * const rule = cc.setRule('.class1.class2', { color: 'red' });
     * console.log(rule.toCSS()) // output: .class1.class2 { color: red }
     * // With state and other mixed selector
     * const rule = cc.setRule('.class1.class2:hover, div#myid', { color: 'red' });
     * // output: .class1.class2:hover, div#myid { color: red }
     * // With media
     * const rule = cc.setRule('.class1:hover', { color: 'red' }, {
     *  atRuleType: 'media',
     *  atRuleParams: '(min-width: 500px)',
     * });
     * // output: @media (min-width: 500px) { .class1:hover { color: red } }
     */
    setRule: function setRule(selectors, style) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var atRuleType = opts.atRuleType,
          atRuleParams = opts.atRuleParams;
      var node = em.get('Parser').parserCss.checkNode({
        selectors: selectors,
        style: style
      })[0];
      var state = node.state,
          selectorsAdd = node.selectorsAdd;
      var sm = em.get('SelectorManager');
      var selector = sm.add(node.selectors);
      var rule = this.add(selector, state, atRuleParams, {
        selectorsAdd: selectorsAdd,
        atRule: atRuleType
      });
      rule.setStyle(style, opts);
      return rule;
    },

    /**
     * Get the CSS rule by a generic selector
     * @param {string} selectors Selector, eg. '.myclass:hover'
     * @param {String} [opts.atRuleType='']  At-rule type, eg. 'media'
     * @param {String} [opts.atRuleParams='']  At-rule parameters, eg. '(min-width: 500px)'
     * @return {CssRule}
     * @example
     * const rule = cc.getRule('.myclass1:hover');
     * const rule2 = cc.getRule('.myclass1:hover, div#myid');
     * const rule3 = cc.getRule('.myclass1', {
     *  atRuleType: 'media',
     *  atRuleParams: '(min-width: 500px)',
     * });
     */
    getRule: function getRule(selectors) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var sm = em.get('SelectorManager');
      var node = em.get('Parser').parserCss.checkNode({
        selectors: selectors
      })[0];
      var selector = sm.get(node.selectors);
      var state = node.state,
          selectorsAdd = node.selectorsAdd;
      var atRuleType = opts.atRuleType,
          atRuleParams = opts.atRuleParams;
      return selector && this.get(selector, state, atRuleParams, {
        selectorsAdd: selectorsAdd,
        atRule: atRuleType
      });
    },

    /**
     * Add/update the CSS rule with id selector
     * @param {string} name Id selector name, eg. 'my-id'
     * @param {Object} style  Style properties and values
     * @param {Object} [opts={}]  Custom options, like `state` and `mediaText`
     * @return {CssRule} The new/updated rule
     * @private
     * @example
     * const rule = cc.setIdRule('myid', { color: 'red' });
     * const ruleHover = cc.setIdRule('myid', { color: 'blue' }, { state: 'hover' });
     * // This will add current CSS:
     * // #myid { color: red }
     * // #myid:hover { color: blue }
     */
    setIdRule: function setIdRule(name) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var state = opts.state || '';
      var media = opts.mediaText || em.getCurrentMedia();
      var sm = em.get('SelectorManager');
      var selector = sm.add({
        name: name,
        type: selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__["default"].TYPE_ID
      });
      var rule = this.add(selector, state, media);
      rule.setStyle(style, opts);
      return rule;
    },

    /**
     * Get the CSS rule by id selector
     * @param {string} name Id selector name, eg. 'my-id'
     * @param  {Object} [opts={}]  Custom options, like `state` and `mediaText`
     * @return {CssRule}
     * @private
     * @example
     * const rule = cc.getIdRule('myid');
     * const ruleHover = cc.setIdRule('myid', { state: 'hover' });
     */
    getIdRule: function getIdRule(name) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var state = opts.state || '';
      var media = opts.mediaText || em.getCurrentMedia();
      var selector = em.get('SelectorManager').get(name, selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__["default"].TYPE_ID);
      return selector && this.get(selector, state, media);
    },

    /**
     * Add/update the CSS rule with class selector
     * @param {string} name Class selector name, eg. 'my-class'
     * @param {Object} style  Style properties and values
     * @param {Object} [opts={}]  Custom options, like `state` and `mediaText`
     * @return {CssRule} The new/updated rule
     * @private
     * @example
     * const rule = cc.setClassRule('myclass', { color: 'red' });
     * const ruleHover = cc.setClassRule('myclass', { color: 'blue' }, { state: 'hover' });
     * // This will add current CSS:
     * // .myclass { color: red }
     * // .myclass:hover { color: blue }
     */
    setClassRule: function setClassRule(name) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var state = opts.state || '';
      var media = opts.mediaText || em.getCurrentMedia();
      var sm = em.get('SelectorManager');
      var selector = sm.add({
        name: name,
        type: selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__["default"].TYPE_CLASS
      });
      var rule = this.add(selector, state, media);
      rule.setStyle(style, opts);
      return rule;
    },

    /**
     * Get the CSS rule by class selector
     * @param {string} name Class selector name, eg. 'my-class'
     * @param  {Object} [opts={}]  Custom options, like `state` and `mediaText`
     * @return {CssRule}
     * @private
     * @example
     * const rule = cc.getClassRule('myclass');
     * const ruleHover = cc.getClassRule('myclass', { state: 'hover' });
     */
    getClassRule: function getClassRule(name) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var state = opts.state || '';
      var media = opts.mediaText || em.getCurrentMedia();
      var selector = em.get('SelectorManager').get(name, selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__["default"].TYPE_CLASS);
      return selector && this.get(selector, state, media);
    },

    /**
     * Render the block of CSS rules
     * @return {HTMLElement}
     * @private
     */
    render: function render() {
      return rulesView.render().el;
    }
  };
});

/***/ }),

/***/ "./src/css_composer/model/CssRule.js":
/*!*******************************************!*\
  !*** ./src/css_composer/model/CssRule.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var domain_abstract_model_Styleable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! domain_abstract/model/Styleable */ "./src/domain_abstract/model/Styleable.js");
/* harmony import */ var selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! selector_manager/model/Selectors */ "./src/selector_manager/model/Selectors.js");





/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend(domain_abstract_model_Styleable__WEBPACK_IMPORTED_MODULE_2__["default"]).extend({
  defaults: {
    // Css selectors
    selectors: {},
    // Additional string css selectors
    selectorsAdd: '',
    // Css properties style
    style: {},
    // On which device width this rule should be rendered, eg. @media (max-width: 1000px)
    mediaText: '',
    // State of the rule, eg: hover | pressed | focused
    state: '',
    // Indicates if the rule is stylable
    stylable: true,
    // Type of at-rule, eg. 'media', 'font-face', etc.
    atRuleType: '',
    // This particolar property is used only on at-rules, like 'page' or
    // 'font-face', where the block containes only style declarations
    singleAtRule: 0,
    // If true, sets '!important' on all properties
    // You can use an array to specify properties to set important
    // Used in view
    important: 0
  },
  initialize: function initialize(c) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.config = c || {};
    var em = opt.em;
    var selectors = this.config.selectors || [];
    this.em = em;

    if (em) {
      var sm = em.get('SelectorManager');
      var slct = [];
      selectors.forEach(function (selector) {
        slct.push(sm.add(selector));
      });
      selectors = slct;
    }

    this.set('selectors', new selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_3__["default"](selectors));
  },

  /**
   * Returns an at-rule statement if possible, eg. '@media (...)', '@keyframes'
   * @return {string}
   */
  getAtRule: function getAtRule() {
    var type = this.get('atRuleType');
    var condition = this.get('mediaText'); // Avoid breaks with the last condition

    var typeStr = type ? "@".concat(type) : condition ? '@media' : '';
    return typeStr + (condition && typeStr ? " ".concat(condition) : '');
  },

  /**
   * Return selectors fo the rule as a string
   * @return {string}
   */
  selectorsToString: function selectorsToString() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var result = [];
    var em = this.em;
    var state = this.get('state');
    var wrapper = this.get('wrapper');
    var addSelector = this.get('selectorsAdd');
    var isBody = wrapper && em && em.getConfig('wrapperIsBody');
    var selectors = isBody ? 'body' : this.get('selectors').getFullString();
    var stateStr = state ? ":".concat(state) : '';
    selectors && result.push("".concat(selectors).concat(stateStr));
    addSelector && !opts.skipAdd && result.push(addSelector);
    return result.join(', ');
  },

  /**
   * Get declaration block
   * @param {Object} [opts={}] Options
   * @return {string}
   */
  getDeclaration: function getDeclaration() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var result = '';
    var selectors = this.selectorsToString();
    var style = this.styleToString(opts);
    var singleAtRule = this.get('singleAtRule');

    if ((selectors || singleAtRule) && style) {
      result = singleAtRule ? style : "".concat(selectors, "{").concat(style, "}");
    }

    return result;
  },

  /**
   * Returns CSS string of the rule
   * @param {Object} [opts={}] Options
   * @return {string}
   */
  toCSS: function toCSS() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var result = '';
    var atRule = this.getAtRule();
    var block = this.getDeclaration(opts);
    block && (result = block);

    if (atRule && result) {
      result = "".concat(atRule, "{").concat(result, "}");
    }

    return result;
  },
  toJSON: function toJSON() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var obj = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.prototype.toJSON.apply(this, args);

    if (this.em.getConfig('avoidDefaults')) {
      var defaults = this.defaults;
      Object(underscore__WEBPACK_IMPORTED_MODULE_0__["forEach"])(defaults, function (value, key) {
        if (obj[key] === value) {
          delete obj[key];
        }
      });
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(obj.selectors)) delete obj.selectors;
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(obj.style)) delete obj.style;
    }

    return obj;
  },

  /**
   * Compare the actual model with parameters
   * @param   {Object} selectors Collection of selectors
   * @param   {String} state Css rule state
   * @param   {String} width For which device this style is oriented
   * @param {Object} ruleProps Other rule props
   * @return  {Boolean}
   * @private
   */
  compare: function compare(selectors, state, width) {
    var ruleProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var st = state || '';
    var wd = width || '';
    var selectorsAdd = ruleProps.selectorsAdd || '';
    var atRuleType = ruleProps.atRuleType || '';
    var cId = 'cid'; //var a1 = _.pluck(selectors.models || selectors, cId);
    //var a2 = _.pluck(this.get('selectors').models, cId);

    if (!(selectors instanceof Array) && !selectors.models) selectors = [selectors];
    var a1 = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["map"])(selectors.models || selectors, function (model) {
      return model.get('name');
    });
    var a2 = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["map"])(this.get('selectors').models, function (model) {
      return model.get('name');
    });
    var f = false;
    if (a1.length !== a2.length) return f;

    for (var i = 0; i < a1.length; i++) {
      var re = 0;

      for (var j = 0; j < a2.length; j++) {
        if (a1[i] === a2[j]) re = 1;
      }

      if (re === 0) return f;
    }

    if (this.get('state') !== st || this.get('mediaText') !== wd || this.get('selectorsAdd') !== selectorsAdd || this.get('atRuleType') !== atRuleType) {
      return f;
    }

    return true;
  }
}));

/***/ }),

/***/ "./src/css_composer/model/CssRules.js":
/*!********************************************!*\
  !*** ./src/css_composer/model/CssRules.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CssRule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CssRule */ "./src/css_composer/model/CssRule.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  initialize: function initialize(models, opt) {
    // Inject editor
    if (opt && opt.em) this.editor = opt.em; // Not used

    this.model = function (attrs, options) {
      var model;
      if (!options.em && opt && opt.em) options.em = opt.em;

      switch (1) {
        default:
          model = new _CssRule__WEBPACK_IMPORTED_MODULE_1__["default"](attrs, options);
      }

      return model;
    };
  },
  add: function add(models) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (typeof models === 'string') {
      models = this.editor.get('Parser').parseCss(models);
    }

    opt.em = this.editor;
    return backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.prototype.add.apply(this, [models, opt]);
  }
}));

/***/ }),

/***/ "./src/css_composer/view/CssGroupRuleView.js":
/*!***************************************************!*\
  !*** ./src/css_composer/view/CssGroupRuleView.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _CssRuleView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CssRuleView */ "./src/css_composer/view/CssRuleView.js");

/* harmony default export */ __webpack_exports__["default"] = (_CssRuleView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  _createElement: function _createElement(tagName) {
    return document.createTextNode('');
  },
  render: function render() {
    var model = this.model;
    var important = model.get('important');
    this.el.textContent = model.getDeclaration({
      important: important
    });
    return this;
  }
}));

/***/ }),

/***/ "./src/css_composer/view/CssRuleView.js":
/*!**********************************************!*\
  !*** ./src/css_composer/view/CssRuleView.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  tagName: 'style',
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.config = o.config || {};
    var model = this.model;
    var toTrack = 'change:style change:state change:mediaText';
    this.listenTo(model, toTrack, this.render);
    this.listenTo(model, 'destroy remove', this.remove);
    this.listenTo(model.get('selectors'), 'change', this.render);
  },
  render: function render() {
    var model = this.model;
    var important = model.get('important');
    this.el.innerHTML = this.model.toCSS({
      important: important
    });
    return this;
  }
}));

/***/ }),

/***/ "./src/css_composer/view/CssRulesView.js":
/*!***********************************************!*\
  !*** ./src/css_composer/view/CssRulesView.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CssRuleView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CssRuleView */ "./src/css_composer/view/CssRuleView.js");
/* harmony import */ var _CssGroupRuleView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CssGroupRuleView */ "./src/css_composer/view/CssGroupRuleView.js");



var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;

var getBlockId = function getBlockId(pfx, order) {
  return "".concat(pfx).concat(order ? "-".concat(parseFloat(order)) : '');
};

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize(o) {
    var config = o.config || {};
    this.atRules = {};
    this.config = config;
    this.em = config.em;
    this.pfx = config.stylePrefix || '';
    this.className = this.pfx + 'rules';
    var coll = this.collection;
    this.listenTo(coll, 'add', this.addTo);
    this.listenTo(coll, 'reset', this.render);
  },

  /**
   * Add to collection
   * @param {Object} model
   * @private
   * */
  addTo: function addTo(model) {
    this.addToCollection(model);
  },

  /**
   * Add new object to collection
   * @param {Object} model
   * @param {Object} fragmentEl
   * @return {Object}
   * @private
   * */
  addToCollection: function addToCollection(model, fragmentEl) {
    // If the render is not yet started
    if (!this.renderStarted) {
      return;
    }

    var fragment = fragmentEl || null;
    var config = this.config;
    var opts = {
      model: model,
      config: config
    };
    var rendered, view; // I have to render keyframes of the same name together
    // Unfortunately at the moment I didn't find the way of appending them
    // if not staticly, via appendData

    if (model.get('atRuleType') === 'keyframes') {
      var atRule = model.getAtRule();
      var atRuleEl = this.atRules[atRule];

      if (!atRuleEl) {
        var styleEl = document.createElement('style');
        atRuleEl = document.createTextNode('');
        styleEl.appendChild(document.createTextNode("".concat(atRule, "{")));
        styleEl.appendChild(atRuleEl);
        styleEl.appendChild(document.createTextNode("}"));
        this.atRules[atRule] = atRuleEl;
        rendered = styleEl;
      }

      view = new _CssGroupRuleView__WEBPACK_IMPORTED_MODULE_2__["default"](opts);
      atRuleEl.appendData(view.render().el.textContent);
    } else {
      view = new _CssRuleView__WEBPACK_IMPORTED_MODULE_1__["default"](opts);
      rendered = view.render().el;
    }

    var clsName = this.className;
    var mediaText = model.get('mediaText');
    var defaultBlockId = getBlockId(clsName);
    var blockId = defaultBlockId; // If the rule contains a media query it might have a different container
    // for it (eg. rules created with Device Manager)

    if (mediaText) {
      blockId = getBlockId(clsName, this.getMediaWidth(mediaText));
    }

    if (rendered) {
      var container = fragment || this.el;
      var contRules; // Try to find a specific container for the rule (if it
      // containes a media query), otherwise get the default one

      try {
        contRules = container.querySelector("#".concat(blockId));
      } catch (e) {}

      if (!contRules) {
        contRules = container.querySelector("#".concat(defaultBlockId));
      }

      contRules.appendChild(rendered);
    }

    return rendered;
  },
  getMediaWidth: function getMediaWidth(mediaText) {
    return mediaText && mediaText.replace("(".concat(this.em.getConfig('mediaCondition'), ": "), '').replace(')', '');
  },
  render: function render() {
    var _this = this;

    this.renderStarted = 1;
    this.atRules = {};
    var em = this.em,
        $el = this.$el,
        className = this.className,
        collection = this.collection;
    var frag = document.createDocumentFragment();
    $el.empty(); // Create devices related DOM structure, ensure also to have a default container

    var prs = em.get('DeviceManager').getAll().pluck('priority');
    prs.every(function (pr) {
      return pr;
    }) && prs.unshift(0);
    prs.forEach(function (pr) {
      return $("<div id=\"".concat(getBlockId(className, pr), "\"></div>")).appendTo(frag);
    });
    collection.each(function (model) {
      return _this.addToCollection(model, frag);
    });
    $el.append(frag);
    $el.attr('class', className);
    return this;
  }
}));

/***/ }),

/***/ "./src/device_manager/config/config.js":
/*!*********************************************!*\
  !*** ./src/device_manager/config/config.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  devices: [],
  deviceLabel: 'Device'
});

/***/ }),

/***/ "./src/device_manager/index.js":
/*!*************************************!*\
  !*** ./src/device_manager/index.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config/config */ "./src/device_manager/config/config.js");
/* harmony import */ var _model_Devices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model/Devices */ "./src/device_manager/model/Devices.js");
/* harmony import */ var _view_DevicesView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view/DevicesView */ "./src/device_manager/view/DevicesView.js");
/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/device_manager/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  deviceManager: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const deviceManager = editor.DeviceManager;
 * ```
 *
 * * [add](#add)
 * * [get](#get)
 * * [getAll](#getAll)
 *
 * @module DeviceManager
 */



/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var devices, view;
  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'DeviceManager',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @param {Array<Object>} [config.devices=[]] Default devices
     * @example
     * ...
     * {
     *    devices: [
     *      {name: 'Desktop', width: ''}
     *      {name: 'Tablet', width: '991px'}
     *    ],
     * }
     * ...
     * @return {this}
     * @private
     */
    init: function init(config) {
      c = config || {};

      for (var name in _config_config__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        if (!(name in c)) c[name] = _config_config__WEBPACK_IMPORTED_MODULE_0__["default"][name];
      }

      devices = new _model_Devices__WEBPACK_IMPORTED_MODULE_1__["default"](c.devices);
      view = new _view_DevicesView__WEBPACK_IMPORTED_MODULE_2__["default"]({
        collection: devices,
        config: c
      });
      return this;
    },

    /**
     * Add new device to the collection. URLs are supposed to be unique
     * @param {string} name Device name
     * @param {string} width Width of the device
     * @param {Object} opts Custom options
     * @return {Device} Added device
     * @example
     * deviceManager.add('Tablet', '900px');
     * deviceManager.add('Tablet2', '900px', {
     *  height: '300px',
     *  widthMedia: '810px', // the width that will be used for the CSS media
     * });
     */
    add: function add(name, width, opts) {
      var obj = opts || {};
      obj.name = name;
      obj.width = width;
      return devices.add(obj);
    },

    /**
     * Return device by name
     * @param  {string} name Name of the device
     * @example
     * var device = deviceManager.get('Tablet');
     * console.log(JSON.stringify(device));
     * // {name: 'Tablet', width: '900px'}
     */
    get: function get(name) {
      return devices.get(name);
    },

    /**
     * Return all devices
     * @return {Collection}
     * @example
     * var devices = deviceManager.getAll();
     * console.log(JSON.stringify(devices));
     * // [{name: 'Desktop', width: ''}, ...]
     */
    getAll: function getAll() {
      return devices;
    },

    /**
     * Render devices
     * @return {string} HTML string
     * @private
     */
    render: function render() {
      return view.render().el;
    }
  };
});

/***/ }),

/***/ "./src/device_manager/model/Device.js":
/*!********************************************!*\
  !*** ./src/device_manager/model/Device.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  idAttribute: 'name',
  defaults: {
    name: '',
    // Width to set for the editor iframe
    width: null,
    // Height to set for the editor iframe
    height: '',
    // The width which will be used in media queries,
    // If empty the width will be used
    widthMedia: null,
    // Setup the order of media queries
    priority: null
  },
  initialize: function initialize() {
    var _this = this;

    this.get('widthMedia') === null && this.set('widthMedia', this.get('width'));
    this.get('width') === null && this.set('width', this.get('widthMedia'));
    !this.get('priority') && this.set('priority', parseFloat(this.get('widthMedia')) || 0);
    var toCheck = ['width', 'height', 'widthMedia'];
    toCheck.forEach(function (prop) {
      return _this.checkUnit(prop);
    });
  },
  checkUnit: function checkUnit(prop) {
    var pr = this.get(prop) || '';
    var noUnit = (parseFloat(pr) || 0).toString() === pr.toString();
    noUnit && this.set(prop, "".concat(pr, "px"));
  }
}));

/***/ }),

/***/ "./src/device_manager/model/Devices.js":
/*!*********************************************!*\
  !*** ./src/device_manager/model/Devices.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Device__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Device */ "./src/device_manager/model/Device.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Device__WEBPACK_IMPORTED_MODULE_1__["default"],
  comparator: function comparator(left, right) {
    var max = Number.MAX_VALUE;
    return (right.get('priority') || max) - (left.get('priority') || max);
  },
  getSorted: function getSorted() {
    return this.sort();
  }
}));

/***/ }),

/***/ "./src/device_manager/view/DevicesView.js":
/*!************************************************!*\
  !*** ./src/device_manager/view/DevicesView.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  template: Object(underscore__WEBPACK_IMPORTED_MODULE_0__["template"])("\n    <div class=\"<%= ppfx %>device-label\"><%= deviceLabel %></div>\n    <div class=\"<%= ppfx %>field <%= ppfx %>select\">\n      <span id=\"<%= ppfx %>input-holder\">\n        <select class=\"<%= ppfx %>devices\"></select>\n      </span>\n      <div class=\"<%= ppfx %>sel-arrow\">\n        <div class=\"<%= ppfx %>d-s-arrow\"></div>\n      </div>\n    </div>\n    <button style=\"display:none\" class=\"<%= ppfx %>add-trasp\">+</button>"),
  events: {
    change: 'updateDevice'
  },
  initialize: function initialize(o) {
    this.config = o.config || {};
    this.em = this.config.em;
    this.ppfx = this.config.pStylePrefix || '';
    this.events['click .' + this.ppfx + 'add-trasp'] = this.startAdd;
    this.listenTo(this.em, 'change:device', this.updateSelect);
    this.delegateEvents();
  },

  /**
   * Start adding new device
   * @return {[type]} [description]
   * @private
   */
  startAdd: function startAdd() {},

  /**
   * Update device of the editor
   * @private
   */
  updateDevice: function updateDevice() {
    var em = this.em;

    if (em) {
      var devEl = this.devicesEl;
      var val = devEl ? devEl.val() : '';
      em.set('device', val);
    }
  },

  /**
   * Update select value on device update
   * @private
   */
  updateSelect: function updateSelect() {
    var em = this.em;
    var devEl = this.devicesEl;

    if (em && em.getDeviceModel && devEl) {
      var device = em.getDeviceModel();
      var name = device ? device.get('name') : '';
      devEl.val(name);
    }
  },

  /**
   * Return devices options
   * @return {string} String of options
   * @private
   */
  getOptions: function getOptions() {
    var result = '';
    this.collection.each(function (device) {
      var name = device.get('name');
      result += '<option value="' + name + '">' + name + '</option>';
    });
    return result;
  },
  render: function render() {
    var pfx = this.ppfx;
    this.$el.html(this.template({
      ppfx: pfx,
      deviceLabel: this.config.deviceLabel
    }));
    this.devicesEl = this.$el.find('.' + pfx + 'devices');
    this.devicesEl.append(this.getOptions());
    this.el.className = pfx + 'devices-c';
    return this;
  }
}));

/***/ }),

/***/ "./src/dom_components/config/config.js":
/*!*********************************************!*\
  !*** ./src/dom_components/config/config.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'comp-',
  wrapperId: 'wrapper',
  wrapperName: 'Body',
  // Default wrapper configuration
  wrapper: {
    removable: false,
    copyable: false,
    draggable: false,
    components: [],
    traits: [],
    stylable: ['background', 'background-color', 'background-image', 'background-repeat', 'background-attachment', 'background-position', 'background-size']
  },
  // Could be used for default components
  components: [],
  // If the component is draggable you can drag the component itself (not only from the toolbar)
  draggableComponents: 1,
  // Generally, if you don't edit the wrapper in the editor, like
  // custom attributes, you don't need the wrapper stored in your JSON
  // structure, but in case you need it you can use this option.
  // If you have `config.avoidInlineStyle` disabled the wrapper will be stored
  // as we need to store inlined style.
  storeWrapper: 0,

  /**
   * You can setup a custom component definiton processor before adding it into the editor.
   * It might be useful to transform custom objects (es. some framework specific JSX) to GrapesJS component one.
   * This custom function will be executed on ANY new added component to the editor so make smart checks/conditions
   * to avoid doing useless executions
   * By default, GrapesJS supports already elements generated from React JSX preset
   * @example
   * processor: (obj) => {
   *  if (obj.$$typeof) { // eg. this is a React Element
   *     const gjsComponent = {
   *      type: obj.type,
   *      components: obj.props.children,
   *      ...
   *     };
   *     ...
   *     return gjsComponent;
   *  }
   * }
   */
  processor: 0,
  // List of void elements
  voidElements: ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr']
});

/***/ }),

/***/ "./src/dom_components/index.js":
/*!*************************************!*\
  !*** ./src/dom_components/index.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/config */ "./src/dom_components/config/config.js");
/* harmony import */ var _model_Component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model/Component */ "./src/dom_components/model/Component.js");
/* harmony import */ var _model_Components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model/Components */ "./src/dom_components/model/Components.js");
/* harmony import */ var _view_ComponentView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./view/ComponentView */ "./src/dom_components/view/ComponentView.js");
/* harmony import */ var _view_ComponentsView__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./view/ComponentsView */ "./src/dom_components/view/ComponentsView.js");
/* harmony import */ var _model_ComponentLabel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./model/ComponentLabel */ "./src/dom_components/model/ComponentLabel.js");
/* harmony import */ var _view_ComponentLabelView__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./view/ComponentLabelView */ "./src/dom_components/view/ComponentLabelView.js");
/* harmony import */ var _model_ComponentTextNode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./model/ComponentTextNode */ "./src/dom_components/model/ComponentTextNode.js");
/* harmony import */ var _view_ComponentTextNodeView__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./view/ComponentTextNodeView */ "./src/dom_components/view/ComponentTextNodeView.js");
/* harmony import */ var _model_ComponentText__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./model/ComponentText */ "./src/dom_components/model/ComponentText.js");
/* harmony import */ var _view_ComponentTextView__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./view/ComponentTextView */ "./src/dom_components/view/ComponentTextView.js");
/* harmony import */ var _model_ComponentWrapper__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./model/ComponentWrapper */ "./src/dom_components/model/ComponentWrapper.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * With this module is possible to manage components inside the canvas. You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/dom_components/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  domComponents: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const domComponents = editor.DomComponents;
 * ```
 *
 * * [getWrapper](#getwrapper)
 * * [getComponents](#getcomponents)
 * * [addComponent](#addcomponent)
 * * [clear](#clear)
 * * [load](#load)
 * * [store](#store)
 * * [addType](#addtype)
 * * [getType](#gettype)
 * * [getTypes](#gettypes)
 * * [render](#render)
 *
 * @module DomComponents
 */






 // import ComponentTableCell from './model/ComponentTableCell';
// import ComponentTableCellView from './view/ComponentTableCellView';
// import ComponentTableRow from './model/ComponentTableRow';
// import ComponentTableRowView from './view/ComponentTableRowView';
// import ComponentTable from './model/ComponentTable';
// import ComponentTableView from './view/ComponentTableView';
// import ComponentTableHead from './model/ComponentTableHead';
// import ComponentTableHeadView from './view/ComponentTableHeadView';
// import ComponentTableBody from './model/ComponentTableBody';
// import ComponentTableBodyView from './view/ComponentTableBodyView';
// import ComponentTableFoot from './model/ComponentTableFoot';
// import ComponentTableFootView from './view/ComponentTableFootView';
// import ComponentMap from './model/ComponentMap';
// import ComponentMapView from './view/ComponentMapView';
// import ComponentLink from './model/ComponentLink';
// import ComponentLinkView from './view/ComponentLinkView';


 // import ComponentVideo from './model/ComponentVideo';
// import ComponentVideoView from './view/ComponentVideoView';
// import ComponentImage from './model/ComponentImage';
// import ComponentImageView from './view/ComponentImageView';
// import ComponentScript from './model/ComponentScript';
// import ComponentScriptView from './view/ComponentScriptView';
// import ComponentSvg from './model/ComponentSvg';
// import ComponentSvgView from './view/ComponentSvgView';
// import ComponentComment from './model/ComponentComment';
// import ComponentCommentView from './view/ComponentCommentView';






/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var em;
  var componentsById = {};
  var component, componentView;
  var componentTypes = [// {
  //   id: 'cell',
  //   model: ComponentTableCell,
  //   view: ComponentTableCellView
  // },
  // {
  //   id: 'row',
  //   model: ComponentTableRow,
  //   view: ComponentTableRowView
  // },
  // {
  //   id: 'table',
  //   model: ComponentTable,
  //   view: ComponentTableView
  // },
  // {
  //   id: 'thead',
  //   model: ComponentTableHead,
  //   view: ComponentTableHeadView
  // },
  // {
  //   id: 'tbody',
  //   model: ComponentTableBody,
  //   view: ComponentTableBodyView
  // },
  // {
  //   id: 'tfoot',
  //   model: ComponentTableFoot,
  //   view: ComponentTableFootView
  // },
  // {
  //   id: 'map',
  //   model: ComponentMap,
  //   view: ComponentMapView
  // },
  // {
  //   id: 'link',
  //   model: ComponentLink,
  //   view: ComponentLinkView
  // },
  {
    id: 'label',
    model: _model_ComponentLabel__WEBPACK_IMPORTED_MODULE_9__["default"],
    view: _view_ComponentLabelView__WEBPACK_IMPORTED_MODULE_10__["default"]
  }, // {
  //   id: 'video',
  //   model: ComponentVideo,
  //   view: ComponentVideoView
  // },
  // {
  //   id: 'image',
  //   model: ComponentImage,
  //   view: ComponentImageView
  // },
  // {
  //   id: 'script',
  //   model: ComponentScript,
  //   view: ComponentScriptView
  // },
  // {
  //   id: 'svg',
  //   model: ComponentSvg,
  //   view: ComponentSvgView
  // },
  // {
  //   id: 'comment',
  //   model: ComponentComment,
  //   view: ComponentCommentView
  // },
  {
    id: 'textnode',
    model: _model_ComponentTextNode__WEBPACK_IMPORTED_MODULE_11__["default"],
    view: _view_ComponentTextNodeView__WEBPACK_IMPORTED_MODULE_12__["default"]
  }, {
    id: 'text',
    model: _model_ComponentText__WEBPACK_IMPORTED_MODULE_13__["default"],
    view: _view_ComponentTextView__WEBPACK_IMPORTED_MODULE_14__["default"]
  }, {
    id: 'wrapper',
    model: _model_ComponentWrapper__WEBPACK_IMPORTED_MODULE_15__["default"],
    view: _view_ComponentView__WEBPACK_IMPORTED_MODULE_7__["default"]
  }, {
    id: 'default',
    model: _model_Component__WEBPACK_IMPORTED_MODULE_5__["default"],
    view: _view_ComponentView__WEBPACK_IMPORTED_MODULE_7__["default"]
  }];
  return {
    Component: _model_Component__WEBPACK_IMPORTED_MODULE_5__["default"],
    Components: _model_Components__WEBPACK_IMPORTED_MODULE_6__["default"],
    ComponentsView: _view_ComponentsView__WEBPACK_IMPORTED_MODULE_8__["default"],
    componentTypes: componentTypes,
    componentsById: componentsById,

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'DomComponents',

    /**
     * Returns config
     * @return {Object} Config object
     * @private
     */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Mandatory for the storage manager
     * @type {String}
     * @private
     */
    storageKey: function storageKey() {
      var keys = [];
      var smc = c.stm && c.stm.getConfig() || {};
      if (smc.storeHtml) keys.push('html');
      if (smc.storeComponents) keys.push('components');
      return keys;
    },

    /**
     * Initialize module. Called on a new instance of the editor with configurations passed
     * inside 'domComponents' field
     * @param {Object} config Configurations
     * @private
     */
    init: function init(config) {
      var _this = this;

      c = config || {};
      em = c.em;
      this.em = em;

      if (em) {
        c.components = em.config.components || c.components;
      }

      for (var name in _config_config__WEBPACK_IMPORTED_MODULE_4__["default"]) {
        if (!(name in c)) c[name] = _config_config__WEBPACK_IMPORTED_MODULE_4__["default"][name];
      }

      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix; // Load dependencies

      if (em) {
        c.modal = em.get('Modal') || '';
        c.am = em.get('AssetManager') || '';
        em.get('Parser').compTypes = componentTypes;
        em.on('change:componentHovered', this.componentHovered, this);
        var selected = em.get('selected');
        em.listenTo(selected, 'add', function (sel, c, opts) {
          return _this.selectAdd(sel, opts);
        });
        em.listenTo(selected, 'remove', function (sel, c, opts) {
          return _this.selectRemove(sel, opts);
        });
      } // Build wrapper


      var components = c.components;

      var wrapper = _objectSpread({}, c.wrapper);

      wrapper['custom-name'] = c.wrapperName;
      wrapper.wrapper = 1;
      wrapper.type = 'wrapper'; // Components might be a wrapper

      if (components && components.constructor === Object && components.wrapper) {
        wrapper = _objectSpread({}, components);
        components = components.components || [];
        wrapper.components = []; // Have to put back the real object of components

        if (em) {
          em.config.components = components;
          c.components = components;
        }
      }

      component = new _model_Component__WEBPACK_IMPORTED_MODULE_5__["default"](wrapper, {
        em: em,
        config: c,
        componentTypes: componentTypes,
        domc: this
      });
      component.set({
        attributes: {
          id: 'wrapper'
        }
      });
      componentView = new _view_ComponentView__WEBPACK_IMPORTED_MODULE_7__["default"]({
        model: component,
        config: c,
        componentTypes: componentTypes
      });
      return this;
    },

    /**
     * On load callback
     * @private
     */
    onLoad: function onLoad() {
      this.setComponents(c.components);
    },

    /**
     * Do stuff after load
     * @param  {Editor} em
     * @private
     */
    postLoad: function postLoad(em) {
      this.handleChanges(this.getWrapper(), null, {
        avoidStore: 1
      });
    },

    /**
     * Handle component changes
     * @private
     */
    handleChanges: function handleChanges(model, value) {
      var _this2 = this;

      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var comps = model.components();
      var um = em.get('UndoManager');
      var handleUpdates = em.handleUpdates.bind(em);
      var handleChanges = this.handleChanges.bind(this);
      var handleChangesColl = this.handleChangesColl.bind(this);
      var handleRemoves = this.handleRemoves.bind(this);
      um && um.add(model);
      um && comps && um.add(comps);
      var evn = 'change:style change:content change:attributes change:src';
      [[model, evn, handleUpdates], [model, 'change:components', handleChangesColl], [comps, 'add', handleChanges], [comps, 'remove', handleRemoves], [model.get('classes'), 'add remove', handleUpdates]].forEach(function (els) {
        em.stopListening(els[0], els[1], els[2]);
        em.listenTo(els[0], els[1], els[2]);
      });
      !opts.avoidStore && handleUpdates('', '', opts);
      comps.each(function (model) {
        return _this2.handleChanges(model, value, opts);
      });
    },
    handleChangesColl: function handleChangesColl(model, coll) {
      var um = em.get('UndoManager');

      if (um && coll instanceof backbone__WEBPACK_IMPORTED_MODULE_2___default.a.Collection) {
        var handleChanges = this.handleChanges.bind(this);
        var handleRemoves = this.handleRemoves.bind(this);
        um.add(coll);
        [[coll, 'add', handleChanges], [coll, 'remove', handleRemoves]].forEach(function (els) {
          em.stopListening(els[0], els[1], els[2]);
          em.listenTo(els[0], els[1], els[2]);
        });
      }
    },

    /**
     * Triggered when some component is removed
     * @private
     * */
    handleRemoves: function handleRemoves(model, value) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      !opts.avoidStore && em.handleUpdates(model, value, opts);
    },

    /**
     * Load components from the passed object, if the object is empty will try to fetch them
     * autonomously from the selected storage
     * The fetched data will be added to the collection
     * @param {Object} data Object of data to load
     * @return {Object} Loaded data
     */
    load: function load() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var em = this.em;
      var result = '';

      if (!data && c.stm) {
        data = c.em.getCacheLoad();
      }

      var _data = data,
          components = _data.components,
          html = _data.html;

      if (components) {
        if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isObject"])(components) || Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isArray"])(components)) {
          result = components;
        } else {
          try {
            result = JSON.parse(components);
          } catch (err) {
            em && em.logError(err);
          }
        }
      } else if (html) {
        result = html;
      }

      var isObj = result && result.constructor === Object;

      if (result && result.length || isObj) {
        this.clear(); // If the result is an object I consider it the wrapper

        if (isObj) {
          this.getWrapper().set(result);
        } else {
          this.getComponents().add(result);
        }
      }

      return result;
    },

    /**
     * Store components on the selected storage
     * @param {Boolean} noStore If true, won't store
     * @return {Object} Data to store
     */
    store: function store(noStore) {
      if (!c.stm) {
        return;
      }

      var obj = {};
      var keys = this.storageKey();

      if (keys.indexOf('html') >= 0) {
        obj.html = c.em.getHtml();
      }

      if (keys.indexOf('components') >= 0) {
        var _em = this.em; // const storeWrap = (em && !em.getConfig('avoidInlineStyle')) || c.storeWrapper;

        var storeWrap = c.storeWrapper;
        var toStore = storeWrap ? this.getWrapper() : this.getComponents();
        obj.components = JSON.stringify(toStore);
      }

      if (!noStore) {
        c.stm.store(obj);
      }

      return obj;
    },

    /**
     * Returns privately the main wrapper
     * @return {Object}
     * @private
     */
    getComponent: function getComponent() {
      return component;
    },

    /**
     * Returns root component inside the canvas. Something like `<body>` inside HTML page
     * The wrapper doesn't differ from the original Component Model
     * @return {Component} Root Component
     * @example
     * // Change background of the wrapper and set some attribute
     * var wrapper = domComponents.getWrapper();
     * wrapper.set('style', {'background-color': 'red'});
     * wrapper.set('attributes', {'title': 'Hello!'});
     */
    getWrapper: function getWrapper() {
      return this.getComponent();
    },

    /**
     * Returns wrapper's children collection. Once you have the collection you can
     * add other Components(Models) inside. Each component can have several nested
     * components inside and you can nest them as more as you wish.
     * @return {Components} Collection of components
     * @example
     * // Let's add some component
     * var wrapperChildren = domComponents.getComponents();
     * var comp1 = wrapperChildren.add({
     *   style: { 'background-color': 'red'}
     * });
     * var comp2 = wrapperChildren.add({
     *   tagName: 'span',
     *   attributes: { title: 'Hello!'}
     * });
     * // Now let's add an other one inside first component
     * // First we have to get the collection inside. Each
     * // component has 'components' property
     * var comp1Children = comp1.get('components');
     * // Procede as before. You could also add multiple objects
     * comp1Children.add([
     *   { style: { 'background-color': 'blue'}},
     *   { style: { height: '100px', width: '100px'}}
     * ]);
     * // Remove comp2
     * wrapperChildren.remove(comp2);
     */
    getComponents: function getComponents() {
      return this.getWrapper().get('components');
    },

    /**
     * Add new components to the wrapper's children. It's the same
     * as 'domComponents.getComponents().add(...)'
     * @param {Object|Component|Array<Object>} component Component/s to add
     * @param {string} [component.tagName='div'] Tag name
     * @param {string} [component.type=''] Type of the component. Available: ''(default), 'text', 'image'
     * @param {boolean} [component.removable=true] If component is removable
     * @param {boolean} [component.draggable=true] If is possible to move the component around the structure
     * @param {boolean} [component.droppable=true] If is possible to drop inside other components
     * @param {boolean} [component.badgable=true] If the badge is visible when the component is selected
     * @param {boolean} [component.stylable=true] If is possible to style component
     * @param {boolean} [component.copyable=true] If is possible to copy&paste the component
     * @param {string} [component.content=''] String inside component
     * @param {Object} [component.style={}] Style object
     * @param {Object} [component.attributes={}] Attribute object
     * @return {Component|Array<Component>} Component/s added
     * @example
     * // Example of a new component with some extra property
     * var comp1 = domComponents.addComponent({
     *   tagName: 'div',
     *   removable: true, // Can't remove it
     *   draggable: true, // Can't move it
     *   copyable: true, // Disable copy/past
     *   content: 'Content text', // Text inside component
     *   style: { color: 'red'},
     *   attributes: { title: 'here' }
     * });
     */
    addComponent: function addComponent(component) {
      return this.getComponents().add(component);
    },

    /**
     * Render and returns wrapper element with all components inside.
     * Once the wrapper is rendered, and it's what happens when you init the editor,
     * the all new components will be added automatically and property changes are all
     * updated immediately
     * @return {HTMLElement}
     */
    render: function render() {
      return componentView.render().el;
    },

    /**
     * Remove all components
     * @return {this}
     */
    clear: function clear() {
      this.getComponents().map(function (i) {
        return i;
      }).forEach(function (i) {
        return i.remove();
      });
      return this;
    },

    /**
     * Set components
     * @param {Object|string} components HTML string or components model
     * @return {this}
     * @private
     */
    setComponents: function setComponents(components) {
      this.clear().addComponent(components);
    },

    /**
     * Add new component type.
     * Read more about this in [Define New Component](https://grapesjs.com/docs/modules/Components.html#define-new-component)
     * @param {string} type Component ID
     * @param {Object} methods Component methods
     * @return {this}
     */
    addType: function addType(type, methods) {
      var em = this.em;
      var _methods$model = methods.model,
          model = _methods$model === void 0 ? {} : _methods$model,
          _methods$view = methods.view,
          view = _methods$view === void 0 ? {} : _methods$view,
          isComponent = methods.isComponent,
          extend = methods.extend,
          extendView = methods.extendView,
          _methods$extendFn = methods.extendFn,
          extendFn = _methods$extendFn === void 0 ? [] : _methods$extendFn,
          _methods$extendFnView = methods.extendFnView,
          extendFnView = _methods$extendFnView === void 0 ? [] : _methods$extendFnView;
      var compType = this.getType(type);
      var extendType = this.getType(extend);
      var extendViewType = this.getType(extendView);
      var typeToExtend = extendType ? extendType : compType ? compType : this.getType('default');
      var modelToExt = typeToExtend.model;
      var viewToExt = extendViewType ? extendViewType.view : typeToExtend.view; // Function for extending source object methods

      var getExtendedObj = function getExtendedObj(fns, target, srcToExt) {
        return fns.reduce(function (res, next) {
          var fn = target[next];
          var parentFn = srcToExt.prototype[next];

          if (fn && parentFn) {
            res[next] = function () {
              parentFn.bind(this).apply(void 0, arguments);
              fn.bind(this).apply(void 0, arguments);
            };
          }

          return res;
        }, {});
      }; // If the model/view is a simple object I need to extend it


      if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(model) === 'object') {
        methods.model = modelToExt.extend(_objectSpread({}, model, {}, getExtendedObj(extendFn, model, modelToExt), {
          defaults: _objectSpread({}, modelToExt.prototype.defaults, {}, Object(underscore__WEBPACK_IMPORTED_MODULE_3__["result"])(model, 'defaults') || {})
        }), {
          isComponent: compType && !extendType && !isComponent ? modelToExt.isComponent : isComponent || function () {
            return 0;
          }
        });
      }

      if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(view) === 'object') {
        methods.view = viewToExt.extend(_objectSpread({}, view, {}, getExtendedObj(extendFnView, view, viewToExt)));
      }

      if (compType) {
        compType.model = methods.model;
        compType.view = methods.view;
      } else {
        methods.id = type;
        componentTypes.unshift(methods);
      }

      var event = "component:type:".concat(compType ? 'update' : 'add');
      em && em.trigger(event, compType || methods);
      return this;
    },

    /**
     * Get component type.
     * Read more about this in [Define New Component](https://grapesjs.com/docs/modules/Components.html#define-new-component)
     * @param {string} type Component ID
     * @return {Object} Component type defintion, eg. `{ model: ..., view: ... }`
     */
    getType: function getType(type) {
      var df = componentTypes;

      for (var it = 0; it < df.length; it++) {
        var dfId = df[it].id;

        if (dfId == type) {
          return df[it];
        }
      }

      return;
    },

    /**
     * Remove component type
     * @param {string} type Component ID
     * @returns {Object|undefined} Removed component type, undefined otherwise
     */
    removeType: function removeType(id) {
      var df = componentTypes;
      var type = this.getType(id);
      if (!type) return;
      var index = df.indexOf(type);
      df.splice(index, 1);
      return type;
    },

    /**
     * Return the array of all types
     * @return {Array}
     */
    getTypes: function getTypes() {
      return componentTypes;
    },
    selectAdd: function selectAdd(component) {
      var _this3 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (component) {
        component.set({
          status: 'selected'
        });
        ['component:selected', 'component:toggled'].forEach(function (event) {
          return _this3.em.trigger(event, component, opts);
        });
      }
    },
    selectRemove: function selectRemove(component) {
      var _this4 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (component) {
        var _em2 = this.em;
        component.set({
          status: '',
          state: ''
        });
        ['component:deselected', 'component:toggled'].forEach(function (event) {
          return _this4.em.trigger(event, component, opts);
        });
      }
    },

    /**
     * Triggered when the component is hovered
     * @private
     */
    componentHovered: function componentHovered() {
      var em = c.em;
      var model = em.get('componentHovered');
      var previous = em.previous('componentHovered');
      var state = 'hovered'; // Deselect the previous component

      previous && previous.get('status') == state && previous.set({
        status: '',
        state: ''
      });
      model && Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isEmpty"])(model.get('status')) && model.set('status', state);
    }
  };
});

/***/ }),

/***/ "./src/dom_components/model/Component.js":
/*!***********************************************!*\
  !*** ./src/dom_components/model/Component.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var domain_abstract_model_Styleable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! domain_abstract/model/Styleable */ "./src/domain_abstract/model/Styleable.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Components */ "./src/dom_components/model/Components.js");
/* harmony import */ var selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! selector_manager/model/Selector */ "./src/selector_manager/model/Selector.js");
/* harmony import */ var selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! selector_manager/model/Selectors */ "./src/selector_manager/model/Selectors.js");
/* harmony import */ var trait_manager_model_Traits__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! trait_manager/model/Traits */ "./src/trait_manager/model/Traits.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









var componentList = {};
var componentIndex = 0;

var escapeRegExp = function escapeRegExp(str) {
  return str.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
};

var avoidInline = function avoidInline(em) {
  return em && em.getConfig('avoidInlineStyle');
};
/**
 * The Component object represents a single node of our template structure, so when you update its properties the changes are
 * immediately reflected on the canvas and in the code to export (indeed, when you ask to export the code we just go through all
 * the tree of nodes).
 * An example on how to update properties:
 * ```js
 * component.set({
 *  tagName: 'span',
 *  attributes: { ... },
 *  removable: false,
 * });
 * component.get('tagName');
 * // -> 'span'
 * ```
 *
 * @typedef Component
 * @property {String} [type=''] Component type, eg. `text`, `image`, `video`, etc.
 * @property {String} [tagName='div'] HTML tag of the component, eg. `span`. Default: `div`
 * @property {Object} [attributes={}] Key-value object of the component's attributes, eg. `{ title: 'Hello' }` Default: `{}`
 * @property {String} [name=''] Name of the component. Will be used, for example, in Layers and badges
 * @property {Boolean} [removable=true] When `true` the component is removable from the canvas, default: `true`
 * @property {Boolean|String} [draggable=true] Indicates if it's possible to drag the component inside others.
 *  You can also specify a query string to indentify elements,
 *  eg. `'.some-class[title=Hello], [data-gjs-type=column]'` means you can drag the component only inside elements
 *  containing `some-class` class and `Hello` title, and `column` components. Default: `true`
 * @property {Boolean|String} [droppable=true] Indicates if it's possible to drop other components inside. You can use
 * a query string as with `draggable`. Default: `true`
 * @property {Boolean} [badgable=true] Set to false if you don't want to see the badge (with the name) over the component. Default: `true`
 * @property {Boolean|Array<String>} [stylable=true] True if it's possible to style the component.
 * You can also indicate an array of CSS properties which is possible to style, eg. `['color', 'width']`, all other properties
 * will be hidden from the style manager. Default: `true`
 * @property {Array<String>} [stylable-require=[]] Indicate an array of style properties to show up which has been marked as `toRequire`. Default: `[]`
 * @property {Array<String>} [unstylable=[]] Indicate an array of style properties which should be hidden from the style manager. Default: `[]`
 * @property {Array<String>} [style-signature=''] This option comes handy when you need to remove or export strictly component-specific rules. Be default, if this option is not empty, the editor will remove rules when there are no components, of that type, in the canvas. Eg. '['.navbar', '[navbar-']'. Default: `''`
 * @property {Boolean} [highlightable=true] It can be highlighted with 'dotted' borders if true. Default: `true`
 * @property {Boolean} [copyable=true] True if it's possible to clone the component. Default: `true`
 * @property {Boolean} [resizable=false] Indicates if it's possible to resize the component. It's also possible to pass an object as [options for the Resizer](https://github.com/artf/grapesjs/blob/master/src/utils/Resizer.js). Default: `false`
 * @property {Boolean} [editable=false] Allow to edit the content of the component (used on Text components). Default: `false`
 * @property {Boolean} [layerable=true] Set to `false` if you need to hide the component inside Layers. Default: `true`
 * @property {Boolean} [selectable=true] Allow component to be selected when clicked. Default: `true`
 * @property {Boolean} [hoverable=true] Shows a highlight outline when hovering on the element if `true`. Default: `true`
 * @property {Boolean} [void=false] This property is used by the HTML exporter as void elements don't have closing tags, eg. `<br/>`, `<hr/>`, etc. Default: `false`
 * @property {String} [content=''] Content of the component (not escaped) which will be appended before children rendering. Default: `''`
 * @property {String} [icon=''] Component's icon, this string will be inserted before the name (in Layers and badge), eg. it can be an HTML string '<i class="fa fa-square-o"></i>'. Default: `''`
 * @property {String|Function} [script=''] Component's javascript. More about it [here](/modules/Components-js.html). Default: `''`
 * @property {String|Function} [script-export=''] You can specify javascript available only in export functions (eg. when you get the HTML).
 * If this property is defined it will overwrite the `script` one (in export functions). Default: `''`
 * @property {Array<Object|String>} [traits=''] Component's traits. More about it [here](/modules/Traits.html). Default: `['id', 'title']`
 * @property {Array<String>} [propagate=[]] Indicates an array of properties which will be inhereted by all NEW appended children.
 *  For example if you create a component likes this: `{ removable: false, draggable: false, propagate: ['removable', 'draggable'] }`
 *  and append some new component inside, the new added component will get the exact same properties indicated in the `propagate` array (and the `propagate` property itself). Default: `[]`
 * @property {Array<Object>} [toolbar=null] Set an array of items to show up inside the toolbar when the component is selected (move, clone, delete).
 * Eg. `toolbar: [ { attributes: {class: 'fa fa-arrows'}, command: 'tlb-move' }, ... ]`.
 * By default, when `toolbar` property is falsy the editor will add automatically commands like `move`, `delete`, etc. based on its properties.
 * @property {Collection<Component>} [components=null] Children components. Default: `null`
 */


var Component = backbone__WEBPACK_IMPORTED_MODULE_5___default.a.Model.extend(domain_abstract_model_Styleable__WEBPACK_IMPORTED_MODULE_4__["default"]).extend({
  defaults: {
    tagName: 'div',
    type: '',
    name: '',
    removable: true,
    draggable: true,
    droppable: true,
    badgable: true,
    stylable: true,
    'stylable-require': '',
    'style-signature': '',
    unstylable: '',
    highlightable: true,
    copyable: true,
    resizable: false,
    editable: false,
    layerable: true,
    selectable: true,
    hoverable: true,
    void: false,
    state: '',
    // Indicates if the component is in some CSS state like ':hover', ':active', etc.
    status: '',
    // State, eg. 'selected'
    content: '',
    icon: '',
    style: '',
    // Component related style
    classes: '',
    // Array of classes
    script: '',
    'script-export': '',
    attributes: '',
    traits: ['id', 'title'],
    propagate: '',
    dmode: '',
    toolbar: null
  },

  /**
   * Hook method, called once the model is created
   */
  init: function init() {},

  /**
   * Hook method, called when the model has been updated (eg. updated some model's property)
   * @param {String} property Property name, if triggered after some property update
   * @param {*} value Property value, if triggered after some property update
   * @param {*} previous Property previous value, if triggered after some property update
   */
  updated: function updated(property, value, previous) {},

  /**
   * Hook method, called once the model has been removed
   */
  removed: function removed() {},
  initialize: function initialize() {
    var _this = this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var em = opt.em; // Propagate properties from parent if indicated

    var parent = this.parent();
    var parentAttr = parent && parent.attributes;

    if (parentAttr && parentAttr.propagate) {
      var newAttr = {};
      var toPropagate = parentAttr.propagate;
      toPropagate.forEach(function (prop) {
        return newAttr[prop] = parent.get(prop);
      });
      newAttr.propagate = toPropagate;
      newAttr = _objectSpread({}, newAttr, {}, props);
      this.set(newAttr);
    }

    var propagate = this.get('propagate');
    propagate && this.set('propagate', Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(propagate) ? propagate : [propagate]); // Check void elements

    if (opt && opt.config && opt.config.voidElements.indexOf(this.get('tagName')) >= 0) {
      this.set('void', true);
    }

    opt.em = em;
    this.opt = opt;
    this.em = em;
    this.config = opt.config || {};
    this.set('attributes', _objectSpread({}, this.defaults.attributes || {}, {}, this.get('attributes') || {}));
    this.ccid = Component.createId(this);
    this.initClasses();
    this.initTraits();
    this.initComponents();
    this.initToolbar();
    this.listenTo(this, 'change:script', this.scriptUpdated);
    this.listenTo(this, 'change:tagName', this.tagUpdated);
    this.listenTo(this, 'change:attributes', this.attrUpdated);
    this.set('status', ''); // Register global updates for collection properties

    ['classes', 'traits', 'components'].forEach(function (name) {
      var events = "add remove ".concat(name !== 'components' ? 'change' : '');

      _this.listenTo(_this.get(name), events.trim(), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this.emitUpdate.apply(_this, [name].concat(args));
      });
    });

    if (!opt.temporary) {
      this.init();
      em && em.trigger('component:create', this);
    }
  },

  /**
   * Check component's type
   * @param  {string}  type Component type
   * @return {Boolean}
   * @example
   * component.is('image')
   * // -> false
   */
  is: function is(type) {
    return !!(this.get('type') == type);
  },

  /**
   * Return all the propeties
   * @returns {Object}
   */
  props: function props() {
    return this.attributes;
  },

  /**
   * Get the index of the component in the parent collection.
   * @return {Number}
   */
  index: function index() {
    var collection = this.collection;
    return collection && collection.indexOf(this);
  },

  /**
   * Change the drag mode of the component.
   * To get more about this feature read: https://github.com/artf/grapesjs/issues/1936
   * @param {String} value Drag mode, options: 'absolute' | 'translate'
   * @returns {this}
   */
  setDragMode: function setDragMode(value) {
    return this.set('dmode', value);
  },

  /**
   * Find inner components by query string.
   * **ATTENTION**: this method works only with already rendered component
   * @param  {String} query Query string
   * @return {Array} Array of components
   * @example
   * component.find('div > .class');
   * // -> [Component, Component, ...]
   */
  find: function find(query) {
    var result = [];
    this.view.$el.find(query).each(function (el, i, $els) {
      var $el = $els.eq(i);
      var model = $el.data('model');
      model && result.push(model);
    });
    return result;
  },

  /**
   * Find all inner components by component id.
   * The advantage of this method over `find` is that you can use it
   * also before rendering the component
   * @param {String} id Component id
   * @returns {Array<Component>}
   * @example
   * const allImages = component.findType('image');
   * console.log(allImages[0]) // prints the first found component
   */
  findType: function findType(id) {
    var result = [];

    var find = function find(components) {
      return components.forEach(function (item) {
        item.is(id) && result.push(item);
        find(item.components());
      });
    };

    find(this.components());
    return result;
  },

  /**
   * Find the closest parent component by query string.
   * **ATTENTION**: this method works only with already rendered component
   * @param  {string} query Query string
   * @return {Component}
   * @example
   * component.closest('div.some-class');
   * // -> Component
   */
  closest: function closest(query) {
    var result = this.view.$el.closest(query);
    return result.length && result.data('model');
  },

  /**
   * Once the tag is updated I have to remove the node and replace it
   * @private
   */
  tagUpdated: function tagUpdated() {
    var coll = this.collection;
    var at = coll.indexOf(this);
    coll.remove(this);
    coll.add(this, {
      at: at
    });
  },

  /**
   * Replace a component with another one
   * @param {String|Component} el Component or HTML string
   * @return {Component|Array<Component>} New added component/s
   * @example
   * component.replaceWith('<div>Some new content</div>');
   * // -> Component
   */
  replaceWith: function replaceWith(el) {
    var coll = this.collection;
    var at = coll.indexOf(this);
    coll.remove(this);
    return coll.add(el, {
      at: at
    });
  },

  /**
   * Emit changes for each updated attribute
   * @private
   */
  attrUpdated: function attrUpdated() {
    this.setAttributes(this.get('attributes'), {
      silent: 1
    });
  },

  /**
   * Update attributes of the component
   * @param {Object} attrs Key value attributes
   * @return {this}
   * @example
   * component.setAttributes({ id: 'test', 'data-key': 'value' });
   */
  setAttributes: function setAttributes(attrs) {
    var _this2 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    attrs = _objectSpread({}, attrs); // Handle classes

    var classes = attrs.class;
    classes && this.setClass(classes);
    delete attrs.class; // Handle style

    var style = attrs.style;
    style && this.setStyle(style);
    delete attrs.style;
    this.set('attributes', attrs, opts);

    var attrPrev = _objectSpread({}, this.previous('attributes'));

    var diff = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["shallowDiff"])(attrPrev, attrs);
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["keys"])(diff).forEach(function (pr) {
      return _this2.trigger("change:attributes:".concat(pr), _this2, diff[pr]);
    });
    return this;
  },

  /**
   * Add attributes to the component
   * @param {Object} attrs Key value attributes
   * @return {this}
   * @example
   * component.addAttributes({ 'data-key': 'value' });
   */
  addAttributes: function addAttributes(attrs) {
    var newAttrs = _objectSpread({}, this.getAttributes(), {}, attrs);

    this.setAttributes(newAttrs);
    return this;
  },

  /**
   * Get the style of the component
   * @return {Object}
   */
  getStyle: function getStyle() {
    var em = this.em;

    if (em && em.getConfig('avoidInlineStyle')) {
      var state = this.get('state');
      var cc = em.get('CssComposer');
      var rule = cc.getIdRule(this.getId(), {
        state: state
      });
      this.rule = rule;

      if (rule) {
        return rule.getStyle();
      }
    }

    return domain_abstract_model_Styleable__WEBPACK_IMPORTED_MODULE_4__["default"].getStyle.call(this);
  },

  /**
   * Set the style on the component
   * @param {Object} prop Key value style object
   * @return {Object}
   * @example
   * component.setStyle({ color: 'red' });
   */
  setStyle: function setStyle() {
    var _this3 = this;

    var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var em = this.em;
    var opt = this.opt;

    if (em && em.getConfig('avoidInlineStyle') && !opt.temporary) {
      prop = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(prop) ? this.parseStyle(prop) : prop;
      prop = _objectSpread({}, prop, {}, this.get('style'));
      var state = this.get('state');
      var cc = em.get('CssComposer');
      var propOrig = this.getStyle();
      this.rule = cc.setIdRule(this.getId(), prop, _objectSpread({}, opts, {
        state: state
      }));
      var diff = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["shallowDiff"])(propOrig, prop);
      this.set('style', {}, {
        silent: 1
      });
      Object(underscore__WEBPACK_IMPORTED_MODULE_2__["keys"])(diff).forEach(function (pr) {
        return _this3.trigger("change:style:".concat(pr));
      });
    } else {
      prop = domain_abstract_model_Styleable__WEBPACK_IMPORTED_MODULE_4__["default"].setStyle.apply(this, arguments);
    }

    return prop;
  },

  /**
   * Return all component's attributes
   * @return {Object}
   */
  getAttributes: function getAttributes() {
    var em = this.em;
    var classes = [];

    var attributes = _objectSpread({}, this.get('attributes'));

    var sm = em && em.get('SelectorManager');
    var id = this.getId(); // Add classes

    this.get('classes').forEach(function (cls) {
      return classes.push(Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(cls) ? cls : cls.get('name'));
    });
    classes.length && (attributes.class = classes.join(' ')); // Check if we need an ID on the component

    if (!Object(underscore__WEBPACK_IMPORTED_MODULE_2__["has"])(attributes, 'id')) {
      var hasStyle; // If we don't rely on inline styling we have to check
      // for the ID selector

      if (avoidInline(em)) {
        hasStyle = sm && sm.get(id, sm.Selector.TYPE_ID);
      } else if (!Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(this.getStyle())) {
        hasStyle = 1;
      }

      if (hasStyle) {
        attributes.id = this.getId();
      }
    }

    return attributes;
  },

  /**
   * Add classes
   * @param {Array<String>|String} classes Array or string of classes
   * @return {Array} Array of added selectors
   * @example
   * model.addClass('class1');
   * model.addClass('class1 class2');
   * model.addClass(['class1', 'class2']);
   * // -> [SelectorObject, ...]
   */
  addClass: function addClass(classes) {
    var added = this.em.get('SelectorManager').addClass(classes);
    return this.get('classes').add(added);
  },

  /**
   * Set classes (resets current collection)
   * @param {Array<String>|String} classes Array or string of classes
   * @return {Array} Array of added selectors
   * @example
   * model.setClass('class1');
   * model.setClass('class1 class2');
   * model.setClass(['class1', 'class2']);
   * // -> [SelectorObject, ...]
   */
  setClass: function setClass(classes) {
    this.get('classes').reset();
    return this.addClass(classes);
  },

  /**
   * Remove classes
   * @param {Array<String>|String} classes Array or string of classes
   * @return {Array} Array of removed selectors
   * @example
   * model.removeClass('class1');
   * model.removeClass('class1 class2');
   * model.removeClass(['class1', 'class2']);
   * // -> [SelectorObject, ...]
   */
  removeClass: function removeClass(classes) {
    var removed = [];
    classes = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(classes) ? classes : [classes];
    var selectors = this.get('classes');
    var type = selector_manager_model_Selector__WEBPACK_IMPORTED_MODULE_7__["default"].TYPE_CLASS;
    classes.forEach(function (classe) {
      var classes = classe.split(' ');
      classes.forEach(function (name) {
        var selector = selectors.where({
          name: name,
          type: type
        })[0];
        selector && removed.push(selectors.remove(selector));
      });
    });
    return removed;
  },

  /**
   * Returns component's classes as an array of strings
   * @return {Array}
   */
  getClasses: function getClasses() {
    var attr = this.getAttributes();
    var classStr = attr.class;
    return classStr ? classStr.split(' ') : [];
  },
  initClasses: function initClasses() {
    var event = 'change:classes';
    var toListen = [this, event, this.initClasses];
    var cls = this.get('classes') || [];
    var clsArr = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(cls) ? cls.split(' ') : cls;
    this.stopListening.apply(this, toListen);
    var classes = this.normalizeClasses(clsArr);
    var selectors = new selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_8__["default"]([]);
    this.set('classes', selectors);
    selectors.add(classes);
    this.listenTo.apply(this, toListen);
    return this;
  },
  initComponents: function initComponents() {
    var event = 'change:components';
    var toListen = [this, event, this.initComponents];
    this.stopListening.apply(this, toListen); // Have to add components after the init, otherwise the parent
    // is not visible

    var comps = new _Components__WEBPACK_IMPORTED_MODULE_6__["default"](null, this.opt);
    comps.parent = this;
    var components = this.get('components');
    var addChild = !this.opt.avoidChildren;
    this.set('components', comps);
    addChild && comps.add(Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(components) ? components(this) : components);
    this.listenTo.apply(this, toListen);
    return this;
  },
  initTraits: function initTraits(changed) {
    var em = this.em;
    var event = 'change:traits';
    var toListen = [this, event, this.initTraits];
    this.stopListening.apply(this, toListen);
    this.loadTraits();

    var attrs = _objectSpread({}, this.get('attributes'));

    var traits = this.get('traits');
    traits.each(function (trait) {
      if (!trait.get('changeProp')) {
        var name = trait.get('name');
        var value = trait.getInitValue();
        if (name && value) attrs[name] = value;
      }
    });
    traits.length && this.set('attributes', attrs);
    this.listenTo.apply(this, toListen);
    changed && em && em.trigger('component:toggled');
    return this;
  },

  /**
   * Add new component children
   * @param  {Component|String} components Component to add
   * @param {Object} [opts={}] Options, same as in `model.add()`(from backbone)
   * @return {Array} Array of appended components
   * @example
   * someComponent.get('components').length // -> 0
   * const videoComponent = someComponent.append('<video></video><div></div>')[0];
   * // This will add 2 components (`video` and `div`) to your `someComponent`
   * someComponent.get('components').length // -> 2
   * // You can pass components directly
   * otherComponent.append(otherComponent2);
   * otherComponent.append([otherComponent3, otherComponent4]);
   */
  append: function append(components) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var result = this.components().add(components, opts);
    return Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(result) ? result : [result];
  },

  /**
   * Set new collection if `components` are provided, otherwise the
   * current collection is returned
   * @param  {Component|String} [components] Components to set
   * @return {Collection|Array<Component>}
   * @example
   * // Set new collection
   * component.components('<span></span><div></div>');
   * // Get current collection
   * const collection = component.components();
   * console.log(collection.length);
   * // -> 2
   */
  components: function components(_components) {
    var coll = this.get('components');

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(_components)) {
      return coll;
    } else {
      coll.reset();
      return _components && this.append(_components);
    }
  },

  /**
   * Get the parent component, if exists
   * @return {Component}
   * @example
   * component.parent();
   * // -> Component
   */
  parent: function parent() {
    var coll = this.collection;
    return coll && coll.parent;
  },

  /**
   * Script updated
   * @private
   */
  scriptUpdated: function scriptUpdated() {
    this.set('scriptUpdated', 1);
  },

  /**
   * Init toolbar
   * @private
   */
  initToolbar: function initToolbar() {
    var em = this.em;
    var model = this;
    var ppfx = em && em.getConfig('stylePrefix') || '';

    if (!model.get('toolbar')) {
      var tb = [];

      if (model.collection) {
        tb.push({
          attributes: {
            class: 'fa fa-arrow-up'
          },
          command: function command(ed) {
            return ed.runCommand('core:component-exit', {
              force: 1
            });
          }
        });
      }

      if (model.get('draggable')) {
        tb.push({
          attributes: {
            class: "fa fa-arrows ".concat(ppfx, "no-touch-actions"),
            draggable: true
          },
          //events: hasDnd(this.em) ? { dragstart: 'execCommand' } : '',
          command: 'tlb-move'
        });
      }

      if (model.get('copyable')) {
        tb.push({
          attributes: {
            class: 'fa fa-clone'
          },
          command: 'tlb-clone'
        });
      }

      if (model.get('removable')) {
        tb.push({
          attributes: {
            class: 'fa fa-trash-o'
          },
          command: 'tlb-delete'
        });
      }

      model.set('toolbar', tb);
    }
  },

  /**
   * Load traits
   * @param  {Array} traits
   * @private
   */
  loadTraits: function loadTraits(traits) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    traits = traits || this.get('traits');
    traits = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(traits) ? traits(this) : traits;

    if (!(traits instanceof trait_manager_model_Traits__WEBPACK_IMPORTED_MODULE_9__["default"])) {
      var trt = new trait_manager_model_Traits__WEBPACK_IMPORTED_MODULE_9__["default"]([], this.opt);
      trt.setTarget(this);

      if (traits.length) {
        traits.forEach(function (tr) {
          return tr.attributes && delete tr.attributes.value;
        });
        trt.add(traits);
      }

      this.set('traits', trt, opts);
    }

    return this;
  },

  /**
   * Get the trait by id/name
   * @param  {String} id The `id` or `name` of the trait
   * @return {Trait} Trait model
   * @example
   * const traitTitle = component.getTrait('title');
   * traitTitle && traitTitle.set('label', 'New label');
   */
  getTrait: function getTrait(id) {
    return this.get('traits').filter(function (trait) {
      return trait.get('id') === id || trait.get('name') === id;
    })[0];
  },

  /**
   * Update a trait
   * @param  {String} id The `id` or `name` of the trait
   * @param  {Object} props Object with the props to update
   * @return {this}
   * @example
   * component.updateTrait('title', {
   *  type: 'select',
   *  options: [ 'Option 1', 'Option 2' ],
   * });
   */
  updateTrait: function updateTrait(id, props) {
    var em = this.em;
    var trait = this.getTrait(id);
    trait && trait.set(props);
    em && em.trigger('component:toggled');
    return this;
  },

  /**
   * Get the trait position index by id/name. Useful in case you want to
   * replace some trait, at runtime, with something else.
   * @param  {String} id The `id` or `name` of the trait
   * @return {Number} Index position of the current trait
   * @example
   * const traitTitle = component.getTraitIndex('title');
   * console.log(traitTitle); // 1
   */
  getTraitIndex: function getTraitIndex(id) {
    var trait = this.getTrait(id);
    return trait ? this.get('traits').indexOf(trait) : trait;
  },

  /**
   * Remove trait/s by id/s.
   * @param  {String|Array<String>} id The `id`/`name` of the trait (or an array)
   * @return {Array} Array of removed traits
   * @example
   * component.removeTrait('title');
   * component.removeTrait(['title', 'id']);
   */
  removeTrait: function removeTrait(id) {
    var _this4 = this;

    var em = this.em;
    var ids = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(id) ? id : [id];
    var toRemove = ids.map(function (id) {
      return _this4.getTrait(id);
    });
    var removed = this.get('traits').remove(toRemove);
    em && em.trigger('component:toggled');
    return removed;
  },

  /**
   * Add trait/s by id/s.
   * @param  {String|Object|Array<String|Object>} trait Trait to add (or an array of traits)
   * @param  {Options} opts Options for the add
   * @return {Array} Array of added traits
   * @example
   * component.addTrait('title', { at: 1 }); // Add title trait (`at` option is the position index)
   * component.addTrait({
   *  type: 'checkbox',
   *  name: 'disabled',
   * });
   * component.addTrait(['title', {...}, ...]);
   */
  addTrait: function addTrait(trait) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var em = this.em;
    var added = this.get('traits').add(trait, opts);
    em && em.trigger('component:toggled');
    return added;
  },

  /**
   * Normalize input classes from array to array of objects
   * @param {Array} arr
   * @return {Array}
   * @private
   */
  normalizeClasses: function normalizeClasses(arr) {
    var res = [];
    var em = this.em;
    if (!em) return;
    var clm = em.get('SelectorManager');
    if (!clm) return;
    arr.forEach(function (val) {
      var name = '';
      if (typeof val === 'string') name = val;else name = val.name;
      var model = clm.add(name);
      res.push(model);
    });
    return res;
  },

  /**
   * Override original clone method
   * @private
   */
  clone: function clone() {
    var em = this.em;
    var style = this.getStyle();

    var attr = _objectSpread({}, this.attributes);

    var opts = _objectSpread({}, this.opt);

    attr.attributes = _objectSpread({}, attr.attributes);
    delete attr.attributes.id;
    attr.components = [];
    attr.classes = [];
    attr.traits = [];
    this.get('components').each(function (md, i) {
      attr.components[i] = md.clone();
    });
    this.get('traits').each(function (md, i) {
      attr.traits[i] = md.clone();
    });
    this.get('classes').each(function (md, i) {
      attr.classes[i] = md.get('name');
    });
    attr.status = '';
    attr.view = '';
    opts.collection = null;

    if (em && em.getConfig('avoidInlineStyle') && !Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(style)) {
      attr.style = style;
    }

    var cloned = new this.constructor(attr, opts);
    var event = 'component:clone';
    em && em.trigger(event, cloned);
    this.trigger(event, cloned);
    return cloned;
  },

  /**
   * Get the name of the component
   * @return {String}
   * */
  getName: function getName() {
    var customName = this.get('name') || this.get('custom-name');
    var tag = this.get('tagName');
    tag = tag == 'div' ? 'box' : tag;
    var name = this.get('type') || tag;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    return customName || name;
  },

  /**
   * Get the icon string
   * @return {String}
   */
  getIcon: function getIcon() {
    var icon = this.get('icon');
    return icon ? icon + ' ' : '';
  },

  /**
   * Return HTML string of the component
   * @param {Object} [opts={}] Options
   * @param {Object|Function} [opts.attributes=null] You can pass an object of custom attributes to replace
   * with the current one or you can even pass a function to generate attributes dynamically
   * @return {String} HTML string
   * @example
   * // Simple HTML return
   * component.set({ tagName: 'span' });
   * component.setAttributes({ title: 'Hello' });
   * component.toHTML();
   * // -> <span title="Hello"></span>
   *
   * // Custom attributes
   * component.toHTML({ attributes: { 'data-test': 'Hello' } });
   * // -> <span data-test="Hello"></span>
   *
   * // Custom dynamic attributes
   * component.toHTML({
   *  attributes(component, attributes) {
   *    if (component.get('tagName') == 'span') {
   *      attributes.title = 'Custom attribute';
   *    }
   *    return attributes;
   *  },
   * });
   * // -> <span title="Custom attribute"></span>
   */
  toHTML: function toHTML() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = this;
    var attrs = [];
    var classes = [];
    var tag = model.get('tagName');
    var sTag = model.get('void');
    var customAttr = opts.attributes;
    var attributes = this.getAttrToHTML(); // Get custom attributes if requested

    if (customAttr) {
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(customAttr)) {
        attributes = customAttr(model, attributes) || {};
      } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isObject"])(customAttr)) {
        attributes = customAttr;
      }
    }

    for (var attr in attributes) {
      var val = attributes[attr];
      var value = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(val) ? val.replace(/"/g, '&quot;') : val;

      if (!Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value)) {
        if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isBoolean"])(value)) {
          value && attrs.push(attr);
        } else {
          attrs.push("".concat(attr, "=\"").concat(value, "\""));
        }
      }
    }

    var attrString = attrs.length ? " ".concat(attrs.join(' ')) : '';
    var code = "<".concat(tag).concat(attrString).concat(sTag ? '/' : '', ">").concat(model.get('content'));
    model.get('components').each(function (comp) {
      return code += comp.toHTML(opts);
    });
    !sTag && (code += "</".concat(tag, ">"));
    return code;
  },

  /**
   * Returns object of attributes for HTML
   * @return {Object}
   * @private
   */
  getAttrToHTML: function getAttrToHTML() {
    var attr = this.getAttributes();
    delete attr.style;
    return attr;
  },

  /**
   * Return a shallow copy of the model's attributes for JSON
   * stringification.
   * @return {Object}
   * @private
   */
  toJSON: function toJSON() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var obj = backbone__WEBPACK_IMPORTED_MODULE_5___default.a.Model.prototype.toJSON.apply(this, args);
    obj.attributes = this.getAttributes();
    delete obj.attributes.class;
    delete obj.toolbar;
    delete obj.traits;

    if (this.em.getConfig('avoidDefaults')) {
      var defaults = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["result"])(this, 'defaults');
      Object(underscore__WEBPACK_IMPORTED_MODULE_2__["forEach"])(defaults, function (value, key) {
        if (['type', 'content'].indexOf(key) === -1 && obj[key] === value) {
          delete obj[key];
        }
      });

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(obj.type)) {
        delete obj.type;
      }

      Object(underscore__WEBPACK_IMPORTED_MODULE_2__["forEach"])(['attributes', 'style'], function (prop) {
        if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(defaults[prop]) && Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(obj[prop])) {
          delete obj[prop];
        }
      });
      Object(underscore__WEBPACK_IMPORTED_MODULE_2__["forEach"])(['classes', 'components'], function (prop) {
        if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(defaults[prop]) && !obj[prop].length) {
          delete obj[prop];
        }
      });
    }

    return obj;
  },

  /**
   * Return the component id
   * @return {String}
   */
  getId: function getId() {
    var attrs = this.get('attributes') || {};
    return attrs.id || this.ccid || this.cid;
  },

  /**
   * Set new id on the component
   * @param {String} id
   * @return {this}
   */
  setId: function setId(id) {
    var attrs = _objectSpread({}, this.get('attributes'));

    attrs.id = id;
    this.set('attributes', attrs);
    return this;
  },

  /**
   * Get the DOM element of the component.
   * This works only if the component is already rendered
   * @return {HTMLElement}
   */
  getEl: function getEl() {
    return this.view && this.view.el;
  },

  /**
   * Get the View of the component.
   * This works only if the component is already rendered
   * @return {ComponentView}
   */
  getView: function getView() {
    return this.view;
  },

  /**
   * Return script in string format, cleans 'function() {..' from scripts
   * if it's a function
   * @param {string|Function} script
   * @return {string}
   * @private
   */
  getScriptString: function getScriptString(script) {
    var _this5 = this;

    var scr = script || this.get('script');

    if (!scr) {
      return scr;
    } // Need to convert script functions to strings


    if (typeof scr == 'function') {
      var scrStr = scr.toString().trim();
      scrStr = scrStr.replace(/^function[\s\w]*\(\)\s?\{/, '').replace(/\}$/, '');
      scr = scrStr.trim();
    }

    var config = this.em.getConfig();
    var tagVarStart = escapeRegExp(config.tagVarStart || '{[ ');
    var tagVarEnd = escapeRegExp(config.tagVarEnd || ' ]}');
    var reg = new RegExp("".concat(tagVarStart, "([\\w\\d-]*)").concat(tagVarEnd), 'g');
    scr = scr.replace(reg, function (match, v) {
      // If at least one match is found I have to track this change for a
      // better optimization inside JS generator
      _this5.scriptUpdated();

      var result = _this5.attributes[v] || '';
      return Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(result) || _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(result) == 'object' ? JSON.stringify(result) : result;
    });
    return scr;
  },
  emitUpdate: function emitUpdate(property) {
    var em = this.em;
    var event = 'component:update' + (property ? ":".concat(property) : '');

    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    property && this.updated.apply(this, [property, property && this.get(property), property && this.previous(property)].concat(args));
    this.trigger.apply(this, [event].concat(args));
    em && em.trigger.apply(em, [event, this].concat(args));
  },

  /**
   * Execute callback function on itself and all inner components
   * @param  {Function} clb Callback function, the model is passed as an argument
   * @return {this}
   * @example
   * component.onAll(component => {
   *  // do something with component
   * })
   */
  onAll: function onAll(clb) {
    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(clb)) {
      clb(this);
      this.components().forEach(function (model) {
        return model.onAll(clb);
      });
    }

    return this;
  },

  /**
   * Remove the component
   * @return {this}
   */
  remove: function remove() {
    var coll = this.collection;
    return coll && coll.remove(this);
  },

  /**
   * Reset id of the component and any of its style rule
   * @param {Object} [opts={}] Options
   * @return {this}
   * @private
   */
  resetId: function resetId() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var em = this.em;
    var oldId = this.getId();
    if (!oldId) return;
    var newId = Component.createId(this);
    this.setId(newId);
    var rule = em && em.get('CssComposer').getIdRule(oldId);
    var selector = rule && rule.get('selectors').at(0);
    selector && selector.set('name', newId);
    return this;
  }
}, {
  /**
   * Detect if the passed element is a valid component.
   * In case the element is valid an object abstracted
   * from the element will be returned
   * @param {HTMLElement}
   * @return {Object}
   * @private
   */
  isComponent: function isComponent(el) {
    return {
      tagName: el.tagName ? el.tagName.toLowerCase() : ''
    };
  },

  /**
   * Relying simply on the number of components becomes a problem when you
   * store and load them back, you might hit collisions with new components
   * @param  {Model} model
   * @return {string}
   * @private
   */
  createId: function createId(model) {
    var list = Component.getList(model);

    var _model$get = model.get('attributes'),
        id = _model$get.id;

    var nextId;

    if (id) {
      nextId = Component.getIncrementId(id, list);
      model.setId(nextId);
    } else {
      nextId = Component.getNewId(list);
    }

    list[nextId] = model;
    return nextId;
  },
  getNewId: function getNewId(list) {
    var count = Object.keys(list).length; // Testing 1000000 components with `+ 2` returns 0 collisions

    var ilen = count.toString().length + 2;
    var uid = (Math.random() + 1.1).toString(36).slice(-ilen);
    var newId = "i".concat(uid);

    while (list[newId]) {
      newId = Component.getNewId(list);
    }

    return newId;
  },
  getIncrementId: function getIncrementId(id, list) {
    var counter = 1;
    var newId = id;

    while (list[newId]) {
      counter++;
      newId = "".concat(id, "-").concat(counter);
    }

    return newId;
  },

  /**
   * The list of components is taken from the Components module.
   * Initially, the list, was set statically on the Component object but it was
   * not ok, as it was shared between multiple editor instances
   */
  getList: function getList(model) {
    var domc = model.opt && model.opt.domc;
    return domc ? domc.componentsById : {};
  },

  /**
   * This method checks, for each parsed component and style object
   * (are not Components/CSSRules yet), for duplicated id and fixes them
   * This method is used in Components.js just after the parsing
   */
  checkId: function checkId(components) {
    var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var list = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var comps = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(components) ? components : [components];
    comps.forEach(function (comp) {
      var _comp$attributes = comp.attributes,
          attributes = _comp$attributes === void 0 ? {} : _comp$attributes,
          components = comp.components;
      var id = attributes.id; // Check if we have collisions with current components

      if (id && list[id]) {
        var newId = Component.getIncrementId(id, list);
        attributes.id = newId; // Update passed styles

        Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(styles) && styles.forEach(function (style) {
          var selectors = style.selectors;
          selectors.forEach(function (sel, idx) {
            if (sel === "#".concat(id)) selectors[idx] = "#".concat(newId);
          });
        });
      }

      components && Component.checkId(components, styles, list);
    });
  }
});
/* harmony default export */ __webpack_exports__["default"] = (Component);

/***/ }),

/***/ "./src/dom_components/model/ComponentLabel.js":
/*!****************************************************!*\
  !*** ./src/dom_components/model/ComponentLabel.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ComponentText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ComponentText */ "./src/dom_components/model/ComponentText.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_ComponentText__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: _objectSpread({}, _ComponentText__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
    tagName: 'label',
    traits: ['id', 'title', 'for']
  })
}, {
  isComponent: function isComponent(el) {
    if (el.tagName == 'LABEL') {
      return {
        type: 'label'
      };
    }
  }
}));

/***/ }),

/***/ "./src/dom_components/model/ComponentText.js":
/*!***************************************************!*\
  !*** ./src/dom_components/model/ComponentText.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Component */ "./src/dom_components/model/Component.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_Component__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: _objectSpread({}, _Component__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
    type: 'text',
    droppable: false,
    editable: true
  }),
  toHTML: function toHTML() {
    this.trigger('sync:content', {
      silent: 1
    });
    return _Component__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.toHTML.apply(this, arguments);
  }
}));

/***/ }),

/***/ "./src/dom_components/model/ComponentTextNode.js":
/*!*******************************************************!*\
  !*** ./src/dom_components/model/ComponentTextNode.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Component */ "./src/dom_components/model/Component.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_Component__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: _objectSpread({}, _Component__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
    droppable: false,
    layerable: false,
    editable: true
  }),
  toHTML: function toHTML() {
    return this.get('content');
  }
}, {
  isComponent: function isComponent(el) {
    var result = '';

    if (el.nodeType === 3) {
      result = {
        type: 'textnode',
        content: el.textContent
      };
    }

    return result;
  }
}));

/***/ }),

/***/ "./src/dom_components/model/ComponentWrapper.js":
/*!******************************************************!*\
  !*** ./src/dom_components/model/ComponentWrapper.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Component */ "./src/dom_components/model/Component.js");
// We need this one just to identify better the wrapper type

/* harmony default export */ __webpack_exports__["default"] = (_Component__WEBPACK_IMPORTED_MODULE_0__["default"].extend({}, {
  isComponent: function isComponent() {
    return false;
  }
}));

/***/ }),

/***/ "./src/dom_components/model/Components.js":
/*!************************************************!*\
  !*** ./src/dom_components/model/Components.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var Component;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_2___default.a.Collection.extend({
  initialize: function initialize(models) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.opt = opt;
    this.listenTo(this, 'add', this.onAdd);
    this.config = opt.config;
    this.em = opt.em;
    var em = this.em;

    this.model = function (attrs, options) {
      var model;
      var df = opt.componentTypes;
      options.em = opt.em;
      options.config = opt.config;
      options.componentTypes = df;
      options.domc = opt.domc;

      for (var it = 0; it < df.length; it++) {
        var dfId = df[it].id;

        if (dfId == attrs.type) {
          model = df[it].model;
          break;
        }
      }

      if (!model) {
        // get the last one
        model = df[df.length - 1].model;
        em && attrs.type && em.logWarning("Component type '".concat(attrs.type, "' not found"), {
          attrs: attrs,
          options: options
        });
      }

      return new model(attrs, options);
    };
  },
  parseString: function parseString(value) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var em = this.em;
    var cssc = em.get('CssComposer');
    var parsed = em.get('Parser').parseHtml(value); // We need this to avoid duplicate IDs

    if (!Component) Component = __webpack_require__(/*! ./Component */ "./src/dom_components/model/Component.js").default;
    Component.checkId(parsed.html, parsed.css, this.opt.domc.componentsById);

    if (parsed.css && cssc && !opt.temporary) {
      cssc.addCollection(parsed.css, _objectSpread({}, opt, {
        extend: 1
      }));
    }

    return parsed.html;
  },
  add: function add(models) {
    var _this = this;

    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isString"])(models)) {
      models = this.parseString(models, opt);
    } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isArray"])(models)) {
      models.forEach(function (item, index) {
        if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isString"])(item)) {
          models[index] = _this.parseString(item, opt);
        }
      });
    }

    (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isArray"])(models) ? models : [models]).filter(function (i) {
      return i;
    }).forEach(function (model) {
      return _this.processDef(model);
    });
    return backbone__WEBPACK_IMPORTED_MODULE_2___default.a.Collection.prototype.add.apply(this, [models, opt]);
  },

  /**
   * Process component definition.
   */
  processDef: function processDef(model) {
    var em = this.em,
        _this$config = this.config,
        config = _this$config === void 0 ? {} : _this$config;
    var processor = config.processor;
    var modelPr = processor && processor(model);

    if (modelPr) {
      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["each"])(model, function (val, key) {
        return delete model[key];
      });
      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["extend"])(model, modelPr);
    } // React JSX


    if (model.$$typeof && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(model.props) == 'object') {
      var domc = em.get('DomComponents');
      var parser = em.get('Parser');
      var parserHtml = parser.parserHtml;
      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["each"])(model, function (value, key) {
        if (!Object(underscore__WEBPACK_IMPORTED_MODULE_3__["includes"])(['props', 'type'], key)) delete model[key];
      });
      var props = model.props;
      var comps = props.children;
      delete props.children;
      delete model.props;
      var res = parserHtml.splitPropsFromAttr(props);
      model.attributes = res.attrs;

      if (comps) {
        model.components = comps;
      }

      if (!model.type) {
        model.type = 'textnode';
      } else if (!domc.getType(model.type)) {
        model.tagName = model.type;
        delete model.type;
      }

      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["extend"])(model, res.props);
    }

    return model;
  },
  onAdd: function onAdd(model, c) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var em = this.em;
    var style = model.getStyle();
    var avoidInline = em && em.getConfig('avoidInlineStyle');

    if (!Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isEmpty"])(style) && !avoidInline && em && em.get && em.getConfig('forceClass') && !opts.temporary) {
      var name = model.cid;
      var rule = em.get('CssComposer').setClassRule(name, style);
      model.setStyle({});
      model.addClass(name);
    }
  }
}));

/***/ }),

/***/ "./src/dom_components/model/Toolbar.js":
/*!*********************************************!*\
  !*** ./src/dom_components/model/Toolbar.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ToolbarButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ToolbarButton */ "./src/dom_components/model/ToolbarButton.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _ToolbarButton__WEBPACK_IMPORTED_MODULE_1__["default"]
}));

/***/ }),

/***/ "./src/dom_components/model/ToolbarButton.js":
/*!***************************************************!*\
  !*** ./src/dom_components/model/ToolbarButton.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    command: '',
    attributes: {}
  }
}));

/***/ }),

/***/ "./src/dom_components/view/ComponentLabelView.js":
/*!*******************************************************!*\
  !*** ./src/dom_components/view/ComponentLabelView.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ComponentLinkView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ComponentLinkView */ "./src/dom_components/view/ComponentLinkView.js");

/* harmony default export */ __webpack_exports__["default"] = (_ComponentLinkView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({}));

/***/ }),

/***/ "./src/dom_components/view/ComponentLinkView.js":
/*!******************************************************!*\
  !*** ./src/dom_components/view/ComponentLinkView.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ComponentTextView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ComponentTextView */ "./src/dom_components/view/ComponentTextView.js");

/* harmony default export */ __webpack_exports__["default"] = (_ComponentTextView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  render: function render() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _ComponentTextView__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.render.apply(this, args); // I need capturing instead of bubbling as bubbled clicks from other
    // children will execute the link event

    this.el.addEventListener('click', this.prevDef, true);
    return this;
  }
}));

/***/ }),

/***/ "./src/dom_components/view/ComponentTextNodeView.js":
/*!**********************************************************!*\
  !*** ./src/dom_components/view/ComponentTextNodeView.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize() {
    var $el = this.$el,
        model = this.model;
    $el.data('model', model);
    model.view = this;
  },
  _createElement: function _createElement() {
    return document.createTextNode(this.model.get('content'));
  }
}));

/***/ }),

/***/ "./src/dom_components/view/ComponentTextView.js":
/*!******************************************************!*\
  !*** ./src/dom_components/view/ComponentTextView.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var _ComponentView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ComponentView */ "./src/dom_components/view/ComponentView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var compProt = _ComponentView__WEBPACK_IMPORTED_MODULE_2__["default"].prototype;
/* harmony default export */ __webpack_exports__["default"] = (_ComponentView__WEBPACK_IMPORTED_MODULE_2__["default"].extend({
  events: {
    dblclick: 'onActive',
    input: 'onInput'
  },
  initialize: function initialize(o) {
    compProt.initialize.apply(this, arguments);
    this.disableEditing = this.disableEditing.bind(this);
    var model = this.model;
    var em = this.em;
    this.listenTo(model, 'focus', this.onActive);
    this.listenTo(model, 'change:content', this.updateContentText);
    this.listenTo(model, 'sync:content', this.syncContent);
    this.rte = em && em.get('RichTextEditor');
  },
  updateContentText: function updateContentText(m, v) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    !opts.fromDisable && this.disableEditing();
  },

  /**
   * Enable element content editing
   * @private
   * */
  onActive: function onActive(e) {
    // We place this before stopPropagation in case of nested
    // text components will not block the editing (#1394)
    if (this.rteEnabled || !this.model.get('editable')) {
      return;
    }

    e && e.stopPropagation && e.stopPropagation();
    var rte = this.rte;

    if (rte) {
      try {
        this.activeRte = rte.enable(this, this.activeRte);
      } catch (err) {
        console.error(err);
      }
    }

    this.rteEnabled = 1;
    this.toggleEvents(1);
  },

  /**
   * Disable element content editing
   * @private
   * */
  disableEditing: function disableEditing() {
    var model = this.model,
        rte = this.rte,
        activeRte = this.activeRte;
    var editable = model.get('editable');

    if (rte && editable) {
      try {
        rte.disable(this, activeRte);
      } catch (err) {
        console.error(err);
      }

      this.syncContent();
    }

    this.rteEnabled = 0;
    this.toggleEvents();
  },

  /**
   * Merge content from the DOM to the model
   */
  syncContent: function syncContent() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = this.model,
        rte = this.rte,
        rteEnabled = this.rteEnabled;
    if (!rteEnabled && !opts.force) return;
    var content = this.getChildrenContainer().innerHTML;
    var comps = model.components();

    var contentOpt = _objectSpread({
      fromDisable: 1
    }, opts);

    comps.length && comps.reset(null, opts);
    model.set('content', '', contentOpt); // If there is a custom RTE the content is just baked staticly
    // inside 'content'

    if (rte.customRte) {
      model.set('content', content, contentOpt);
    } else {
      var clean = function clean(model) {
        var textable = !!model.get('textable');
        var selectable = !['text', 'default', ''].some(function (type) {
          return model.is(type);
        }) || textable;
        model.set(_objectSpread({
          editable: selectable && model.get('editable'),
          selectable: selectable,
          hoverable: selectable,
          removable: textable,
          draggable: textable,
          highlightable: 0,
          copyable: textable
        }, !textable && {
          toolbar: ''
        }), opts);
        model.get('components').each(function (model) {
          return clean(model);
        });
      }; // Avoid re-render on reset with silent option


      !opts.silent && model.trigger('change:content', model, '', contentOpt);
      comps.add(content, opts);
      comps.each(function (model) {
        return clean(model);
      });
      comps.trigger('resetNavigator');
    }
  },

  /**
   * Callback on input event
   * @param  {Event} e
   */
  onInput: function onInput() {
    var em = this.em; // Update toolbars

    em && em.trigger('change:canvasOffset');
  },

  /**
   * Isolate disable propagation method
   * @param {Event}
   * @private
   * */
  disablePropagation: function disablePropagation(e) {
    e.stopPropagation();
  },

  /**
   * Enable/Disable events
   * @param {Boolean} enable
   */
  toggleEvents: function toggleEvents(enable) {
    var method = enable ? 'on' : 'off';
    var mixins = {
      on: utils_mixins__WEBPACK_IMPORTED_MODULE_1__["on"],
      off: utils_mixins__WEBPACK_IMPORTED_MODULE_1__["off"]
    };
    this.em.setEditing(enable); // The ownerDocument is from the frame

    var elDocs = [this.el.ownerDocument, document];
    mixins.off(elDocs, 'mousedown', this.disableEditing);
    mixins[method](elDocs, 'mousedown', this.disableEditing); // Avoid closing edit mode on component click

    this.$el.off('mousedown', this.disablePropagation);
    this.$el[method]('mousedown', this.disablePropagation); // Fixes #2210 but use this also as a replacement
    // of this fix: bd7b804f3b46eb45b4398304b2345ce870f232d2

    if (this.config.draggableComponents) {
      var el = this.el;

      while (el) {
        el.draggable = enable ? !1 : !0;
        el = el.parentNode;
        el.tagName == 'BODY' && (el = 0);
      }
    }
  }
}));

/***/ }),

/***/ "./src/dom_components/view/ComponentView.js":
/*!**************************************************!*\
  !*** ./src/dom_components/view/ComponentView.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _model_Components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/Components */ "./src/dom_components/model/Components.js");
/* harmony import */ var _ComponentsView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ComponentsView */ "./src/dom_components/view/ComponentsView.js");
/* harmony import */ var selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! selector_manager/model/Selectors */ "./src/selector_manager/model/Selectors.js");
/* harmony import */ var utils_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! utils/dom */ "./src/utils/dom.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  className: function className() {
    return this.getClasses();
  },
  tagName: function tagName() {
    return this.model.get('tagName');
  },
  initialize: function initialize() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = this.model;
    var config = opt.config || {};
    var em = config.em;
    var modelOpt = model.opt || {};
    var $el = this.$el;
    var draggableComponents = config.draggableComponents;
    this.opts = opt;
    this.modelOpt = modelOpt;
    this.config = config;
    this.em = em || '';
    this.pfx = config.stylePrefix || '';
    this.ppfx = config.pStylePrefix || '';
    this.attr = model.get('attributes');
    this.classe = this.attr.class || [];
    this.listenTo(model, 'change:style', this.updateStyle);
    this.listenTo(model, 'change:attributes', this.renderAttributes);
    this.listenTo(model, 'change:highlightable', this.updateHighlight);
    this.listenTo(model, 'change:status', this.updateStatus);
    this.listenTo(model, 'change:state', this.updateState);
    this.listenTo(model, 'change:script', this.reset);
    this.listenTo(model, 'change:content', this.updateContent);
    this.listenTo(model, 'change', this.handleChange);
    this.listenTo(model, 'active', this.onActive);
    $el.data('model', model);
    model.view = this;
    this.initClasses();
    this.initComponents({
      avoidRender: 1
    });
    this.events = _objectSpread({}, this.events, {}, draggableComponents && {
      dragstart: 'handleDragStart'
    });
    this.delegateEvents();
    !modelOpt.temporary && this.init(this._clbObj());
  },
  _clbObj: function _clbObj() {
    var em = this.em,
        model = this.model,
        el = this.el;
    return {
      editor: em && em.getEditor(),
      model: model,
      el: el
    };
  },

  /**
   * Initialize callback
   */
  init: function init() {},

  /**
   * Remove callback
   */
  removed: function removed() {},

  /**
   * Callback executed when the `active` event is triggered on component
   */
  onActive: function onActive() {},
  remove: function remove() {
    backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.prototype.remove.apply(this, arguments);
    this.removed(this._clbObj());
    return this;
  },
  handleDragStart: function handleDragStart(event) {
    event.preventDefault();
    event.stopPropagation();
    this.em.get('Commands').run('tlb-move', {
      target: this.model,
      event: event
    });
  },
  initClasses: function initClasses() {
    var model = this.model;
    var event = 'change:classes';
    var classes = model.get('classes');

    if (classes instanceof selector_manager_model_Selectors__WEBPACK_IMPORTED_MODULE_5__["default"]) {
      this.stopListening(model, event, this.initClasses);
      this.listenTo(model, event, this.initClasses);
      this.listenTo(classes, 'add remove change', this.updateClasses);
      classes.length && this.importClasses();
    }
  },
  initComponents: function initComponents() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = this.model,
        $el = this.$el,
        childrenView = this.childrenView;
    var event = 'change:components';
    var comps = model.get('components');
    var toListen = [model, event, this.initComponents];

    if (comps instanceof _model_Components__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      $el.data('collection', comps);
      childrenView && childrenView.remove();
      this.stopListening.apply(this, toListen);
      !opts.avoidRender && this.renderChildren();
      this.listenTo.apply(this, toListen);
    }
  },

  /**
   * Handle any property change
   * @private
   */
  handleChange: function handleChange() {
    var model = this.model;
    model.emitUpdate();

    for (var prop in model.changed) {
      model.emitUpdate(prop);
    }
  },

  /**
   * Import, if possible, classes inside main container
   * @private
   * */
  importClasses: function importClasses() {
    var clm = this.config.em.get('SelectorManager');

    if (clm) {
      this.model.get('classes').each(function (m) {
        clm.add(m.get('name'));
      });
    }
  },

  /**
   * Fires on state update. If the state is not empty will add a helper class
   * @param  {Event} e
   * @private
   * */
  updateState: function updateState(e) {
    var cl = 'hc-state';
    var state = this.model.get('state');

    if (state) {
      this.$el.addClass(cl);
    } else {
      this.$el.removeClass(cl);
    }
  },

  /**
   * Update item on status change
   * @param  {Event} e
   * @private
   * */
  updateStatus: function updateStatus() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var em = this.em;
    var el = this.el;
    var status = this.model.get('status');
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var selectedCls = "".concat(pfx, "selected");
    var selectedParentCls = "".concat(selectedCls, "-parent");
    var freezedCls = "".concat(ppfx, "freezed");
    var hoveredCls = "".concat(ppfx, "hovered");
    var toRemove = [selectedCls, selectedParentCls, freezedCls, hoveredCls];
    this.$el.removeClass(toRemove.join(' '));
    var actualCls = el.getAttribute('class') || '';
    var cls = '';

    switch (status) {
      case 'selected':
        cls = "".concat(actualCls, " ").concat(selectedCls);
        break;

      case 'selected-parent':
        cls = "".concat(actualCls, " ").concat(selectedParentCls);
        break;

      case 'freezed':
        cls = "".concat(actualCls, " ").concat(freezedCls);
        break;

      case 'freezed-selected':
        cls = "".concat(actualCls, " ").concat(freezedCls, " ").concat(selectedCls);
        break;

      case 'hovered':
        cls = !opts.avoidHover ? "".concat(actualCls, " ").concat(hoveredCls) : '';
        break;
    }

    cls = cls.trim();
    cls && el.setAttribute('class', cls);
  },

  /**
   * Update highlight attribute
   * @private
   * */
  updateHighlight: function updateHighlight() {
    var hl = this.model.get('highlightable');
    this.setAttribute('data-highlightable', hl ? 1 : '');
  },

  /**
   * Update style attribute
   * @private
   * */
  updateStyle: function updateStyle() {
    var em = this.em;
    var model = this.model;

    if (em && em.get('avoidInlineStyle')) {
      this.el.id = model.getId();
      var style = model.getStyle();
      !Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(style) && model.setStyle(style);
    } else {
      this.setAttribute('style', model.styleToString());
    }
  },

  /**
   * Update classe attribute
   * @private
   * */
  updateClasses: function updateClasses() {
    var str = this.model.get('classes').pluck('name').join(' ');
    this.setAttribute('class', str); // Regenerate status class

    this.updateStatus();
  },

  /**
   * Update single attribute
   * @param {[type]} name  [description]
   * @param {[type]} value [description]
   */
  setAttribute: function setAttribute(name, value) {
    var el = this.$el;
    value ? el.attr(name, value) : el.removeAttr(name);
  },

  /**
   * Get classes from attributes.
   * This method is called before initialize
   *
   * @return  {Array}|null
   * @private
   * */
  getClasses: function getClasses() {
    return this.model.getClasses().join(' ');
  },

  /**
   * Update attributes
   * @private
   * */
  updateAttributes: function updateAttributes() {
    var attrs = [];
    var model = this.model,
        $el = this.$el,
        el = this.el,
        config = this.config;
    var _model$attributes = model.attributes,
        highlightable = _model$attributes.highlightable,
        textable = _model$attributes.textable,
        type = _model$attributes.type;
    var draggableComponents = config.draggableComponents;

    var defaultAttr = _objectSpread({
      'data-gjs-type': type || 'default'
    }, draggableComponents && {
      draggable: true
    }, {}, highlightable && {
      'data-highlightable': 1
    }, {}, textable && {
      contenteditable: 'false',
      'data-gjs-textable': 'true'
    }); // Remove all current attributes


    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["each"])(el.attributes, function (attr) {
      return attrs.push(attr.nodeName);
    });
    attrs.forEach(function (attr) {
      return $el.removeAttr(attr);
    });

    var attr = _objectSpread({}, defaultAttr, {}, model.getAttributes()); // Remove all `false` attributes


    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["keys"])(attr).forEach(function (key) {
      return attr[key] === false && delete attr[key];
    });
    $el.attr(attr);
    this.updateStyle();
  },

  /**
   * Update component content
   * @private
   * */
  updateContent: function updateContent() {
    this.getChildrenContainer().innerHTML = this.model.get('content');
  },

  /**
   * Prevent default helper
   * @param  {Event} e
   * @private
   */
  prevDef: function prevDef(e) {
    e.preventDefault();
  },

  /**
   * Render component's script
   * @private
   */
  updateScript: function updateScript() {
    var model = this.model,
        em = this.em;
    if (!model.get('script')) return;
    em && em.get('Canvas').getCanvasView().updateScript(this);
  },

  /**
   * Return children container
   * Differently from a simple component where children container is the
   * component itself
   * <my-comp>
   *  <!--
   *    <child></child> ...
   *   -->
   * </my-comp>
   * You could have the children container more deeper
   * <my-comp>
   *  <div></div>
   *  <div></div>
   *  <div>
   *    <div>
   *      <!--
   *        <child></child> ...
   *      -->
   *    </div>
   *  </div>
   * </my-comp>
   * @return HTMLElement
   * @private
   */
  getChildrenContainer: function getChildrenContainer() {
    var container = this.el;

    if (typeof this.getChildrenSelector == 'function') {
      container = this.el.querySelector(this.getChildrenSelector());
    } else if (typeof this.getTemplate == 'function') {// Need to find deepest first child
    }

    return container;
  },

  /**
   * Recreate the element of the view
   */
  reset: function reset() {
    var el = this.el,
        model = this.model;
    var collection = model.components();
    this.el = '';

    this._ensureElement();

    this.$el.data({
      model: model,
      collection: collection
    });
    Object(utils_dom__WEBPACK_IMPORTED_MODULE_6__["replaceWith"])(el, this.el);
    this.render();
  },

  /**
   * Render children components
   * @private
   */
  renderChildren: function renderChildren() {
    this.updateContent();
    var container = this.getChildrenContainer();
    var view = new _ComponentsView__WEBPACK_IMPORTED_MODULE_4__["default"]({
      collection: this.model.get('components'),
      config: this.config,
      componentTypes: this.opts.componentTypes
    });
    view.render(container);
    this.childrenView = view;
    var childNodes = Array.prototype.slice.call(view.el.childNodes);

    for (var i = 0, len = childNodes.length; i < len; i++) {
      container.appendChild(childNodes.shift());
    }
  },
  renderAttributes: function renderAttributes() {
    this.updateAttributes();
    this.updateClasses();
  },
  render: function render() {
    this.renderAttributes();
    if (this.modelOpt.temporary) return this;
    this.renderChildren();
    this.updateScript();
    this.postRender();
    return this;
  },
  postRender: function postRender() {
    var em = this.em,
        model = this.model,
        modelOpt = this.modelOpt;

    if (!modelOpt.temporary) {
      this.onRender(this._clbObj());
      em && em.trigger('component:mount', model);
    }
  },
  onRender: function onRender() {}
}));

/***/ }),

/***/ "./src/dom_components/view/ComponentsView.js":
/*!***************************************************!*\
  !*** ./src/dom_components/view/ComponentsView.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize(o) {
    this.opts = o || {};
    this.config = o.config || {};
    var coll = this.collection;
    this.listenTo(coll, 'add', this.addTo);
    this.listenTo(coll, 'reset', this.resetChildren);
    this.listenTo(coll, 'remove', this.removeChildren);
  },
  removeChildren: function removeChildren(removed, coll) {
    var _this = this;

    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var em = this.config.em;
    var view = removed.view;
    var tempComp = removed.opt.temporary;
    var tempRemove = opts.temporary;
    if (!view) return;
    view.remove.apply(view);
    var childrenView = view.childrenView,
        scriptContainer = view.scriptContainer;
    childrenView && childrenView.stopListening();
    scriptContainer && scriptContainer.remove();
    removed.components().forEach(function (it) {
      return _this.removeChildren(it, coll, opts);
    });

    if (em && !tempRemove) {
      // Remove the component from the global list
      var id = removed.getId();
      var domc = em.get('DomComponents');
      delete domc.componentsById[id]; // Remove all related CSS rules

      var allRules = em.get('CssComposer').getAll();
      allRules.remove(allRules.filter(function (rule) {
        return rule.getSelectors().getFullString() === "#".concat(id);
      }));

      if (!tempComp) {
        var cm = em.get('Commands');
        var hasSign = removed.get('style-signature');
        var optStyle = {
          target: removed
        };
        hasSign && cm.run('core:component-style-clear', optStyle);
        removed.removed();
        em.trigger('component:remove', removed);
      }
    }
  },

  /**
   * Add to collection
   * @param {Model} model
   * @param {Collection} coll
   * @param {Object} opts
   * @private
   * */
  addTo: function addTo(model) {
    var coll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var em = this.config.em;
    var i = this.collection.indexOf(model);
    this.addToCollection(model, null, i);

    if (em && !opts.temporary) {
      var triggerAdd = function triggerAdd(model) {
        em.trigger('component:add', model);
        model.components().forEach(function (comp) {
          return triggerAdd(comp);
        });
      };

      triggerAdd(model);
    }
  },

  /**
   * Add new object to collection
   * @param  {Object}  Model
   * @param  {Object}   Fragment collection
   * @param  {Integer}  Index of append
   *
   * @return   {Object}   Object rendered
   * @private
   * */
  addToCollection: function addToCollection(model, fragmentEl, index) {
    if (!this.compView) this.compView = __webpack_require__(/*! ./ComponentView */ "./src/dom_components/view/ComponentView.js").default;
    var config = this.config,
        opts = this.opts;
    var fragment = fragmentEl || null;
    var dt = opts.componentTypes;
    var type = model.get('type');
    var viewObject = this.compView;

    for (var it = 0; it < dt.length; it++) {
      if (dt[it].id == type) {
        viewObject = dt[it].view;
        break;
      }
    }

    var view = new viewObject({
      model: model,
      config: config,
      componentTypes: dt
    });
    var rendered = view.render().el;

    if (fragment) {
      fragment.appendChild(rendered);
    } else {
      var parent = this.parentEl;
      var children = parent.childNodes;

      if (!Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(index)) {
        var lastIndex = children.length == index; // If the added model is the last of collection
        // need to change the logic of append

        if (lastIndex) {
          index--;
        } // In case the added is new in the collection index will be -1


        if (lastIndex || !children.length) {
          parent.appendChild(rendered);
        } else {
          parent.insertBefore(rendered, children[index]);
        }
      } else {
        parent.appendChild(rendered);
      }
    }

    return rendered;
  },
  resetChildren: function resetChildren() {
    var _this2 = this;

    this.parentEl.innerHTML = '';
    this.collection.each(function (model) {
      return _this2.addToCollection(model);
    });
  },
  render: function render(parent) {
    var _this3 = this;

    var el = this.el;
    var frag = document.createDocumentFragment();
    this.parentEl = parent || this.el;
    this.collection.each(function (model) {
      return _this3.addToCollection(model, frag);
    });
    el.innerHTML = '';
    el.appendChild(frag);
    return this;
  }
}));

/***/ }),

/***/ "./src/dom_components/view/ToolbarButtonView.js":
/*!******************************************************!*\
  !*** ./src/dom_components/view/ToolbarButtonView.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  events: function events() {
    return this.model.get('events') || {
      mousedown: 'handleClick'
    };
  },
  attributes: function attributes() {
    return this.model.get('attributes');
  },
  initialize: function initialize(opts) {
    this.editor = opts.config.editor;
  },
  handleClick: function handleClick(event) {
    event.preventDefault();
    event.stopPropagation();
    this.execCommand(event);
  },
  execCommand: function execCommand(event) {
    var opts = {
      event: event
    };
    var command = this.model.get('command');
    var editor = this.editor;

    if (typeof command === 'function') {
      command(editor, null, opts);
    }

    if (typeof command === 'string') {
      editor.runCommand(command, opts);
    }
  },
  render: function render() {
    var editor = this.editor,
        $el = this.$el,
        model = this.model;
    var id = model.get('id');
    var label = model.get('label');
    var pfx = editor.getConfig('stylePrefix');
    $el.addClass("".concat(pfx, "toolbar-item"));
    id && $el.addClass("".concat(pfx, "toolbar-item__").concat(id));
    label && $el.append(label);
    return this;
  }
}));

/***/ }),

/***/ "./src/dom_components/view/ToolbarView.js":
/*!************************************************!*\
  !*** ./src/dom_components/view/ToolbarView.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var domain_abstract_view_DomainViews__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domain_abstract/view/DomainViews */ "./src/domain_abstract/view/DomainViews.js");
/* harmony import */ var _ToolbarButtonView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ToolbarButtonView */ "./src/dom_components/view/ToolbarButtonView.js");


/* harmony default export */ __webpack_exports__["default"] = (domain_abstract_view_DomainViews__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  itemView: _ToolbarButtonView__WEBPACK_IMPORTED_MODULE_1__["default"],
  initialize: function initialize(opts) {
    this.config = {
      editor: opts.editor || ''
    };
    this.listenTo(this.collection, 'reset', this.render);
  }
}));

/***/ }),

/***/ "./src/domain_abstract/model/Styleable.js":
/*!************************************************!*\
  !*** ./src/domain_abstract/model/Styleable.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var parser_model_ParserHtml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! parser/model/ParserHtml */ "./src/parser/model/ParserHtml.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var parseStyle = Object(parser_model_ParserHtml__WEBPACK_IMPORTED_MODULE_3__["default"])().parseStyle;
/* harmony default export */ __webpack_exports__["default"] = ({
  parseStyle: parseStyle,

  /**
   * To trigger the style change event on models I have to
   * pass a new object instance
   * @param {Object} prop
   * @return {Object}
   */
  extendStyle: function extendStyle(prop) {
    return _objectSpread({}, this.getStyle(), {}, prop);
  },

  /**
   * Get style object
   * @return {Object}
   */
  getStyle: function getStyle() {
    return _objectSpread({}, this.get('style'));
  },

  /**
   * Set new style object
   * @param {Object|string} prop
   * @param {Object} opts
   * @return {Object} Applied properties
   */
  setStyle: function setStyle() {
    var _this = this;

    var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(prop)) {
      prop = parseStyle(prop);
    }

    var propOrig = this.getStyle();

    var propNew = _objectSpread({}, prop);

    this.set('style', propNew, opts);
    var diff = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["shallowDiff"])(propOrig, propNew);
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["keys"])(diff).forEach(function (pr) {
      var em = _this.em;

      _this.trigger("change:style:".concat(pr));

      if (em) {
        em.trigger("styleable:change", _this, pr);
        em.trigger("styleable:change:".concat(pr), _this, pr);
      }
    });
    return propNew;
  },

  /**
   * Add style property
   * @param {Object|string} prop
   * @param {string} value
   * @example
   * this.addStyle({color: 'red'});
   * this.addStyle('color', 'blue');
   */
  addStyle: function addStyle(prop) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (typeof prop == 'string') {
      prop = {
        prop: value
      };
    } else {
      opts = value || {};
    }

    prop = this.extendStyle(prop);
    this.setStyle(prop, opts);
  },

  /**
   * Remove style property
   * @param {string} prop
   */
  removeStyle: function removeStyle(prop) {
    var style = this.getStyle();
    delete style[prop];
    this.setStyle(style);
  },

  /**
   * Returns string of style properties
   * @param {Object} [opts={}] Options
   * @return {String}
   */
  styleToString: function styleToString() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var result = [];
    var style = this.getStyle();

    for (var prop in style) {
      var imp = opts.important;
      var important = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(imp) ? imp.indexOf(prop) >= 0 : imp;
      var value = "".concat(style[prop]).concat(important ? ' !important' : '');
      value && result.push("".concat(prop, ":").concat(value, ";"));
    }

    return result.join('');
  },
  getSelectors: function getSelectors() {
    return this.get('selectors') || this.get('classes');
  }
});

/***/ }),

/***/ "./src/domain_abstract/model/TypeableCollection.js":
/*!*********************************************************!*\
  !*** ./src/domain_abstract/model/TypeableCollection.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);


var Model = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model;
var View = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View;
/* harmony default export */ __webpack_exports__["default"] = ({
  types: [],
  initialize: function initialize(models, opts) {
    var _this = this;

    this.model = function () {
      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var Model, View, type;

      if (attrs && attrs.type) {
        var baseType = _this.getBaseType();

        type = _this.getType(attrs.type);
        Model = type ? type.model : baseType.model;
        View = type ? type.view : baseType.view;
      } else {
        var typeFound = _this.recognizeType(attrs);

        type = typeFound.type;
        Model = type.model;
        View = type.view;
        attrs = typeFound.attributes;
      }

      var model = new Model(attrs, options);
      model.typeView = View;
      return model;
    };

    var init = this.init && this.init.bind(this);
    init && init();
  },

  /**
   * Recognize type by any value
   * @param  {mixed} value
   * @return {Object} Found type
   */
  recognizeType: function recognizeType(value) {
    var types = this.getTypes();

    for (var i = 0; i < types.length; i++) {
      var type = types[i];
      var typeFound = type.isType(value);
      typeFound = typeof typeFound == 'boolean' && typeFound ? {
        type: type.id
      } : typeFound;

      if (typeFound) {
        return {
          type: type,
          attributes: typeFound
        };
      }
    } // If, for any reason, the type is not found it'll return the base one


    return {
      type: this.getBaseType(),
      attributes: value
    };
  },

  /**
   * Returns the base type (last object in the stack)
   * @return {Object}
   */
  getBaseType: function getBaseType() {
    var types = this.getTypes();
    return types[types.length - 1];
  },

  /**
   * Get types
   * @return {Array}
   */
  getTypes: function getTypes() {
    return this.types;
  },

  /**
   * Get type
   * @param {string} id Type ID
   * @return {Object} Type definition
   */
  getType: function getType(id) {
    var types = this.getTypes();

    for (var i = 0; i < types.length; i++) {
      var type = types[i];

      if (type.id === id) {
        return type;
      }
    }
  },

  /**
   * Add new type
   * @param {string} id Type ID
   * @param {Object} definition Definition of the type. Each definition contains
   *                            `model` (business logic), `view` (presentation logic)
   *                            and `isType` function which recognize the type of the
   *                            passed entity
   * addType('my-type', {
   *  model: {},
   *  view: {},
   *  isType: (value) => {},
   * })
   */
  addType: function addType(id, definition) {
    var type = this.getType(id);
    var baseType = this.getBaseType();
    var ModelInst = type ? type.model : baseType.model;
    var ViewInst = type ? type.view : baseType.view;
    var model = definition.model,
        view = definition.view,
        isType = definition.isType;
    model = model instanceof Model || Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(model) ? model : ModelInst.extend(model || {});
    view = view instanceof View || Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(view) ? view : ViewInst.extend(view || {});

    if (type) {
      type.model = model;
      type.view = view;
      type.isType = isType || type.isType;
    } else {
      definition.id = id;
      definition.model = model;
      definition.view = view;

      definition.isType = isType || function (value) {
        if (value && value.type == id) {
          return true;
        }
      };

      this.getTypes().unshift(definition);
    }
  }
});

/***/ }),

/***/ "./src/domain_abstract/ui/Input.js":
/*!*****************************************!*\
  !*** ./src/domain_abstract/ui/Input.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  events: {
    change: 'handleChange'
  },
  template: function template() {
    return "<span class=\"".concat(this.holderClass(), "\"></span>");
  },
  inputClass: function inputClass() {
    return "".concat(this.ppfx, "field");
  },
  holderClass: function holderClass() {
    return "".concat(this.ppfx, "input-holder");
  },
  initialize: function initialize() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var ppfx = opts.ppfx || '';
    this.opts = opts;
    this.ppfx = ppfx;
    this.em = opts.target || {};
    this.listenTo(this.model, 'change:value', this.handleModelChange);
  },

  /**
   * Fired when the element of the property is updated
   */
  elementUpdated: function elementUpdated() {
    this.model.trigger('el:change');
  },

  /**
   * Set value to the input element
   * @param {string} value
   */
  setValue: function setValue(value) {
    var model = this.model;
    var val = value || model.get('defaults');
    var input = this.getInputEl();
    input && (input.value = val);
  },

  /**
   * Updates the view when the model is changed
   * */
  handleModelChange: function handleModelChange(model, value, opts) {
    this.setValue(value, opts);
  },

  /**
   * Handled when the view is changed
   */
  handleChange: function handleChange(e) {
    e.stopPropagation();
    var value = this.getInputEl().value;
    this.model.set({
      value: value
    }, {
      fromInput: 1
    });
    this.elementUpdated();
  },

  /**
   * Get the input element
   * @return {HTMLElement}
   */
  getInputEl: function getInputEl() {
    if (!this.inputEl) {
      var model = this.model;
      var plh = model.get('placeholder') || model.get('defaults') || '';
      this.inputEl = $("<input type=\"text\" placeholder=\"".concat(plh, "\">"));
    }

    return this.inputEl.get(0);
  },
  render: function render() {
    this.inputEl = null;
    var el = this.$el;
    el.addClass(this.inputClass());
    el.html(this.template());
    el.find(".".concat(this.holderClass())).append(this.getInputEl());
    return this;
  }
}));

/***/ }),

/***/ "./src/domain_abstract/ui/InputColor.js":
/*!**********************************************!*\
  !*** ./src/domain_abstract/ui/InputColor.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_ColorPicker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/ColorPicker */ "./src/utils/ColorPicker.js");
/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Input */ "./src/domain_abstract/ui/Input.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





var $ = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.$;
Object(utils_ColorPicker__WEBPACK_IMPORTED_MODULE_3__["default"])($);
/* harmony default export */ __webpack_exports__["default"] = (_Input__WEBPACK_IMPORTED_MODULE_4__["default"].extend({
  template: function template() {
    var ppfx = this.ppfx;
    return "\n      <div class=\"".concat(this.holderClass(), "\"></div>\n      <div class=\"").concat(ppfx, "field-colorp\">\n        <div class=\"").concat(ppfx, "field-colorp-c\" data-colorp-c>\n          <div class=\"").concat(ppfx, "checker-bg\"></div>\n        </div>\n      </div>\n    ");
  },
  inputClass: function inputClass() {
    var ppfx = this.ppfx;
    return "".concat(ppfx, "field ").concat(ppfx, "field-color");
  },
  holderClass: function holderClass() {
    return "".concat(this.ppfx, "input-holder");
  },

  /**
   * Set value to the model
   * @param {string} val
   * @param {Object} opts
   */
  setValue: function setValue(val) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = this.model;
    var def = model.get('defaults');
    var value = !Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(val) ? val : !Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(def) ? def : '';
    var inputEl = this.getInputEl();
    var colorEl = this.getColorEl();
    var valueClr = value != 'none' ? value : '';
    inputEl.value = value;
    colorEl.get(0).style.backgroundColor = valueClr; // This prevents from adding multiple thumbs in spectrum

    if (opts.fromTarget) {
      colorEl.spectrum('set', valueClr);
      this.noneColor = value == 'none';
    }
  },

  /**
   * Get the color input element
   * @return {HTMLElement}
   */
  getColorEl: function getColorEl() {
    if (!this.colorEl) {
      var self = this;
      var ppfx = this.ppfx;
      var model = this.model;
      var colorEl = $("<div class=\"".concat(this.ppfx, "field-color-picker\"></div>"));
      var cpStyle = colorEl.get(0).style;
      var elToAppend = this.em && this.em.config ? this.em.config.el : '';
      var colorPickerConfig = this.em && this.em.getConfig && this.em.getConfig('colorPicker') || {};

      var getColor = function getColor(color) {
        var cl = color.getAlpha() == 1 ? color.toHexString() : color.toRgbString();
        return cl.replace(/ /g, '');
      };

      var changed = 0;
      var previousColor;
      this.$el.find("[data-colorp-c]").append(colorEl);
      colorEl.spectrum(_objectSpread({
        containerClassName: "".concat(ppfx, "one-bg ").concat(ppfx, "two-color"),
        appendTo: elToAppend || 'body',
        maxSelectionSize: 8,
        showPalette: true,
        showAlpha: true,
        chooseText: 'Ok',
        cancelText: '⨯',
        palette: []
      }, colorPickerConfig, {
        move: function move(color) {
          var cl = getColor(color);
          cpStyle.backgroundColor = cl;
          model.setValueFromInput(cl, 0);
        },
        change: function change(color) {
          changed = 1;
          var cl = getColor(color);
          cpStyle.backgroundColor = cl;
          model.setValueFromInput(cl);
          self.noneColor = 0;
        },
        show: function show(color) {
          changed = 0;
          previousColor = getColor(color);
        },
        hide: function hide(color) {
          if (!changed && previousColor) {
            if (self.noneColor) {
              previousColor = '';
            }

            cpStyle.backgroundColor = previousColor;
            colorEl.spectrum('set', previousColor);
            model.setValueFromInput(previousColor, 0);
          }
        }
      }));
      this.colorEl = colorEl;
    }

    return this.colorEl;
  },
  render: function render() {
    _Input__WEBPACK_IMPORTED_MODULE_4__["default"].prototype.render.call(this); // This will make the color input available on render

    this.getColorEl();
    return this;
  }
}));

/***/ }),

/***/ "./src/domain_abstract/ui/InputNumber.js":
/*!***********************************************!*\
  !*** ./src/domain_abstract/ui/InputNumber.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Input */ "./src/domain_abstract/ui/Input.js");




var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (_Input__WEBPACK_IMPORTED_MODULE_3__["default"].extend({
  events: {
    'change input': 'handleChange',
    'change select': 'handleUnitChange',
    'click [data-arrow-up]': 'upArrowClick',
    'click [data-arrow-down]': 'downArrowClick',
    'mousedown [data-arrows]': 'downIncrement'
  },
  template: function template() {
    var ppfx = this.ppfx;
    return "\n      <span class=\"".concat(ppfx, "input-holder\"></span>\n      <span class=\"").concat(ppfx, "field-units\"></span>\n      <div class=\"").concat(ppfx, "field-arrows\" data-arrows>\n        <div class=\"").concat(ppfx, "field-arrow-u\" data-arrow-up></div>\n        <div class=\"").concat(ppfx, "field-arrow-d\" data-arrow-down></div>\n      </div>\n    ");
  },
  inputClass: function inputClass() {
    var ppfx = this.ppfx;
    return this.opts.contClass || "".concat(ppfx, "field ").concat(ppfx, "field-integer");
  },
  initialize: function initialize() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _Input__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.initialize.apply(this, arguments);
    Object(underscore__WEBPACK_IMPORTED_MODULE_1__["bindAll"])(this, 'moveIncrement', 'upIncrement');
    this.doc = document;
    this.listenTo(this.model, 'change:unit', this.handleModelChange);
  },

  /**
   * Set value to the model
   * @param {string} value
   * @param {Object} opts
   */
  setValue: function setValue(value, opts) {
    var opt = opts || {};
    var valid = this.validateInputValue(value, {
      deepCheck: 1
    });
    var validObj = {
      value: valid.value
    }; // If found some unit value

    if (valid.unit || valid.force) {
      validObj.unit = valid.unit;
    }

    this.model.set(validObj, opt); // Generally I get silent when I need to reflect data to view without
    // reupdating the target

    if (opt.silent) {
      this.handleModelChange();
    }
  },

  /**
   * Handled when the view is changed
   */
  handleChange: function handleChange(e) {
    e.stopPropagation();
    this.setValue(this.getInputEl().value);
    this.elementUpdated();
  },

  /**
   * Handled when the view is changed
   */
  handleUnitChange: function handleUnitChange(e) {
    e.stopPropagation();
    var value = this.getUnitEl().value;
    this.model.set('unit', value);
    this.elementUpdated();
  },

  /**
   * Fired when the element of the property is updated
   */
  elementUpdated: function elementUpdated() {
    this.model.trigger('el:change');
  },

  /**
   * Updates the view when the model is changed
   * */
  handleModelChange: function handleModelChange() {
    var model = this.model;
    this.getInputEl().value = model.get('value');
    var unitEl = this.getUnitEl();
    unitEl && (unitEl.value = model.get('unit') || '');
  },

  /**
   * Get the unit element
   * @return {HTMLElement}
   */
  getUnitEl: function getUnitEl() {
    if (!this.unitEl) {
      var model = this.model;
      var units = model.get('units') || [];

      if (units.length) {
        var options = [];
        units.forEach(function (unit) {
          var selected = unit == model.get('unit') ? 'selected' : '';
          options.push("<option ".concat(selected, ">").concat(unit, "</option>"));
        });
        var temp = document.createElement('div');
        temp.innerHTML = "<select class=\"".concat(this.ppfx, "input-unit\">").concat(options.join(''), "</select>");
        this.unitEl = temp.firstChild;
      }
    }

    return this.unitEl;
  },

  /**
   * Invoked when the up arrow is clicked
   * */
  upArrowClick: function upArrowClick() {
    var model = this.model;
    var step = model.get('step');
    var value = parseInt(model.get('value'), 10);
    value = this.normalizeValue(value + step);
    var valid = this.validateInputValue(value);
    model.set('value', valid.value);
    this.elementUpdated();
  },

  /**
   * Invoked when the down arrow is clicked
   * */
  downArrowClick: function downArrowClick() {
    var model = this.model;
    var step = model.get('step');
    var value = parseInt(model.get('value'), 10);
    var val = this.normalizeValue(value - step);
    var valid = this.validateInputValue(val);
    model.set('value', valid.value);
    this.elementUpdated();
  },

  /**
   * Change easily integer input value with click&drag method
   * @param Event
   *
   * @return void
   * */
  downIncrement: function downIncrement(e) {
    e.preventDefault();
    this.moved = 0;
    var value = this.model.get('value');
    value = this.normalizeValue(value);
    this.current = {
      y: e.pageY,
      val: value
    };
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(this.doc, 'mousemove', this.moveIncrement);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(this.doc, 'mouseup', this.upIncrement);
  },

  /** While the increment is clicked, moving the mouse will update input value
   * @param Object
   *
   * @return bool
   * */
  moveIncrement: function moveIncrement(ev) {
    this.moved = 1;
    var model = this.model;
    var step = model.get('step');
    var data = this.current;
    var pos = this.normalizeValue(data.val + (data.y - ev.pageY) * step);
    this.prValue = this.validateInputValue(pos).value;
    model.set('value', this.prValue, {
      avoidStore: 1
    });
    return false;
  },

  /**
   * Stop moveIncrement method
   * */
  upIncrement: function upIncrement() {
    var model = this.model;
    var step = model.get('step');
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["off"])(this.doc, 'mouseup', this.upIncrement);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["off"])(this.doc, 'mousemove', this.moveIncrement);

    if (this.prValue && this.moved) {
      var value = this.prValue - step;
      model.set('value', value, {
        avoidStore: 1
      }).set('value', value + step);
      this.elementUpdated();
    }
  },
  normalizeValue: function normalizeValue(value) {
    var defValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var model = this.model;
    var step = model.get('step');
    var stepDecimals = 0;

    if (isNaN(value)) {
      return defValue;
    }

    value = parseFloat(value);

    if (Math.floor(value) !== value) {
      var side = step.toString().split('.')[1];
      stepDecimals = side ? side.length : 0;
    }

    return stepDecimals ? parseFloat(value.toFixed(stepDecimals)) : value;
  },

  /**
   * Validate input value
   * @param {String} value Raw value
   * @param {Object} opts Options
   * @return {Object} Validated string
   */
  validateInputValue: function validateInputValue(value, opts) {
    var force = 0;
    var opt = opts || {};
    var model = this.model;
    var defValue = ''; //model.get('defaults');

    var val = !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(value) ? value : defValue;
    var units = model.get('units') || [];
    var unit = model.get('unit') || units.length && units[0] || '';
    var max = model.get('max');
    var min = model.get('min');

    if (opt.deepCheck) {
      var fixed = model.get('fixedValues') || [];

      if (val) {
        // If the value is one of the fixed values I leave it as it is
        var regFixed = new RegExp('^' + fixed.join('|'), 'g');

        if (fixed.length && regFixed.test(val)) {
          val = val.match(regFixed)[0];
          unit = '';
          force = 1;
        } else {
          var valCopy = val + '';
          val += ''; // Make it suitable for replace

          val = parseFloat(val.replace(',', '.'));
          val = !isNaN(val) ? val : defValue;
          var uN = valCopy.replace(val, ''); // Check if exists as unit

          if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["indexOf"])(units, uN) >= 0) unit = uN;
        }
      }
    }

    if (!Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(max) && max !== '') val = val > max ? max : val;
    if (!Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(min) && min !== '') val = val < min ? min : val;
    return {
      force: force,
      value: val,
      unit: unit
    };
  },
  render: function render() {
    _Input__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.render.call(this);
    this.unitEl = null;
    var unit = this.getUnitEl();
    unit && this.$el.find(".".concat(this.ppfx, "field-units")).get(0).appendChild(unit);
    return this;
  }
}));

/***/ }),

/***/ "./src/domain_abstract/view/DomainViews.js":
/*!*************************************************!*\
  !*** ./src/domain_abstract/view/DomainViews.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  // Default view
  itemView: '',
  // Defines the View per type
  itemsView: '',
  itemType: 'type',
  initialize: function initialize(opts, config) {
    this.config = config || {};
  },

  /**
   * Add new model to the collection
   * @param {Model} model
   * @private
   * */
  addTo: function addTo(model) {
    this.add(model);
  },
  itemViewNotFound: function itemViewNotFound(type) {
    var config = this.config,
        ns = this.ns;
    var em = config.em;
    var warn = "".concat(ns ? "[".concat(ns, "]: ") : '', "'").concat(type, "' type not found");
    em && em.logWarning(warn);
  },

  /**
   * Render new model inside the view
   * @param {Model} model
   * @param {Object} fragment Fragment collection
   * @private
   * */
  add: function add(model, fragment) {
    var config = this.config,
        reuseView = this.reuseView,
        _this$itemsView = this.itemsView,
        itemsView = _this$itemsView === void 0 ? {} : _this$itemsView;
    var frag = fragment || null;
    var itemView = this.itemView;
    var typeField = model.get(this.itemType);
    var view;

    if (itemsView[typeField]) {
      itemView = itemsView[typeField];
    } else if (typeField && !itemsView[typeField]) {
      this.itemViewNotFound(typeField);
    }

    if (model.view && reuseView) {
      view = model.view;
    } else {
      view = new itemView({
        model: model,
        config: config
      }, config);
    }

    var rendered = view.render().el;
    if (frag) frag.appendChild(rendered);else this.$el.append(rendered);
  },
  render: function render() {
    var frag = document.createDocumentFragment();
    this.$el.empty();
    if (this.collection.length) this.collection.each(function (model) {
      this.add(model, frag);
    }, this);
    this.$el.append(frag);
    return this;
  }
}));

/***/ }),

/***/ "./src/editor/config/config.js":
/*!*************************************!*\
  !*** ./src/editor/config/config.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // Style prefix
  stylePrefix: 'gjs-',
  // HTML string or object of components
  components: '',
  // CSS string or object of rules
  style: '',
  // If true, will fetch HTML and CSS from selected container
  fromElement: 0,
  // Show an alert before unload the page with unsaved changes
  noticeOnUnload: true,
  // Show paddings and margins
  showOffsets: false,
  // Show paddings and margins on selected component
  showOffsetsSelected: false,
  // On creation of a new Component (via object), if the 'style' attribute is not
  // empty, all those roles will be moved in its new class
  forceClass: true,
  // Height for the editor container
  height: '900px',
  // Width for the editor container
  width: '100%',
  // Type of logs to print with the logger (by default is used the devtool console).
  // Available by default: debug, info, warning, error
  // You can use `false` to disable all of them or `true` to print all of them
  log: ['warning', 'error'],
  // By default Grapes injects base CSS into the canvas. For example, it sets body margin to 0
  // and sets a default background color of white. This CSS is desired in most cases.
  // use this property if you wish to overwrite the base CSS to your own CSS. This is most
  // useful if for example your template is not based off a document with 0 as body margin.
  baseCss: "\n    * {\n      box-sizing: border-box;\n    }\n    html, body, #wrapper {\n      min-height: 100%;\n    }\n    body {\n      margin: 0;\n      height: 100%;\n      background-color: #fff\n    }\n    #wrapper {\n      overflow: auto;\n      overflow-x: hidden;\n    }\n\n    * ::-webkit-scrollbar-track {\n      background: rgba(0, 0, 0, 0.1)\n    }\n\n    * ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.2)\n    }\n\n    * ::-webkit-scrollbar {\n      width: 10px\n    }\n  ",
  // CSS that could only be seen (for instance, inside the code viewer)
  protectedCss: '* { box-sizing: border-box; } body {margin: 0;}',
  // CSS for the iframe which containing the canvas, useful if you need to custom something inside
  // (eg. the style of the selected component)
  canvasCss: '',
  // Default command
  defaultCommand: 'select-comp',
  // Show a toolbar when the component is selected
  showToolbar: 1,
  // Allow script tag importing
  allowScripts: 0,
  // If true render a select of available devices
  showDevices: 1,
  // When enabled, on device change media rules won't be created
  devicePreviewMode: 0,
  // THe condition to use for media queries, eg. 'max-width'
  // Comes handy for mobile-first cases
  mediaCondition: 'max-width',
  // Starting tag for variable inside scripts in Components
  tagVarStart: '{[ ',
  // Ending tag for variable inside scripts in Components
  tagVarEnd: ' ]}',
  // When false, removes empty text nodes when parsed, unless they contain a space
  keepEmptyTextNodes: 0,
  // Return JS of components inside HTML from 'editor.getHtml()'
  jsInHtml: true,
  // Enable native HTML5 drag and drop
  nativeDnD: 1,
  // Enable multiple selection
  multipleSelection: 1,
  // Show the wrapper component in the final code, eg. in editor.getHtml()
  exportWrapper: 0,
  // The wrapper, if visible, will be shown as a `<body>`
  wrapperIsBody: 1,
  // Usually when you update the `style` of the component this changes the
  // element's `style` attribute. Unfortunately, inline styling doesn't allow
  // use of media queries (@media) or even pseudo selectors (eg. :hover).
  // When `avoidInlineStyle` is true all styles are inserted inside the css rule
  avoidInlineStyle: 0,
  // Avoid default properties from storable JSON data, like `components` and `styles`.
  // With this option enabled your data will be smaller (usefull if need to
  // save some storage space)
  avoidDefaults: 1,
  // (experimental)
  // The structure of components is always on the screen but it's not the same
  // for style rules. When you delete a component you might leave a lot of styles
  // which will never be used again, therefore they might be removed.
  // With this option set to true, styles not used from the CSS generator (so in
  // any case where `CssGenerator.build` is used) will be removed automatically.
  // But be careful, not always leaving the style not used mean you wouldn't
  // use it later, but this option comes really handy when deal with big templates.
  clearStyles: 0,
  // Specify the global drag mode of components. By default, components are moved
  // following the HTML flow. Two other options are available:
  // 'absolute' - Move components absolutely (design tools way)
  // 'translate' - Use translate CSS from transform property
  // To get more about this feature read: https://github.com/artf/grapesjs/issues/1936
  dragMode: 0,
  // Dom element
  el: '',
  // Configurations for Undo Manager
  undoManager: {},
  //Configurations for Asset Manager
  assetManager: {},
  //Configurations for Canvas
  canvas: {},
  //Configurations for Layers
  layers: {},
  //Configurations for Storage Manager
  storageManager: {},
  //Configurations for Rich Text Editor
  richTextEditor: {},
  //Configurations for DomComponents
  domComponents: {},
  //Configurations for Modal Dialog
  modal: {},
  //Configurations for Code Manager
  codeManager: {},
  //Configurations for Panels
  panels: {},
  //Configurations for Commands
  commands: {},
  //Configurations for Css Composer
  cssComposer: {},
  //Configurations for Selector Manager
  selectorManager: {},
  //Configurations for Device Manager
  deviceManager: {
    devices: [{
      name: 'Desktop',
      width: ''
    }, {
      name: 'Tablet',
      width: '768px',
      widthMedia: '992px'
    }, {
      name: 'Mobile landscape',
      width: '568px',
      widthMedia: '768px'
    }, {
      name: 'Mobile portrait',
      width: '320px',
      widthMedia: '480px'
    }]
  },
  //Configurations for Style Manager
  styleManager: {
    sectors: [{
      name: 'General',
      open: false,
      buildProps: ['float', 'display', 'position', 'top', 'right', 'left', 'bottom']
    }, {
      name: 'Flex',
      open: false,
      buildProps: ['flex-direction', 'flex-wrap', 'justify-content', 'align-items', 'align-content', 'order', 'flex-basis', 'flex-grow', 'flex-shrink', 'align-self']
    }, {
      name: 'Dimension',
      open: false,
      buildProps: ['width', 'height', 'max-width', 'min-height', 'margin', 'padding']
    }, {
      name: 'Typography',
      open: false,
      buildProps: ['font-family', 'font-size', 'font-weight', 'letter-spacing', 'color', 'line-height', 'text-align', 'text-shadow'],
      properties: [{
        property: 'text-align',
        list: [{
          value: 'left',
          className: 'fa fa-align-left'
        }, {
          value: 'center',
          className: 'fa fa-align-center'
        }, {
          value: 'right',
          className: 'fa fa-align-right'
        }, {
          value: 'justify',
          className: 'fa fa-align-justify'
        }]
      }]
    }, {
      name: 'Decorations',
      open: false,
      buildProps: ['border-radius-c', 'background-color', 'border-radius', 'border', 'box-shadow', 'background']
    }, {
      name: 'Extra',
      open: false,
      buildProps: ['transition', 'perspective', 'transform']
    }]
  },
  // Configurations for Block Manager
  blockManager: {},
  // Configurations for Trait Manager
  traitManager: {},
  // Texts
  textViewCode: 'Code',
  // Keep unused styles within the editor
  keepUnusedStyles: 0,
  // TODO
  multiFrames: 0
});

/***/ }),

/***/ "./src/editor/index.js":
/*!*****************************!*\
  !*** ./src/editor/index.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cash_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cash-dom */ "./node_modules/cash-dom/dist/cash.js");
/* harmony import */ var cash_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cash_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/config */ "./src/editor/config/config.js");
/* harmony import */ var _model_Editor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/Editor */ "./src/editor/model/Editor.js");
/* harmony import */ var _view_EditorView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view/EditorView */ "./src/editor/view/EditorView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Editor contains the top level API which you'll probably use to customize the editor or extend it with plugins.
 * You get the Editor instance on init method and you can pass options via its [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/editor/config/config.js)
 *
 * ```js
 * const editor = grapesjs.init({
 *    // options
 * });
 * ```
 *
 * ## Available Events
 *
 * You can make use of available events in this way
 * ```js
 * editor.on('EVENT-NAME', (some, argument) => {
 *    // do something
 * })
 * ```
 *
 * ### Components
 * * `component:create` - Component is created (only the model, is not yet mounted in the canvas), called after the init() method
 * * `component:mount` - Component is mounted to an element and rendered in canvas
 * * `component:add` - Triggered when a new component is added to the editor, the model is passed as an argument to the callback
 * * `component:remove` - Triggered when a component is removed, the model is passed as an argument to the callback
 * * `component:clone` - Triggered when a component is cloned, the new model is passed as an argument to the callback
 * * `component:update` - Triggered when a component is updated (moved, styled, etc.), the model is passed as an argument to the callback
 * * `component:update:{propertyName}` - Listen any property change, the model is passed as an argument to the callback
 * * `component:styleUpdate` - Triggered when the style of the component is updated, the model is passed as an argument to the callback
 * * `component:styleUpdate:{propertyName}` - Listen for a specific style property change, the model is passed as an argument to the callback
 * * `component:selected` - New component selected, the selected model is passed as an argument to the callback
 * * `component:deselected` - Component deselected, the deselected model is passed as an argument to the callback
 * * `component:toggled` - Component selection changed, toggled model is passed as an argument to the callback
 * * `component:type:add` - New component type added, the new type is passed as an argument to the callback
 * * `component:type:update` - Component type updated, the updated type is passed as an argument to the callback
 * ### Blocks
 * * `block:add` - New block added
 * * `block:remove` - Block removed
 * * `block:drag:start` - Started dragging block, model of the block is passed as an argument
 * * `block:drag` - Dragging block, the block's model and the drag event are passed as arguments
 * * `block:drag:stop` - Dragging of the block is stopped. As agruments for the callback you get, the dropped component model (if dropped successfully) and the model of the block
 * ### Assets
 * * `asset:add` - New asset added
 * * `asset:remove` - Asset removed
 * * `asset:upload:start` - Before the upload is started
 * * `asset:upload:end` - After the upload is ended
 * * `asset:upload:error` - On any error in upload, passes the error as an argument
 * * `asset:upload:response` - On upload response, passes the result as an argument
 * ### Keymaps
 * * `keymap:add` - New keymap added. The new keyamp object is passed as an argument
 * * `keymap:remove` - Keymap removed. The removed keyamp object is passed as an argument
 * * `keymap:emit` - Some keymap emitted, in arguments you get keymapId, shortcutUsed, Event
 * * `keymap:emit:{keymapId}` - `keymapId` emitted, in arguments you get keymapId, shortcutUsed, Event
 * ### Style Manager
 * * `styleManager:update:target` - The target (Component or CSSRule) is changed
 * * `styleManager:change` - Triggered on style property change from new selected component, the view of the property is passed as an argument to the callback
 * * `styleManager:change:{propertyName}` - As above but for a specific style property
 * ### Storages
 * * `storage:start` - Before the storage request is started
 * * `storage:start:store` - Before the store request. The object to store is passed as an argumnet (which you can edit)
 * * `storage:start:load` - Before the load request. Items to load are passed as an argumnet (which you can edit)
 * * `storage:load` - Triggered when something was loaded from the storage, loaded object passed as an argumnet
 * * `storage:store` - Triggered when something is stored to the storage, stored object passed as an argumnet
 * * `storage:end` - After the storage request is ended
 * * `storage:end:store` - After the store request
 * * `storage:end:load` - After the load request
 * * `storage:error` - On any error on storage request, passes the error as an argument
 * * `storage:error:store` - Error on store request, passes the error as an argument
 * * `storage:error:load` - Error on load request, passes the error as an argument
 * ### Canvas
 * * `canvas:dragenter` - When something is dragged inside the canvas, `DataTransfer` instance passed as an argument
 * * `canvas:dragover` - When something is dragging on canvas, `DataTransfer` instance passed as an argument
 * * `canvas:drop` - Something is dropped in canvas, `DataTransfer` instance and the dropped model are passed as arguments
 * * `canvas:dragend` - When a drag operation is ended, `DataTransfer` instance passed as an argument
 * * `canvas:dragdata` - On any dataTransfer parse, `DataTransfer` instance and the `result` are passed as arguments.
 *  By changing `result.content` you're able to customize what is dropped
 * ### Selectors
 * * `selector:add` - Triggers when a new selector/class is created
 * ### RTE
 * * `rte:enable` - RTE enabled. The view, on which RTE is enabled, is passed as an argument
 * * `rte:disable` - RTE disabled. The view, on which RTE is disabled, is passed as an argument
 * ### Modal
 * * `modal:open` - Modal is opened
 * * `modal:close` - Modal is closed
 * ### Commands
 * * `run:{commandName}` - Triggered when some command is called to run (eg. editor.runCommand('preview'))
 * * `stop:{commandName}` - Triggered when some command is called to stop (eg. editor.stopCommand('preview'))
 * * `run:{commandName}:before` - Triggered before the command is called
 * * `stop:{commandName}:before` - Triggered before the command is called to stop
 * * `abort:{commandName}` - Triggered when the command execution is aborted (`editor.on(`run:preview:before`, opts => opts.abort = 1);`)
 * * `run` - Triggered on run of any command. The id and the result are passed as arguments to the callback
 * * `stop` - Triggered on stop of any command. The id and the result are passed as arguments to the callback
 * ### General
 * * `canvasScroll` - Canvas is scrolled
 * * `update` - The structure of the template is updated (its HTML/CSS)
 * * `undo` - Undo executed
 * * `redo` - Redo executed
 * * `load` - Editor is loaded
 *
 * @module Editor
 */




/* harmony default export */ __webpack_exports__["default"] = (function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_2__["default"], {}, config);

  c.pStylePrefix = c.stylePrefix;
  var em = new _model_Editor__WEBPACK_IMPORTED_MODULE_3__["default"](c);
  var editorView = new _view_EditorView__WEBPACK_IMPORTED_MODULE_4__["default"]({
    model: em,
    config: c
  });
  return {
    $: cash_dom__WEBPACK_IMPORTED_MODULE_1___default.a,

    /**
     * @property {EditorModel}
     * @private
     */
    editor: em,

    /**
     * @property {DomComponents}
     * @private
     */
    DomComponents: em.get('DomComponents'),

    /**
     * @property {LayerManager}
     * @private
     */
    LayerManager: em.get('LayerManager'),

    /**
     * @property {CssComposer}
     * @private
     */
    CssComposer: em.get('CssComposer'),

    /**
     * @property {StorageManager}
     * @private
     */
    StorageManager: em.get('StorageManager'),

    /**
     * @property {AssetManager}
     * @private
     */
    AssetManager: em.get('AssetManager'),

    /**
     * @property {BlockManager}
     * @private
     */
    BlockManager: em.get('BlockManager'),

    /**
     * @property {TraitManager}
     * @private
     */
    TraitManager: em.get('TraitManager'),

    /**
     * @property {SelectorManager}
     * @private
     */
    SelectorManager: em.get('SelectorManager'),

    /**
     * @property {CodeManager}
     * @private
     */
    CodeManager: em.get('CodeManager'),

    /**
     * @property {Commands}
     * @private
     */
    Commands: em.get('Commands'),

    /**
     * @property {Keymaps}
     * @private
     */
    Keymaps: em.get('Keymaps'),

    /**
     * @property {Modal}
     * @private
     */
    Modal: em.get('Modal'),

    /**
     * @property {Panels}
     * @private
     */
    Panels: em.get('Panels'),

    /**
     * @property {StyleManager}
     * @private
     */
    StyleManager: em.get('StyleManager'),

    /**
     * @property {Canvas}
     * @private
     */
    Canvas: em.get('Canvas'),

    /**
     * @property {UndoManager}
     * @private
     */
    UndoManager: em.get('UndoManager'),

    /**
     * @property {DeviceManager}
     * @private
     */
    DeviceManager: em.get('DeviceManager'),

    /**
     * @property {RichTextEditor}
     * @private
     */
    RichTextEditor: em.get('RichTextEditor'),

    /**
     * @property {Parser}
     * @private
     */
    Parser: em.get('Parser'),

    /**
     * @property {Utils}
     * @private
     */
    Utils: em.get('Utils'),

    /**
     * @property {Utils}
     * @private
     */
    Config: em.get('Config'),

    /**
     * Initialize editor model
     * @return {this}
     * @private
     */
    init: function init() {
      em.init(this);
      return this;
    },

    /**
     * Returns configuration object
     * @param  {string} [prop] Property name
     * @return {any} Returns the configuration object or
     *  the value of the specified property
     */
    getConfig: function getConfig(prop) {
      return em.getConfig(prop);
    },

    /**
     * Returns HTML built inside canvas
     * @return {string} HTML string
     */
    getHtml: function getHtml(opts) {
      return em.getHtml(opts);
    },

    /**
     * Returns CSS built inside canvas
     * @param {Object} [opts={}] Options
     * @return {string} CSS string
     */
    getCss: function getCss(opts) {
      return em.getCss(opts);
    },

    /**
     * Returns JS of all components
     * @return {string} JS string
     */
    getJs: function getJs() {
      return em.getJs();
    },

    /**
     * Return the complete tree of components. Use `getWrapper` to include also the wrapper
     * @return {Components}
     */
    getComponents: function getComponents() {
      return em.get('DomComponents').getComponents();
    },

    /**
     * Return the wrapper and its all components
     * @return {Component}
     */
    getWrapper: function getWrapper() {
      return em.get('DomComponents').getWrapper();
    },

    /**
     * Set components inside editor's canvas. This method overrides actual components
     * @param {Array<Object>|Object|string} components HTML string or components model
     * @return {this}
     * @example
     * editor.setComponents('<div class="cls">New component</div>');
     * // or
     * editor.setComponents({
     *  type: 'text',
     *   classes:['cls'],
     *   content: 'New component'
     * });
     */
    setComponents: function setComponents(components) {
      em.setComponents(components);
      return this;
    },

    /**
     * Add components
     * @param {Array<Object>|Object|string} components HTML string or components model
     * @param {Object} opts Options
     * @param {Boolean} [opts.avoidUpdateStyle=false] If the HTML string contains styles,
     * by default, they will be created and, if already exist, updated. When this option
     * is true, styles already created will not be updated.
     * @return {Array<Component>}
     * @example
     * editor.addComponents('<div class="cls">New component</div>');
     * // or
     * editor.addComponents({
     *  type: 'text',
     *   classes:['cls'],
     *   content: 'New component'
     * });
     */
    addComponents: function addComponents(components, opts) {
      return this.getWrapper().append(components, opts);
    },

    /**
     * Returns style in JSON format object
     * @return {Object}
     */
    getStyle: function getStyle() {
      return em.get('CssComposer').getAll();
    },

    /**
     * Set style inside editor's canvas. This method overrides actual style
     * @param {Array<Object>|Object|string} style CSS string or style model
     * @return {this}
     * @example
     * editor.setStyle('.cls{color: red}');
     * //or
     * editor.setStyle({
     *   selectors: ['cls']
     *   style: { color: 'red' }
     * });
     */
    setStyle: function setStyle(style) {
      em.setStyle(style);
      return this;
    },

    /**
     * Returns the last selected component, if there is one
     * @return {Model}
     */
    getSelected: function getSelected() {
      return em.getSelected();
    },

    /**
     * Returns an array of all selected components
     * @return {Array}
     */
    getSelectedAll: function getSelectedAll() {
      return em.getSelectedAll();
    },

    /**
     * Get a stylable entity from the selected component.
     * If you select a component without classes the entity is the Component
     * itself and all changes will go inside its 'style' attribute. Otherwise,
     * if the selected component has one or more classes, the function will
     * return the corresponding CSS Rule
     * @return {Model}
     */
    getSelectedToStyle: function getSelectedToStyle() {
      var selected = em.getSelected();

      if (selected) {
        return this.StyleManager.getModelToStyle(selected);
      }
    },

    /**
     * Select a component
     * @param  {Component|HTMLElement} el Component to select
     * @param  {Object} [opts] Options
     * @param  {Boolean} [opts.scroll] Scroll canvas to the selected element
     * @return {this}
     * @example
     * // Select dropped block
     * editor.on('block:drag:stop', function(model) {
     *  editor.select(model);
     * });
     */
    select: function select(el, opts) {
      em.setSelected(el, opts);
      return this;
    },

    /**
     * Add component to selection
     * @param  {Component|HTMLElement|Array} el Component to select
     * @return {this}
     * @example
     * editor.selectAdd(model);
     */
    selectAdd: function selectAdd(el) {
      em.addSelected(el);
      return this;
    },

    /**
     * Remove component from selection
     * @param  {Component|HTMLElement|Array} el Component to select
     * @return {this}
     * @example
     * editor.selectRemove(model);
     */
    selectRemove: function selectRemove(el) {
      em.removeSelected(el);
      return this;
    },

    /**
     * Toggle component selection
     * @param  {Component|HTMLElement|Array} el Component to select
     * @return {this}
     * @example
     * editor.selectToggle(model);
     */
    selectToggle: function selectToggle(el) {
      em.toggleSelected(el);
      return this;
    },

    /**
     * Set device to the editor. If the device exists it will
     * change the canvas to the proper width
     * @param {string} name Name of the device
     * @return {this}
     * @example
     * editor.setDevice('Tablet');
     */
    setDevice: function setDevice(name) {
      em.set('device', name);
      return this;
    },

    /**
     * Return the actual active device
     * @return {string} Device name
     * @example
     * var device = editor.getDevice();
     * console.log(device);
     * // 'Tablet'
     */
    getDevice: function getDevice() {
      return em.get('device');
    },

    /**
     * Execute command
     * @param {string} id Command ID
     * @param {Object} options Custom options
     * @return {*} The return is defined by the command
     * @example
     * editor.runCommand('myCommand', {someValue: 1});
     */
    runCommand: function runCommand(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return em.get('Commands').run(id, options);
    },

    /**
     * Stop the command if stop method was provided
     * @param {string} id Command ID
     * @param {Object} options Custom options
     * @return {*} The return is defined by the command
     * @example
     * editor.stopCommand('myCommand', {someValue: 1});
     */
    stopCommand: function stopCommand(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return em.get('Commands').stop(id, options);
    },

    /**
     * Store data to the current storage
     * @param {Function} clb Callback function
     * @return {Object} Stored data
     */
    store: function store(clb) {
      return em.store(clb);
    },

    /**
     * Load data from the current storage
     * @param {Function} clb Callback function
     * @return {Object} Stored data
     */
    load: function load(clb) {
      return em.load(clb);
    },

    /**
     * Returns container element. The one which was indicated as 'container'
     * on init method
     * @return {HTMLElement}
     */
    getContainer: function getContainer() {
      return c.el;
    },

    /**
     * Return the count of changes made to the content and not yet stored.
     * This count resets at any `store()`
     * @return {number}
     */
    getDirtyCount: function getDirtyCount() {
      return em.getDirtyCount();
    },

    /**
     * Update editor dimensions and refresh data useful for positioning of tools
     *
     * This method could be useful when you update, for example, some position
     * of the editor element (eg. canvas, panels, etc.) with CSS, where without
     * refresh you'll get misleading position of tools (eg. rich text editor,
     * component highlighter, etc.)
     *
     * @private
     */
    refresh: function refresh() {
      em.refreshCanvas();
    },

    /**
     * Replace the built-in Rich Text Editor with a custom one.
     * @param {Object} obj Custom RTE Interface
     * @example
     * editor.setCustomRte({
     *   // Function for enabling custom RTE
     *   // el is the HTMLElement of the double clicked Text Component
     *   // rte is the same instance you have returned the first time you call
     *   // enable(). This is useful if need to check if the RTE is already enabled so
     *   // ion this case you'll need to return the RTE and the end of the function
     *   enable: function(el, rte) {
     *     rte = new MyCustomRte(el, {}); // this depends on the Custom RTE API
     *     ...
     *     return rte; // return the RTE instance
     *   },
     *
     *   // Disable the editor, called for example when you unfocus the Text Component
     *  disable: function(el, rte) {
     *     rte.blur(); // this depends on the Custom RTE API
     *  }
     *
     * // Called when the Text Component is focused again. If you returned the RTE instance
     * // from the enable function, the enable won't be called again instead will call focus,
     * // in this case to avoid double binding of the editor
     *  focus: function (el, rte) {
     *   rte.focus(); // this depends on the Custom RTE API
     *  }
     * });
     */
    setCustomRte: function setCustomRte(obj) {
      this.RichTextEditor.customRte = obj;
    },

    /**
     * Replace the default CSS parser with a custom one.
     * The parser function receives a CSS string as a parameter and expects
     * an array of CSSRule objects as a result. If you need to remove the
     * custom parser, pass `null` as the argument
     * @param {Function|null} parser Parser function
     * @return {this}
     * @example
     * editor.setCustomParserCss(css => {
     *  const result = [];
     *  // ... parse the CSS string
     *  result.push({
     *    selectors: '.someclass, div .otherclass',
     *    style: { color: 'red' }
     *  })
     *  // ...
     *  return result;
     * });
     */
    setCustomParserCss: function setCustomParserCss(parser) {
      this.Parser.getConfig().parserCss = parser;
      return this;
    },

    /**
     * Change the global drag mode of components.
     * To get more about this feature read: https://github.com/artf/grapesjs/issues/1936
     * @param {String} value Drag mode, options: 'absolute' | 'translate'
     * @returns {this}
     */
    setDragMode: function setDragMode(value) {
      em.setDragMode(value);
      return this;
    },

    /**
     * Trigger event log message
     * @param  {*} msg Message to log
     * @param  {Object} [opts={}] Custom options
     * @param  {String} [opts.ns=''] Namespace of the log (eg. to use in plugins)
     * @param  {String} [opts.level='debug'] Level of the log, `debug`, `info`, `warning`, `error`
     * @return {this}
     * @example
     * editor.log('Something done!', { ns: 'from-plugin-x', level: 'info' });
     * // This will trigger following events
     * // `log`, `log:info`, `log-from-plugin-x`, `log-from-plugin-x:info`
     * // Callbacks of those events will always receive the message and
     * // options, as arguments, eg:
     * // editor.on('log:info', (msg, opts) => console.info(msg, opts))
     */
    log: function log(msg) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      em.log(msg, opts);
      return this;
    },

    /**
     * Attach event
     * @param  {string} event Event name
     * @param  {Function} callback Callback function
     * @return {this}
     */
    on: function on(event, callback) {
      em.on(event, callback);
      return this;
    },

    /**
     * Attach event and detach it after the first run
     * @param  {string} event Event name
     * @param  {Function} callback Callback function
     * @return {this}
     */
    once: function once(event, callback) {
      em.once(event, callback);
      return this;
    },

    /**
     * Detach event
     * @param  {string} event Event name
     * @param  {Function} callback Callback function
     * @return {this}
     */
    off: function off(event, callback) {
      em.off(event, callback);
      return this;
    },

    /**
     * Trigger event
     * @param  {string} event Event to trigger
     * @return {this}
     */
    trigger: function trigger(event) {
      em.trigger.apply(em, arguments);
      return this;
    },

    /**
     * Destroy the editor
     */
    destroy: function destroy() {
      return em.destroyAll();
    },

    /**
     * Returns editor element
     * @return {HTMLElement}
     * @private
     */
    getEl: function getEl() {
      return editorView.el;
    },

    /**
     * Returns editor model
     * @return {Model}
     * @private
     */
    getModel: function getModel() {
      return em;
    },

    /**
     * Render editor
     * @return {HTMLElement}
     */
    render: function render() {
      var _this = this;

      // Do post render stuff after the iframe is loaded otherwise it'll
      // be empty during tests
      em.on('loaded', function () {
        _this.UndoManager.clear();

        em.get('modules').forEach(function (module) {
          module.postRender && module.postRender(editorView);
        });
      });
      editorView.render();
      return editorView.el;
    }
  };
});

/***/ }),

/***/ "./src/editor/model/Editor.js":
/*!************************************!*\
  !*** ./src/editor/model/Editor.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_extender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/extender */ "./src/utils/extender.js");
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





var deps = [__webpack_require__(/*! utils */ "./src/utils/index.js"), __webpack_require__(/*! keymaps */ "./src/keymaps/index.js"), __webpack_require__(/*! undo_manager */ "./src/undo_manager/index.js"), __webpack_require__(/*! storage_manager */ "./src/storage_manager/index.js"), __webpack_require__(/*! device_manager */ "./src/device_manager/index.js"), __webpack_require__(/*! parser */ "./src/parser/index.js"), __webpack_require__(/*! selector_manager */ "./src/selector_manager/index.js"), __webpack_require__(/*! style_manager */ "./src/style_manager/index.js"), __webpack_require__(/*! modal_dialog */ "./src/modal_dialog/index.js"), __webpack_require__(/*! code_manager */ "./src/code_manager/index.js"), __webpack_require__(/*! panels */ "./src/panels/index.js"), // require('rich_text_editor'),
// require('asset_manager'),
__webpack_require__(/*! css_composer */ "./src/css_composer/index.js"), __webpack_require__(/*! trait_manager */ "./src/trait_manager/index.js"), __webpack_require__(/*! dom_components */ "./src/dom_components/index.js"), __webpack_require__(/*! navigator */ "./src/navigator/index.js"), __webpack_require__(/*! canvas */ "./src/canvas/index.js"), __webpack_require__(/*! commands */ "./src/commands/index.js"), __webpack_require__(/*! block_manager */ "./src/block_manager/index.js")];
var Collection = backbone__WEBPACK_IMPORTED_MODULE_2___default.a.Collection;
var timedInterval;
var updateItr;
Object(utils_extender__WEBPACK_IMPORTED_MODULE_3__["default"])({
  Backbone: backbone__WEBPACK_IMPORTED_MODULE_2___default.a,
  $: backbone__WEBPACK_IMPORTED_MODULE_2___default.a.$
});
var $ = backbone__WEBPACK_IMPORTED_MODULE_2___default.a.$;
var logs = {
  debug: console.log,
  info: console.info,
  warning: console.warn,
  error: console.error
};
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_2___default.a.Model.extend({
  defaults: function defaults() {
    return {
      editing: 0,
      selected: new Collection(),
      clipboard: null,
      dmode: 0,
      componentHovered: null,
      previousModel: null,
      changesCount: 0,
      storables: [],
      modules: [],
      toLoad: [],
      opened: {},
      device: ''
    };
  },
  initialize: function initialize() {
    var _this = this;

    var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.config = c;
    this.set('Config', c);
    this.set('modules', []);
    this.set('toLoad', []);
    this.set('storables', []);
    this.set('dmode', c.dragMode);
    var el = c.el;
    var log = c.log;
    var toLog = log === true ? Object(underscore__WEBPACK_IMPORTED_MODULE_1__["keys"])(logs) : Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(log) ? log : [];
    if (el && c.fromElement) this.config.components = el.innerHTML;
    this.attrsOrig = el ? Object(underscore__WEBPACK_IMPORTED_MODULE_1__["toArray"])(el.attributes).reduce(function (res, next) {
      res[next.nodeName] = next.nodeValue;
      return res;
    }, {}) : ''; // Load modules

    deps.forEach(function (name) {
      return _this.loadModule(name);
    });
    this.on('change:componentHovered', this.componentHovered, this);
    this.on('change:changesCount', this.updateChanges, this);
    toLog.forEach(function (e) {
      return _this.listenLog(e);
    }); // Deprecations

    [{
      from: 'change:selectedComponent',
      to: 'component:toggled'
    }].forEach(function (event) {
      var eventFrom = event.from;
      var eventTo = event.to;

      _this.listenTo(_this, eventFrom, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this.trigger.apply(_this, [eventTo].concat(args));

        _this.logWarning("The event '".concat(eventFrom, "' is deprecated, replace it with '").concat(eventTo, "'"));
      });
    });
  },
  getContainer: function getContainer() {
    return this.config.el;
  },
  listenLog: function listenLog(event) {
    this.listenTo(this, "log:".concat(event), logs[event]);
  },

  /**
   * Get configurations
   * @param  {string} [prop] Property name
   * @return {any} Returns the configuration object or
   *  the value of the specified property
   */
  getConfig: function getConfig(prop) {
    var config = this.config;
    return Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(prop) ? config : config[prop];
  },

  /**
   * Should be called after all modules and plugins are loaded
   * @param {Function} clb
   * @private
   */
  loadOnStart: function loadOnStart() {
    var _this2 = this;

    var clb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var sm = this.get('StorageManager'); // Generally, with `onLoad`, the module will try to load the data from
    // its configurations

    this.get('toLoad').forEach(function (module) {
      module.onLoad();
    }); // Stuff to do post load

    var postLoad = function postLoad() {
      var modules = _this2.get('modules');

      modules.forEach(function (module) {
        return module.postLoad && module.postLoad(_this2);
      });
      clb && clb();
    };

    if (sm && sm.canAutoload()) {
      this.load(postLoad);
    } else {
      postLoad();
    }
  },

  /**
   * Set the alert before unload in case it's requested
   * and there are unsaved changes
   * @private
   */
  updateChanges: function updateChanges() {
    var _this3 = this;

    var stm = this.get('StorageManager');
    var changes = this.get('changesCount');
    updateItr && clearTimeout(updateItr);
    updateItr = setTimeout(function () {
      return _this3.trigger('update');
    });

    if (this.config.noticeOnUnload) {
      window.onbeforeunload = changes ? function (e) {
        return 1;
      } : null;
    }

    if (stm.isAutosave() && changes >= stm.getStepsBeforeSave()) {
      this.store();
    }
  },

  /**
   * Load generic module
   * @param {String} moduleName Module name
   * @return {this}
   * @private
   */
  loadModule: function loadModule(moduleName) {
    var config = this.config;
    var Module = moduleName.default || moduleName;
    var Mod = new Module();
    var name = Mod.name.charAt(0).toLowerCase() + Mod.name.slice(1);
    var cfgParent = !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(config[name]) ? config[name] : config[Mod.name];
    var cfg = cfgParent || {};
    var sm = this.get('StorageManager');
    cfg.pStylePrefix = config.pStylePrefix || '';

    if (!Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(cfgParent) && !cfgParent) {
      cfg._disable = 1;
    }

    if (Mod.storageKey && Mod.store && Mod.load && sm) {
      cfg.stm = sm;
      var storables = this.get('storables');
      storables.push(Mod);
      this.set('storables', storables);
    }

    cfg.em = this;
    Mod.init(_objectSpread({}, cfg)); // Bind the module to the editor model if public

    !Mod.private && this.set(Mod.name, Mod);
    Mod.onLoad && this.get('toLoad').push(Mod);
    this.get('modules').push(Mod);
    return this;
  },

  /**
   * Initialize editor model and set editor instance
   * @param {Editor} editor Editor instance
   * @return {this}
   * @private
   */
  init: function init(editor) {
    this.set('Editor', editor);
  },
  getEditor: function getEditor() {
    return this.get('Editor');
  },

  /**
   * This method handles updates on the editor and tries to store them
   * if requested and if the changesCount is exceeded
   * @param  {Object} model
   * @param  {any} val  Value
   * @param  {Object} opt  Options
   * @private
   * */
  handleUpdates: function handleUpdates(model, val) {
    var _this4 = this;

    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // Component has been added temporarily - do not update storage or record changes
    if (opt.temporary) {
      return;
    }

    timedInterval && clearInterval(timedInterval);
    timedInterval = setTimeout(function () {
      if (!opt.avoidStore) {
        _this4.set('changesCount', _this4.get('changesCount') + 1, opt);
      }
    }, 0);
  },

  /**
   * Callback on component hover
   * @param   {Object}   Model
   * @param   {Mixed}   New value
   * @param   {Object}   Options
   * @private
   * */
  componentHovered: function componentHovered(editor, component, options) {
    var prev = this.previous('componentHovered');
    prev && this.trigger('component:unhovered', prev, options);
    component && this.trigger('component:hovered', component, options);
  },

  /**
   * Returns model of the selected component
   * @return {Component|null}
   * @private
   */
  getSelected: function getSelected() {
    return this.get('selected').last();
  },

  /**
   * Returns an array of all selected components
   * @return {Array}
   * @private
   */
  getSelectedAll: function getSelectedAll() {
    return this.get('selected').models;
  },

  /**
   * Select a component
   * @param  {Component|HTMLElement} el Component to select
   * @param  {Object} [opts={}] Options, optional
   * @private
   */
  setSelected: function setSelected(el) {
    var _this5 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var scroll = opts.scroll;
    var multiple = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(el);
    var els = multiple ? el : [el];
    var selected = this.get('selected');
    var added; // If an array is passed remove all selected
    // expect those yet to be selected

    multiple && this.removeSelected(selected.filter(function (s) {
      return !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["contains"])(els, s);
    }));
    els.forEach(function (el) {
      var model = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getModel"])(el, $);
      if (model && !model.get('selectable')) return;
      !multiple && _this5.removeSelected(selected.filter(function (s) {
        return s !== model;
      }));

      _this5.addSelected(model, opts);

      added = model;
    });
    scroll && added && this.get('Canvas').scrollTo(added, scroll);
  },

  /**
   * Add component to selection
   * @param  {Component|HTMLElement} el Component to select
   * @param  {Object} [opts={}] Options, optional
   * @private
   */
  addSelected: function addSelected(el) {
    var _this6 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getModel"])(el, $);
    var models = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(model) ? model : [model];
    models.forEach(function (model) {
      if (model && !model.get('selectable')) return;

      var selected = _this6.get('selected');

      opts.forceChange && selected.remove(model, opts);
      selected.push(model, opts);
    });
  },

  /**
   * Remove component from selection
   * @param  {Component|HTMLElement} el Component to select
   * @param  {Object} [opts={}] Options, optional
   * @private
   */
  removeSelected: function removeSelected(el) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.get('selected').remove(Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getModel"])(el, $), opts);
  },

  /**
   * Toggle component selection
   * @param  {Component|HTMLElement} el Component to select
   * @param  {Object} [opts={}] Options, optional
   * @private
   */
  toggleSelected: function toggleSelected(el) {
    var _this7 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getModel"])(el, $);
    var models = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(model) ? model : [model];
    models.forEach(function (model) {
      if (_this7.get('selected').contains(model)) {
        _this7.removeSelected(model, opts);
      } else {
        _this7.addSelected(model, opts);
      }
    });
  },

  /**
   * Hover a component
   * @param  {Component|HTMLElement} el Component to select
   * @param  {Object} [opts={}] Options, optional
   * @private
   */
  setHovered: function setHovered(el) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getModel"])(el, $);
    if (model && !model.get('hoverable')) return;
    opts.forceChange && this.set('componentHovered', '');
    this.set('componentHovered', model, opts);
  },

  /**
   * Set components inside editor's canvas. This method overrides actual components
   * @param {Object|string} components HTML string or components model
   * @return {this}
   * @private
   */
  setComponents: function setComponents(components) {
    return this.get('DomComponents').setComponents(components);
  },

  /**
   * Returns components model from the editor's canvas
   * @return {Components}
   * @private
   */
  getComponents: function getComponents() {
    var cmp = this.get('DomComponents');
    var cm = this.get('CodeManager');
    if (!cmp || !cm) return;
    var wrp = cmp.getComponents();
    return cm.getCode(wrp, 'json');
  },

  /**
   * Set style inside editor's canvas. This method overrides actual style
   * @param {Object|string} style CSS string or style model
   * @return {this}
   * @private
   */
  setStyle: function setStyle(style) {
    var rules = this.get('CssComposer').getAll();

    for (var i = 0, len = rules.length; i < len; i++) {
      rules.pop();
    }

    rules.add(style);
    return this;
  },

  /**
   * Returns rules/style model from the editor's canvas
   * @return {Rules}
   * @private
   */
  getStyle: function getStyle() {
    return this.get('CssComposer').getAll();
  },

  /**
   * Returns HTML built inside canvas
   * @return {string} HTML string
   * @private
   */
  getHtml: function getHtml() {
    var config = this.config;
    var exportWrapper = config.exportWrapper;
    var wrapperIsBody = config.wrapperIsBody;
    var js = config.jsInHtml ? this.getJs() : '';
    var wrp = this.get('DomComponents').getComponent();
    var html = this.get('CodeManager').getCode(wrp, 'html', {
      exportWrapper: exportWrapper,
      wrapperIsBody: wrapperIsBody
    });
    html += js ? "<script>".concat(js, "</script>") : '';
    return html;
  },

  /**
   * Returns CSS built inside canvas
   * @param {Object} [opts={}] Options
   * @return {string} CSS string
   * @private
   */
  getCss: function getCss() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var config = this.config;
    var wrapperIsBody = config.wrapperIsBody;
    var avoidProt = opts.avoidProtected;
    var keepUnusedStyles = !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(opts.keepUnusedStyles) ? opts.keepUnusedStyles : config.keepUnusedStyles;
    var cssc = this.get('CssComposer');
    var wrp = this.get('DomComponents').getComponent();
    var protCss = !avoidProt ? config.protectedCss : '';
    return protCss + this.get('CodeManager').getCode(wrp, 'css', {
      cssc: cssc,
      wrapperIsBody: wrapperIsBody,
      keepUnusedStyles: keepUnusedStyles
    });
  },

  /**
   * Returns JS of all components
   * @return {string} JS string
   * @private
   */
  getJs: function getJs() {
    var wrp = this.get('DomComponents').getWrapper();
    return this.get('CodeManager').getCode(wrp, 'js').trim();
  },

  /**
   * Store data to the current storage
   * @param {Function} clb Callback function
   * @return {Object} Stored data
   * @private
   */
  store: function store(clb) {
    var _this8 = this;

    var sm = this.get('StorageManager');
    var store = {};
    if (!sm) return; // Fetch what to store

    this.get('storables').forEach(function (m) {
      var obj = m.store(1);

      for (var el in obj) {
        store[el] = obj[el];
      }
    });
    sm.store(store, function (res) {
      clb && clb(res);

      _this8.set('changesCount', 0);

      _this8.trigger('storage:store', store);
    });
    return store;
  },

  /**
   * Load data from the current storage
   * @param {Function} clb Callback function
   * @private
   */
  load: function load() {
    var _this9 = this;

    var clb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    this.getCacheLoad(1, function (res) {
      _this9.get('storables').forEach(function (module) {
        return module.load(res);
      });

      clb && clb(res);
    });
  },

  /**
   * Returns cached load
   * @param {Boolean} force Force to reload
   * @param {Function} clb Callback function
   * @return {Object}
   * @private
   */
  getCacheLoad: function getCacheLoad(force, clb) {
    var _this10 = this;

    var f = force ? 1 : 0;
    if (this.cacheLoad && !f) return this.cacheLoad;
    var sm = this.get('StorageManager');
    var load = [];
    if (!sm) return {};
    this.get('storables').forEach(function (m) {
      var key = m.storageKey;
      key = typeof key === 'function' ? key() : key;
      var keys = key instanceof Array ? key : [key];
      keys.forEach(function (k) {
        load.push(k);
      });
    });
    sm.load(load, function (res) {
      _this10.cacheLoad = res;
      clb && clb(res);
      setTimeout(function () {
        return _this10.trigger('storage:load', res);
      }, 0);
    });
  },

  /**
   * Returns device model by name
   * @return {Device|null}
   * @private
   */
  getDeviceModel: function getDeviceModel() {
    var name = this.get('device');
    return this.get('DeviceManager').get(name);
  },

  /**
   * Run default command if setted
   * @param {Object} [opts={}] Options
   * @private
   */
  runDefault: function runDefault() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var command = this.get('Commands').get(this.config.defaultCommand);
    if (!command || this.defaultRunning) return;
    command.stop(this, this, opts);
    command.run(this, this, opts);
    this.defaultRunning = 1;
  },

  /**
   * Stop default command
   * @param {Object} [opts={}] Options
   * @private
   */
  stopDefault: function stopDefault() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var command = this.get('Commands').get(this.config.defaultCommand);
    if (!command) return;
    command.stop(this, this, opts);
    this.defaultRunning = 0;
  },

  /**
   * Update canvas dimensions and refresh data useful for tools positioning
   * @private
   */
  refreshCanvas: function refreshCanvas() {
    this.set('canvasOffset', null);
    this.set('canvasOffset', this.get('Canvas').getOffset());
  },

  /**
   * Clear all selected stuf inside the window, sometimes is useful to call before
   * doing some dragging opearation
   * @param {Window} win If not passed the current one will be used
   * @private
   */
  clearSelection: function clearSelection(win) {
    var w = win || window;
    w.getSelection().removeAllRanges();
  },

  /**
   * Get the current media text
   * @return {string}
   */
  getCurrentMedia: function getCurrentMedia() {
    var config = this.config;
    var device = this.getDeviceModel();
    var condition = config.mediaCondition;
    var preview = config.devicePreviewMode;
    var width = device && device.get('widthMedia');
    return device && width && !preview ? "(".concat(condition, ": ").concat(width, ")") : '';
  },

  /**
   * Return the component wrapper
   * @return {Component}
   */
  getWrapper: function getWrapper() {
    return this.get('DomComponents').getWrapper();
  },

  /**
   * Return the count of changes made to the content and not yet stored.
   * This count resets at any `store()`
   * @return {number}
   */
  getDirtyCount: function getDirtyCount() {
    return this.get('changesCount');
  },
  getZoomDecimal: function getZoomDecimal() {
    return this.get('Canvas').getZoomDecimal();
  },
  setDragMode: function setDragMode(value) {
    return this.set('dmode', value);
  },

  /**
   * Returns true if the editor is in absolute mode
   * @returns {Boolean}
   */
  inAbsoluteMode: function inAbsoluteMode() {
    return this.get('dmode') === 'absolute';
  },

  /**
   * Destroy editor
   */
  destroyAll: function destroyAll() {
    var _this$attributes = this.attributes,
        DomComponents = _this$attributes.DomComponents,
        CssComposer = _this$attributes.CssComposer,
        UndoManager = _this$attributes.UndoManager,
        Panels = _this$attributes.Panels,
        Canvas = _this$attributes.Canvas,
        Keymaps = _this$attributes.Keymaps;
    DomComponents.clear();
    CssComposer.clear();
    UndoManager.clear().removeAll();
    Panels.getPanels().reset();
    Canvas.getCanvasView().remove();
    Keymaps.removeAll();
    this.view.remove();
    this.stopListening();
    $(this.config.el).empty().attr(this.attrsOrig);
  },
  setEditing: function setEditing(value) {
    this.set('editing', value);
    return this;
  },
  isEditing: function isEditing() {
    return !!this.get('editing');
  },
  log: function log(msg) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ns = opts.ns,
        _opts$level = opts.level,
        level = _opts$level === void 0 ? 'debug' : _opts$level;
    this.trigger('log', msg, opts);
    level && this.trigger("log:".concat(level), msg, opts);

    if (ns) {
      var logNs = "log-".concat(ns);
      this.trigger(logNs, msg, opts);
      level && this.trigger("".concat(logNs, ":").concat(level), msg, opts);
    }
  },
  logInfo: function logInfo(msg, opts) {
    this.log(msg, _objectSpread({}, opts, {
      level: 'info'
    }));
  },
  logWarning: function logWarning(msg, opts) {
    this.log(msg, _objectSpread({}, opts, {
      level: 'warning'
    }));
  },
  logError: function logError(msg, opts) {
    this.log(msg, _objectSpread({}, opts, {
      level: 'error'
    }));
  },

  /**
   * Set/get data from the HTMLElement
   * @param  {HTMLElement} el
   * @param  {string} name Data name
   * @param  {any} value Date value
   * @return {any}
   * @private
   */
  data: function data(el, name, value) {
    var varName = '_gjs-data';

    if (!el[varName]) {
      el[varName] = {};
    }

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(value)) {
      return el[varName][name];
    } else {
      el[varName][name] = value;
    }
  }
}));

/***/ }),

/***/ "./src/editor/view/EditorView.js":
/*!***************************************!*\
  !*** ./src/editor/view/EditorView.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize() {
    var _this = this;

    var model = this.model;
    model.view = this;
    this.conf = model.config;
    this.pn = model.get('Panels');
    model.on('loaded', function () {
      _this.pn.active();

      _this.pn.disableButtons();

      model.runDefault();
      setTimeout(function () {
        return model.trigger('load', model.get('Editor'));
      });
    });
  },
  render: function render() {
    var model = this.model;
    var el = this.$el;
    var conf = this.conf;
    var contEl = $(conf.el || "body ".concat(conf.container));
    var pfx = conf.stylePrefix;
    el.empty();
    if (conf.width) contEl.css('width', conf.width);
    if (conf.height) contEl.css('height', conf.height);
    el.append(model.get('Canvas').render());
    el.append(this.pn.render());
    el.attr('class', "".concat(pfx, "editor ").concat(pfx, "one-bg ").concat(pfx, "two-color"));
    contEl.addClass("".concat(pfx, "editor-cont")).empty().append(el);
    return this;
  }
}));

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cash_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cash-dom */ "./node_modules/cash-dom/dist/cash.js");
/* harmony import */ var cash_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cash_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editor */ "./src/editor/index.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_polyfills__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/polyfills */ "./src/utils/polyfills.js");
/* harmony import */ var _plugin_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugin_manager */ "./src/plugin_manager/index.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






Object(utils_polyfills__WEBPACK_IMPORTED_MODULE_4__["default"])();
var plugins = new _plugin_manager__WEBPACK_IMPORTED_MODULE_5__["default"]();
var editors = [];
var defaultConfig = {
  // If true renders editor on init
  autorender: 1,
  // Array of plugins to init
  plugins: [],
  // Custom options for plugins
  pluginsOpts: {}
};
/* harmony default export */ __webpack_exports__["default"] = ({
  $: cash_dom__WEBPACK_IMPORTED_MODULE_1___default.a,
  editors: editors,
  plugins: plugins,
  // Will be replaced on build
  version: '0.15.7',

  /**
   * Initialize the editor with passed options
   * @param {Object} config Configuration object
   * @param {string|HTMLElement} config.container Selector which indicates where render the editor
   * @param {Boolean} [config.autorender=true] If true, auto-render the content
   * @param {Array} [config.plugins=[]] Array of plugins to execute on start
   * @param {Object} [config.pluginsOpts={}] Custom options for plugins
   * @return {Editor} Editor instance
   * @example
   * var editor = grapesjs.init({
   *   container: '#myeditor',
   *   components: '<article class="hello">Hello world</article>',
   *   style: '.hello{color: red}',
   * })
   */
  init: function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var els = config.container;
    if (!els) throw new Error("'container' is required");
    config = _objectSpread({}, defaultConfig, {}, config);
    config.el = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isElement"])(els) ? els : document.querySelector(els);
    var editor = new _editor__WEBPACK_IMPORTED_MODULE_2__["default"](config).init(); // Load plugins

    config.plugins.forEach(function (pluginId) {
      var plugin = plugins.get(pluginId);
      var plgOptions = config.pluginsOpts[pluginId] || {}; // Try to search in global context

      if (!plugin) {
        var wplg = window[pluginId];
        plugin = wplg && wplg.default ? wplg.default : wplg;
      }

      if (plugin) {
        plugin(editor, plgOptions);
      } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(pluginId)) {
        pluginId(editor, plgOptions);
      } else {
        console.warn("Plugin ".concat(pluginId, " not found"));
      }
    }); // Execute `onLoad` on modules once all plugins are initialized.
    // A plugin might have extended/added some custom type so this
    // is a good point to load stuff like components, css rules, etc.

    editor.getModel().loadOnStart();
    config.autorender && editor.render();
    editors.push(editor);
    return editor;
  }
});

/***/ }),

/***/ "./src/keymaps/index.js":
/*!******************************!*\
  !*** ./src/keymaps/index.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var keymaster__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! keymaster */ "./node_modules/keymaster/keymaster.js");
/* harmony import */ var keymaster__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(keymaster__WEBPACK_IMPORTED_MODULE_3__);



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * You can customize the initial state of the module from the editor initialization
 * ```js
 * const editor = grapesjs.init({
 *  keymaps: {
 *     // Object of keymaps
 *    defaults: {
 *      'your-namespace:keymap-name' {
 *        keys: '⌘+z, ctrl+z',
 *        handler: 'some-command-id'
 *      },
 *      ...
 *    }
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const keymaps = editor.Keymaps;
 * ```
 *
 * * [getConfig](#getconfig)
 * * [add](#add)
 * * [get](#get)
 * * [getAll](#getAll)
 * * [remove](#remove)
 * * [removeAll](#removeall)
 *
 * @module Keymaps
 */


/* harmony default export */ __webpack_exports__["default"] = (function () {
  var em;
  var config;
  var keymaps = {};
  var configDef = {
    defaults: {
      'core:undo': {
        keys: '⌘+z, ctrl+z',
        handler: 'core:undo'
      },
      'core:redo': {
        keys: '⌘+shift+z, ctrl+shift+z',
        handler: 'core:redo'
      },
      'core:copy': {
        keys: '⌘+c, ctrl+c',
        handler: 'core:copy'
      },
      'core:paste': {
        keys: '⌘+v, ctrl+v',
        handler: 'core:paste'
      },
      'core:component-next': {
        keys: 's',
        handler: 'core:component-next'
      },
      'core:component-prev': {
        keys: 'w',
        handler: 'core:component-prev'
      },
      'core:component-enter': {
        keys: 'd',
        handler: 'core:component-enter'
      },
      'core:component-exit': {
        keys: 'a',
        handler: 'core:component-exit'
      },
      'core:component-delete': {
        keys: 'backspace, delete',
        handler: 'core:component-delete'
      }
    }
  };
  return {
    keymaster: keymaster__WEBPACK_IMPORTED_MODULE_3___default.a,
    name: 'Keymaps',

    /**
     * Get module configurations
     * @return {Object} Configuration object
     */
    getConfig: function getConfig() {
      return config;
    },

    /**
     * Initialize module
     * @param {Object} config Configurations
     * @private
     */
    init: function init() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      config = _objectSpread({}, configDef, {}, opts);
      em = config.em;
      this.em = em;
      return this;
    },
    onLoad: function onLoad() {
      var defKeys = config.defaults;

      for (var id in defKeys) {
        var value = defKeys[id];
        this.add(id, value.keys, value.handler);
      }
    },

    /**
     * Add new keymap
     * @param {string} id Keymap id
     * @param {string} keys Keymap keys, eg. `ctrl+a`, `⌘+z, ctrl+z`
     * @param {Function|string} handler Keymap handler, might be a function
     * @param {Object} [opts={}] Options
     * @return {Object} Added keymap
     *  or just a command id as a string
     * @example
     * // 'ns' is just a custom namespace
     * keymaps.add('ns:my-keymap', '⌘+j, ⌘+u, ctrl+j, alt+u', editor => {
     *  console.log('do stuff');
     * });
     * // or
     * keymaps.add('ns:my-keymap', '⌘+s, ctrl+s', 'some-gjs-command');
     *
     * // listen to events
     * editor.on('keymap:emit', (id, shortcut, e) => {
     *  // ...
     * })
     */
    add: function add(id, keys, handler) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var em = this.em;
      var cmd = em.get('Commands');
      var editor = em.getEditor();
      var canvas = em.get('Canvas');
      var keymap = {
        id: id,
        keys: keys,
        handler: handler
      };
      var pk = keymaps[id];
      pk && this.remove(id);
      keymaps[id] = keymap;
      keymaster__WEBPACK_IMPORTED_MODULE_3___default()(keys, function (e, h) {
        // It's safer putting handlers resolution inside the callback
        var opt = {
          event: e,
          h: h
        };
        handler = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(handler) ? cmd.get(handler) : handler;
        opts.prevent && canvas.getCanvasView().preventDefault(e);
        var ableTorun = !em.isEditing() && !editor.Canvas.isInputFocused();

        if (ableTorun || opts.force) {
          _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(handler) == 'object' ? handler.run(editor, 0, opt) : handler(editor, 0, opt);
          var args = [id, h.shortcut, e];
          em.trigger.apply(em, ['keymap:emit'].concat(args));
          em.trigger.apply(em, ["keymap:emit:".concat(id)].concat(args));
        }
      });
      em.trigger('keymap:add', keymap);
      return keymap;
    },

    /**
     * Get the keymap by id
     * @param {string} id Keymap id
     * @return {Object} Keymap object
     * @example
     * keymaps.get('ns:my-keymap');
     * // -> {keys, handler};
     */
    get: function get(id) {
      return keymaps[id];
    },

    /**
     * Get all keymaps
     * @return {Object}
     * @example
     * keymaps.getAll();
     * // -> {id1: {}, id2: {}};
     */
    getAll: function getAll() {
      return keymaps;
    },

    /**
     * Remove the keymap by id
     * @param {string} id Keymap id
     * @return {Object} Removed keymap
     * @example
     * keymaps.remove('ns:my-keymap');
     * // -> {keys, handler};
     */
    remove: function remove(id) {
      var em = this.em;
      var keymap = this.get(id);

      if (keymap) {
        delete keymaps[id];
        keymaster__WEBPACK_IMPORTED_MODULE_3___default.a.unbind(keymap.keys);
        em && em.trigger('keymap:remove', keymap);
        return keymap;
      }
    },

    /**
     * Remove all binded keymaps
     * @return {this}
     */
    removeAll: function removeAll() {
      var _this = this;

      Object.keys(keymaps).forEach(function (keymap) {
        return _this.remove(keymap);
      });
      return this;
    }
  };
});

/***/ }),

/***/ "./src/modal_dialog/config/config.js":
/*!*******************************************!*\
  !*** ./src/modal_dialog/config/config.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'mdl-',
  title: '',
  content: '',
  backdrop: true
});

/***/ }),

/***/ "./src/modal_dialog/index.js":
/*!***********************************!*\
  !*** ./src/modal_dialog/index.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/config */ "./src/modal_dialog/config/config.js");
/* harmony import */ var _model_Modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/Modal */ "./src/modal_dialog/model/Modal.js");
/* harmony import */ var _view_ModalView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view/ModalView */ "./src/modal_dialog/view/ModalView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/modal_dialog/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  modal: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const modal = editor.Modal;
 * ```
 *
 * * [open](#open)
 * * [close](#close)
 * * [isOpen](#isopen)
 * * [setTitle](#settitle)
 * * [getTitle](#gettitle)
 * * [setContent](#setcontent)
 * * [getContent](#getcontent)
 * * [onceClose](#onceclose)
 * * [onceOpen](#onceopen)
 *
 * @module Modal
 */



/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var model, modal;

  var triggerEvent = function triggerEvent(enable, em) {
    em && em.trigger("modal:".concat(enable ? 'open' : 'close'));
  };

  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'Modal',
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @private
     */
    init: function init() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_1__["default"], {}, config);
      var em = c.em;
      this.em = em;
      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix;
      model = new _model_Modal__WEBPACK_IMPORTED_MODULE_2__["default"](c);
      model.on('change:open', function (m, enb) {
        return triggerEvent(enb, em);
      });
      modal = new _view_ModalView__WEBPACK_IMPORTED_MODULE_3__["default"]({
        model: model,
        config: c
      });
      return this;
    },
    postRender: function postRender(view) {
      var el = view.model.getConfig().el || view.el;
      this.render().appendTo(el);
    },

    /**
     * Open the modal window
     * @param {Object} [opts={}] Options
     * @param {String|HTMLElement} [opts.title] Title to set for the modal
     * @param {String|HTMLElement} [opts.content] Content to set for the modal
     * @return {this}
     */
    open: function open() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      opts.title && this.setTitle(opts.title);
      opts.content && this.setContent(opts.content);
      modal.show();
      return this;
    },

    /**
     * Close the modal window
     * @return {this}
     */
    close: function close() {
      modal.hide();
      return this;
    },

    /**
     * Execute callback when the modal will be closed.
     * The callback will be called one only time
     * @param {Function} clb
     * @returns {this}
     */
    onceClose: function onceClose(clb) {
      this.em.once('modal:close', clb);
      return this;
    },

    /**
     * Execute callback when the modal will be opened.
     * The callback will be called one only time
     * @param {Function} clb
     * @returns {this}
     */
    onceOpen: function onceOpen(clb) {
      this.em.once('modal:open', clb);
      return this;
    },

    /**
     * Checks if the modal window is open
     * @return {Boolean}
     */
    isOpen: function isOpen() {
      return !!model.get('open');
    },

    /**
     * Set the title to the modal window
     * @param {string} title Title
     * @return {this}
     * @example
     * modal.setTitle('New title');
     */
    setTitle: function setTitle(title) {
      model.set('title', title);
      return this;
    },

    /**
     * Returns the title of the modal window
     * @return {string}
     */
    getTitle: function getTitle() {
      return model.get('title');
    },

    /**
     * Set the content of the modal window
     * @param {string|HTMLElement} content Content
     * @return {this}
     * @example
     * modal.setContent('<div>Some HTML content</div>');
     */
    setContent: function setContent(content) {
      model.set('content', ' ');
      model.set('content', content);
      return this;
    },

    /**
     * Get the content of the modal window
     * @return {string}
     */
    getContent: function getContent() {
      return model.get('content');
    },

    /**
     * Returns content element
     * @return {HTMLElement}
     * @private
     */
    getContentEl: function getContentEl() {
      return modal.getContent().get(0);
    },

    /**
     * Returns modal model
     * @return {Model}
     * @private
     */
    getModel: function getModel() {
      return model;
    },

    /**
     * Render the modal window
     * @return {HTMLElement}
     * @private
     */
    render: function render() {
      return modal.render().$el;
    }
  };
});

/***/ }),

/***/ "./src/modal_dialog/model/Modal.js":
/*!*****************************************!*\
  !*** ./src/modal_dialog/model/Modal.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    title: '',
    content: '',
    open: false
  }
}));

/***/ }),

/***/ "./src/modal_dialog/view/ModalView.js":
/*!********************************************!*\
  !*** ./src/modal_dialog/view/ModalView.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  template: function template(_ref) {
    var pfx = _ref.pfx,
        ppfx = _ref.ppfx,
        content = _ref.content,
        title = _ref.title;
    return "<div class=\"".concat(pfx, "dialog ").concat(ppfx, "one-bg ").concat(ppfx, "two-color\">\n      <div class=\"").concat(pfx, "header\">\n        <div class=\"").concat(pfx, "title\">").concat(title, "</div>\n        <div class=\"").concat(pfx, "btn-close\" data-close-modal>&Cross;</div>\n      </div>\n      <div class=\"").concat(pfx, "content\">\n        <div id=\"").concat(pfx, "c\">").concat(content, "</div>\n        <div style=\"clear:both\"></div>\n      </div>\n    </div>\n    <div class=\"").concat(pfx, "collector\" style=\"display: none\"></div>");
  },
  events: {
    click: 'onClick',
    'click [data-close-modal]': 'hide'
  },
  initialize: function initialize(o) {
    var model = this.model;
    var config = o.config || {};
    var pfx = config.stylePrefix || '';
    this.config = config;
    this.pfx = pfx;
    this.ppfx = config.pStylePrefix || '';
    this.listenTo(model, 'change:open', this.updateOpen);
    this.listenTo(model, 'change:title', this.updateTitle);
    this.listenTo(model, 'change:content', this.updateContent);
  },
  onClick: function onClick(e) {
    var bkd = this.config.backdrop;
    bkd && e.target === this.el && this.hide();
  },

  /**
   * Returns collector element
   * @return {HTMLElement}
   * @private
   */
  getCollector: function getCollector() {
    if (!this.$collector) this.$collector = this.$el.find('.' + this.pfx + 'collector');
    return this.$collector;
  },

  /**
   * Returns content element
   * @return {HTMLElement}
   * @private
   */
  getContent: function getContent() {
    var pfx = this.pfx;

    if (!this.$content) {
      this.$content = this.$el.find(".".concat(pfx, "content #").concat(pfx, "c"));
    }

    return this.$content;
  },

  /**
   * Returns title element
   * @return {HTMLElement}
   * @private
   */
  getTitle: function getTitle() {
    if (!this.$title) this.$title = this.$el.find('.' + this.pfx + 'title');
    return this.$title.get(0);
  },

  /**
   * Update content
   * @private
   * */
  updateContent: function updateContent() {
    var content = this.getContent();
    var children = content.children();
    var coll = this.getCollector();
    var body = this.model.get('content');
    children.length && coll.append(children);
    content.empty().append(body);
  },

  /**
   * Update title
   * @private
   * */
  updateTitle: function updateTitle() {
    var title = this.getTitle();
    if (title) title.innerHTML = this.model.get('title');
  },

  /**
   * Update open
   * @private
   * */
  updateOpen: function updateOpen() {
    this.el.style.display = this.model.get('open') ? '' : 'none';
  },

  /**
   * Hide modal
   * @private
   * */
  hide: function hide() {
    this.model.set('open', 0);
  },

  /**
   * Show modal
   * @private
   * */
  show: function show() {
    this.model.set('open', 1);
  },
  render: function render() {
    var el = this.$el;
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var obj = this.model.toJSON();
    obj.pfx = this.pfx;
    obj.ppfx = this.ppfx;
    el.html(this.template(obj));
    el.attr('class', "".concat(pfx, "container"));
    this.updateOpen();
    return this;
  }
}));

/***/ }),

/***/ "./src/navigator/config/config.js":
/*!****************************************!*\
  !*** ./src/navigator/config/config.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: '',
  // Specify the element to use as a container, string (query) or HTMLElement
  // With the empty value, nothing will be rendered
  appendTo: '',
  // Enable/Disable globally the possibility to sort layers
  sortable: 1,
  // Enable/Disable globally the possibility to hide layers
  hidable: 1,
  // Hide textnodes
  hideTextnode: 1,
  // Indicate a query string of the element to be selected as the root of layers.
  // By default the root is the wrapper
  root: '',
  // Indicates if the wrapper is visible in layers
  showWrapper: 1,
  // Show hovered components in canvas
  showHover: 1,
  // Scroll to selected component in Canvas when it's selected in Layers
  // true, false or `scrollIntoView`-like options,
  // `block: 'nearest'` avoids the issue of window scolling
  scrollCanvas: {
    behavior: 'smooth',
    block: 'nearest'
  },
  // Scroll to selected component in Layers when it's selected in Canvas
  // true, false or `scrollIntoView`-like options
  scrollLayers: {
    behavior: 'auto',
    block: 'nearest'
  },
  // Highlight when a layer component is hovered
  highlightHover: 1
});

/***/ }),

/***/ "./src/navigator/index.js":
/*!********************************!*\
  !*** ./src/navigator/index.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/config */ "./src/navigator/config/config.js");
/* harmony import */ var _view_ItemView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view/ItemView */ "./src/navigator/view/ItemView.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ __webpack_exports__["default"] = (function () {
  var em;
  var layers;
  var config = {};
  return {
    name: 'LayerManager',
    init: function init() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      config = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_1__["default"], {}, opts);
      config.stylePrefix = opts.pStylePrefix;
      em = config.em;
      return this;
    },
    getConfig: function getConfig() {
      return config;
    },
    onLoad: function onLoad() {
      layers = new _view_ItemView__WEBPACK_IMPORTED_MODULE_2__["default"]({
        level: 0,
        config: config,
        opened: config.opened || {},
        model: em.get('DomComponents').getWrapper()
      });
      em && em.on('component:selected', this.componentChanged);
      this.componentChanged();
    },
    postRender: function postRender() {
      var elTo = config.appendTo;
      var root = config.root;
      root && this.setRoot(root);

      if (elTo) {
        var el = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isElement"])(elTo) ? elTo : document.querySelector(elTo);
        el.appendChild(this.render());
      }
    },

    /**
     * Set new root for layers
     * @param {HTMLElement|Component|String} el Component to be set as the root
     * @return {self}
     */
    setRoot: function setRoot(el) {
      layers.setRoot(el);
      return this;
    },

    /**
     * Get the root of layers
     * @return {Component}
     */
    getRoot: function getRoot() {
      return layers.model;
    },

    /**
     * Return the view of layers
     * @return {View}
     */
    getAll: function getAll() {
      return layers;
    },

    /**
     * Triggered when the selected component is changed
     * @private
     */
    componentChanged: function componentChanged(selected) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (opts.fromLayers) return;
      var opened = em.get('opened');
      var model = em.getSelected();
      var scroll = config.scrollLayers;
      var parent = model && model.collection ? model.collection.parent : null;

      for (var cid in opened) {
        opened[cid].set('open', 0);
      }

      while (parent) {
        parent.set('open', 1);
        opened[parent.cid] = parent;
        parent = parent.collection ? parent.collection.parent : null;
      }

      if (model && scroll) {
        var el = model.viewLayer && model.viewLayer.el;
        el && el.scrollIntoView(scroll);
      }
    },
    render: function render() {
      return layers.render().el;
    }
  };
});

/***/ }),

/***/ "./src/navigator/view/ItemView.js":
/*!****************************************!*\
  !*** ./src/navigator/view/ItemView.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var dom_components_view_ComponentView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dom_components/view/ComponentView */ "./src/dom_components/view/ComponentView.js");




var inputProp = 'contentEditable';
var $ = backbone__WEBPACK_IMPORTED_MODULE_2___default.a.$;
var ItemsView;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_2___default.a.View.extend({
  events: {
    'mousedown [data-toggle-move]': 'startSort',
    'touchstart [data-toggle-move]': 'startSort',
    'click [data-toggle-visible]': 'toggleVisibility',
    'click [data-toggle-select]': 'handleSelect',
    'mouseover [data-toggle-select]': 'handleHover',
    'click [data-toggle-open]': 'toggleOpening',
    'dblclick [data-name]': 'handleEdit',
    'focusout [data-name]': 'handleEditEnd'
  },
  template: function template(model) {
    var pfx = this.pfx,
        ppfx = this.ppfx,
        config = this.config,
        clsNoEdit = this.clsNoEdit;
    var hidable = config.hidable;
    var count = this.countChildren(model);
    var addClass = !count ? this.clsNoChild : '';
    var clsTitle = "".concat(this.clsTitle, " ").concat(addClass);
    var clsTitleC = "".concat(this.clsTitleC, " ").concat(ppfx, "one-bg");
    var clsCaret = "".concat(this.clsCaret, " fa fa-chevron-right");
    var clsInput = "".concat(this.inputNameCls, " ").concat(clsNoEdit, " ").concat(ppfx, "no-app");
    var level = this.level + 1;
    var gut = "".concat(30 + level * 10, "px");
    var name = model.getName();
    var icon = model.getIcon();
    var clsBase = "".concat(pfx, "layer");
    return "\n      ".concat(hidable ? "<i class=\"".concat(pfx, "layer-vis fa fa-eye ").concat(this.isVisible() ? '' : 'fa-eye-slash', "\" data-toggle-visible></i>") : '', "\n      <div class=\"").concat(clsTitleC, "\">\n        <div class=\"").concat(clsTitle, "\" style=\"padding-left: ").concat(gut, "\" data-toggle-select>\n          <div class=\"").concat(pfx, "layer-title-inn\">\n            <i class=\"").concat(clsCaret, "\" data-toggle-open></i>\n            ").concat(icon ? "<span class=\"".concat(clsBase, "__icon\">").concat(icon, "</span>") : '', "\n            <span class=\"").concat(clsInput, "\" data-name>").concat(name, "</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"").concat(this.clsCount, "\">").concat(count || '', "</div>\n      <div class=\"").concat(this.clsMove, "\" data-toggle-move>\n        <i class=\"fa fa-arrows\"></i>\n      </div>\n      <div class=\"").concat(this.clsChildren, "\"></div>");
  },
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.opt = o;
    this.level = o.level;
    this.config = o.config;
    this.em = o.config.em;
    this.ppfx = this.em.get('Config').stylePrefix;
    this.sorter = o.sorter || '';
    this.pfx = this.config.stylePrefix;
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var model = this.model;
    var components = model.get('components');
    var type = model.get('type') || 'default';
    model.set('open', false);
    this.listenTo(components, 'remove add reset', this.checkChildren);
    this.listenTo(model, 'change:status', this.updateStatus);
    this.listenTo(model, 'change:open', this.updateOpening);
    this.listenTo(model, 'change:style:display', this.updateVisibility);
    this.className = "".concat(pfx, "layer ").concat(pfx, "layer__t-").concat(type, " no-select ").concat(ppfx, "two-color");
    this.inputNameCls = "".concat(ppfx, "layer-name");
    this.clsTitleC = "".concat(pfx, "layer-title-c");
    this.clsTitle = "".concat(pfx, "layer-title");
    this.clsCaret = "".concat(pfx, "layer-caret");
    this.clsCount = "".concat(pfx, "layer-count");
    this.clsMove = "".concat(pfx, "layer-move");
    this.clsChildren = "".concat(pfx, "layer-children");
    this.clsNoChild = "".concat(pfx, "layer-no-chld");
    this.clsEdit = "".concat(this.inputNameCls, "--edit");
    this.clsNoEdit = "".concat(this.inputNameCls, "--no-edit");
    this.$el.data('model', model);
    this.$el.data('collection', components);
    model.viewLayer = this;
  },
  getVisibilityEl: function getVisibilityEl() {
    if (!this.eyeEl) {
      this.eyeEl = this.$el.children(".".concat(this.pfx, "layer-vis"));
    }

    return this.eyeEl;
  },
  updateVisibility: function updateVisibility() {
    var pfx = this.pfx;
    var model = this.model;
    var hClass = "".concat(pfx, "layer-hidden");
    var hideIcon = 'fa-eye-slash';
    var hidden = model.getStyle().display == 'none';
    var method = hidden ? 'addClass' : 'removeClass';
    this.$el[method](hClass);
    this.getVisibilityEl()[method](hideIcon);
  },

  /**
   * Toggle visibility
   * @param	Event
   *
   * @return 	void
   * */
  toggleVisibility: function toggleVisibility(e) {
    e && e.stopPropagation();
    var model = this.model;
    var style = model.getStyle();
    var hidden = style.display == 'none';

    if (hidden) {
      delete style.display;
    } else {
      style.display = 'none';
    }

    model.setStyle(style);
  },

  /**
   * Handle the edit of the component name
   */
  handleEdit: function handleEdit(e) {
    e && e.stopPropagation();
    var em = this.em,
        $el = this.$el,
        clsNoEdit = this.clsNoEdit,
        clsEdit = this.clsEdit;
    var inputEl = this.getInputName();
    inputEl[inputProp] = true;
    inputEl.focus();
    em && em.setEditing(1);
    $el.find(".".concat(this.inputNameCls)).removeClass(clsNoEdit).addClass(clsEdit);
  },

  /**
   * Handle with the end of editing of the component name
   */
  handleEditEnd: function handleEditEnd(e) {
    e && e.stopPropagation();
    var em = this.em,
        $el = this.$el,
        clsNoEdit = this.clsNoEdit,
        clsEdit = this.clsEdit;
    var inputEl = this.getInputName();
    var name = inputEl.textContent;
    inputEl.scrollLeft = 0;
    inputEl[inputProp] = false;
    this.model.set({
      name: name
    });
    em && em.setEditing(0);
    $el.find(".".concat(this.inputNameCls)).addClass(clsNoEdit).removeClass(clsEdit);
  },

  /**
   * Get the input containing the name of the component
   * @return {HTMLElement}
   */
  getInputName: function getInputName() {
    if (!this.inputName) {
      this.inputName = this.el.querySelector(".".concat(this.inputNameCls));
    }

    return this.inputName;
  },

  /**
   * Update item opening
   *
   * @return void
   * */
  updateOpening: function updateOpening() {
    var opened = this.opt.opened || {};
    var model = this.model;
    var chvDown = 'fa-chevron-down';

    if (model.get('open')) {
      this.$el.addClass('open');
      this.getCaret().addClass(chvDown);
      opened[model.cid] = model;
    } else {
      this.$el.removeClass('open');
      this.getCaret().removeClass(chvDown);
      delete opened[model.cid];
    }
  },

  /**
   * Toggle item opening
   * @param {Object}	e
   *
   * @return void
   * */
  toggleOpening: function toggleOpening(e) {
    e.stopPropagation();
    if (!this.model.get('components').length) return;
    this.model.set('open', !this.model.get('open'));
  },

  /**
   * Handle component selection
   */
  handleSelect: function handleSelect(e) {
    e.stopPropagation();
    var em = this.em,
        config = this.config;

    if (em) {
      var model = this.model;
      em.setSelected(model, {
        fromLayers: 1
      });
      var scroll = config.scrollCanvas;
      scroll && em.get('Canvas').scrollTo(model, scroll);
    }
  },

  /**
   * Handle component selection
   */
  handleHover: function handleHover(e) {
    e.stopPropagation();
    var em = this.em,
        config = this.config,
        model = this.model;
    em && config.showHover && em.setHovered(model, {
      fromLayers: 1
    });
  },

  /**
   * Delegate to sorter
   * @param	Event
   * */
  startSort: function startSort(e) {
    e.stopPropagation();
    var sorter = this.sorter; // Right or middel click

    if (e.button && e.button !== 0) return;
    sorter && sorter.startSort(e.target);
  },

  /**
   * Freeze item
   * @return	void
   * */
  freeze: function freeze() {
    this.$el.addClass(this.pfx + 'opac50');
    this.model.set('open', 0);
  },

  /**
   * Unfreeze item
   * @return	void
   * */
  unfreeze: function unfreeze() {
    this.$el.removeClass(this.pfx + 'opac50');
  },

  /**
   * Update item on status change
   * @param	Event
   * */
  updateStatus: function updateStatus(e) {
    dom_components_view_ComponentView__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.updateStatus.apply(this, [{
      avoidHover: !this.config.highlightHover
    }]);
  },

  /**
   * Check if component is visible
   *
   * @return bool
   * */
  isVisible: function isVisible() {
    var css = this.model.get('style'),
        pr = css.display;
    if (pr && pr == 'none') return;
    return 1;
  },

  /**
   * Update item aspect after children changes
   *
   * @return void
   * */
  checkChildren: function checkChildren() {
    var model = this.model;
    var count = this.countChildren(model);
    var pfx = this.pfx;
    var noChildCls = this.clsNoChild;
    var title = this.$el.children(".".concat(this.clsTitleC)).children(".".concat(this.clsTitle));

    if (!this.cnt) {
      this.cnt = this.$el.children(".".concat(this.clsCount));
    }

    if (count) {
      title.removeClass(noChildCls);
      this.cnt.html(count);
    } else {
      title.addClass(noChildCls);
      this.cnt.empty();
      model.set('open', 0);
    }
  },

  /**
   * Count children inside model
   * @param  {Object} model
   * @return {number}
   * @private
   */
  countChildren: function countChildren(model) {
    var count = 0;
    model.get('components').each(function (m) {
      var isCountable = this.opt.isCountable;
      var hide = this.config.hideTextnode;
      if (isCountable && !isCountable(m, hide)) return;
      count++;
    }, this);
    return count;
  },
  getCaret: function getCaret() {
    if (!this.caret || !this.caret.length) {
      var pfx = this.pfx;
      this.caret = this.$el.children(".".concat(this.clsTitleC)).find(".".concat(this.clsCaret));
    }

    return this.caret;
  },
  setRoot: function setRoot(el) {
    el = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isString"])(el) ? this.em.getWrapper().find(el)[0] : el;
    var model = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_1__["getModel"])(el, $);
    if (!model) return;
    this.stopListening();
    this.model = model;
    this.initialize(this.opt);
    this.render();
  },
  render: function render() {
    var model = this.model,
        config = this.config,
        pfx = this.pfx,
        ppfx = this.ppfx,
        opt = this.opt;
    var isCountable = opt.isCountable;
    var hidden = isCountable && !isCountable(model, config.hideTextnode);
    var vis = this.isVisible();
    var el = this.$el.empty();
    var level = this.level + 1;

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(ItemsView)) {
      ItemsView = __webpack_require__(/*! ./ItemsView */ "./src/navigator/view/ItemsView.js").default;
    }

    var children = new ItemsView({
      collection: model.get('components'),
      config: this.config,
      sorter: this.sorter,
      opened: this.opt.opened,
      parent: model,
      level: level
    }).render().$el;

    if (!this.config.showWrapper && level === 1) {
      el.append(children);
    } else {
      el.html(this.template(model));
      el.find(".".concat(this.clsChildren)).append(children);
    }

    if (!model.get('draggable') || !this.config.sortable) {
      el.children(".".concat(this.clsMove)).remove();
    }

    !vis && (this.className += " ".concat(pfx, "hide"));
    hidden && (this.className += " ".concat(ppfx, "hidden"));
    el.attr('class', this.className);
    this.updateOpening();
    this.updateStatus();
    this.updateVisibility();
    return this;
  }
}));

/***/ }),

/***/ "./src/navigator/view/ItemsView.js":
/*!*****************************************!*\
  !*** ./src/navigator/view/ItemsView.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ItemView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ItemView */ "./src/navigator/view/ItemView.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.opt = o;
    var config = o.config || {};
    this.level = o.level;
    this.config = config;
    this.preview = o.preview;
    this.ppfx = config.pStylePrefix || '';
    this.pfx = config.stylePrefix || '';
    this.parent = o.parent;
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var parent = this.parent;
    var coll = this.collection;
    this.listenTo(coll, 'add', this.addTo);
    this.listenTo(coll, 'reset resetNavigator', this.render);
    this.listenTo(coll, 'remove', this.removeChildren);
    this.className = "".concat(pfx, "layers");
    var em = config.em;

    if (config.sortable && !this.opt.sorter) {
      var utils = em.get('Utils');
      this.opt.sorter = new utils.Sorter({
        container: config.sortContainer || this.el,
        containerSel: ".".concat(this.className),
        itemSel: ".".concat(pfx, "layer"),
        ignoreViewChildren: 1,
        onEndMove: function onEndMove(created, sorter) {
          var srcModel = sorter.getSourceModel();
          em.setSelected(srcModel, {
            forceChange: 1
          });
        },
        avoidSelectOnEnd: 1,
        nested: 1,
        ppfx: ppfx,
        pfx: pfx
      });
    }

    this.sorter = this.opt.sorter || ''; // For the sorter

    this.$el.data('collection', coll);
    parent && this.$el.data('model', parent);
  },
  removeChildren: function removeChildren(removed) {
    var view = removed.viewLayer;
    if (!view) return;
    view.remove.apply(view);
  },

  /**
   * Add to collection
   * @param Object Model
   *
   * @return Object
   * */
  addTo: function addTo(model) {
    var i = this.collection.indexOf(model);
    this.addToCollection(model, null, i);
  },

  /**
   * Add new object to collection
   * @param  Object  Model
   * @param  Object   Fragment collection
   * @param  integer  Index of append
   *
   * @return Object Object created
   * */
  addToCollection: function addToCollection(model, fragmentEl, index) {
    var level = this.level;
    var fragment = fragmentEl || null;
    var viewObject = _ItemView__WEBPACK_IMPORTED_MODULE_1__["default"];
    var view = new viewObject({
      level: level,
      model: model,
      config: this.config,
      sorter: this.sorter,
      isCountable: this.isCountable,
      opened: this.opt.opened
    });
    var rendered = view.render().el;

    if (fragment) {
      fragment.appendChild(rendered);
    } else {
      if (typeof index != 'undefined') {
        var method = 'before'; // If the added model is the last of collection
        // need to change the logic of append

        if (this.$el.children().length == index) {
          index--;
          method = 'after';
        } // In case the added is new in the collection index will be -1


        if (index < 0) {
          this.$el.append(rendered);
        } else this.$el.children().eq(index)[method](rendered);
      } else this.$el.append(rendered);
    }

    return rendered;
  },

  /**
   * Check if the model could be count by the navigator
   * @param  {Object}  model
   * @return {Boolean}
   * @private
   */
  isCountable: function isCountable(model, hide) {
    var type = model.get('type');
    var tag = model.get('tagName');

    if ((type == 'textnode' || tag == 'br') && hide || !model.get('layerable')) {
      return false;
    }

    return true;
  },
  render: function render() {
    var _this = this;

    var frag = document.createDocumentFragment();
    var el = this.el;
    el.innerHTML = '';
    this.collection.each(function (model) {
      return _this.addToCollection(model, frag);
    });
    el.appendChild(frag);
    el.className = this.className;
    return this;
  }
}));

/***/ }),

/***/ "./src/panels/config/config.js":
/*!*************************************!*\
  !*** ./src/panels/config/config.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var swv = 'sw-visibility';
var expt = 'export-template';
var osm = 'open-sm';
var otm = 'open-tm';
var ola = 'open-layers';
var obl = 'open-blocks';
var ful = 'fullscreen';
var prv = 'preview';
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'pn-',
  // Default panels fa-sliders for features
  defaults: [{
    id: 'commands',
    buttons: [{}]
  }, {
    id: 'options',
    buttons: [{
      active: true,
      id: swv,
      className: 'fa fa-square-o',
      command: swv,
      context: swv,
      attributes: {
        title: 'View components'
      }
    }, {
      id: prv,
      className: 'fa fa-eye',
      command: prv,
      context: prv,
      attributes: {
        title: 'Preview'
      }
    }, {
      id: ful,
      className: 'fa fa-arrows-alt',
      command: ful,
      context: ful,
      attributes: {
        title: 'Fullscreen'
      }
    }, {
      id: expt,
      className: 'fa fa-code',
      command: expt,
      attributes: {
        title: 'View code'
      }
    }]
  }, {
    id: 'views',
    buttons: [{
      id: osm,
      className: 'fa fa-paint-brush',
      command: osm,
      active: true,
      togglable: 0,
      attributes: {
        title: 'Open Style Manager'
      }
    }, {
      id: otm,
      className: 'fa fa-cog',
      command: otm,
      togglable: 0,
      attributes: {
        title: 'Settings'
      }
    }, {
      id: ola,
      className: 'fa fa-bars',
      command: ola,
      togglable: 0,
      attributes: {
        title: 'Open Layer Manager'
      }
    }, {
      id: obl,
      className: 'fa fa-th-large',
      command: obl,
      togglable: 0,
      attributes: {
        title: 'Open Blocks'
      }
    }]
  }],
  // Editor model
  em: null,
  // Delay before show children buttons (in milliseconds)
  delayBtnsShow: 300
});

/***/ }),

/***/ "./src/panels/index.js":
/*!*****************************!*\
  !*** ./src/panels/index.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config/config */ "./src/panels/config/config.js");
/* harmony import */ var _model_Panel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model/Panel */ "./src/panels/model/Panel.js");
/* harmony import */ var _model_Panels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/Panels */ "./src/panels/model/Panels.js");
/* harmony import */ var _view_PanelView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view/PanelView */ "./src/panels/view/PanelView.js");
/* harmony import */ var _view_PanelsView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view/PanelsView */ "./src/panels/view/PanelsView.js");
/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/panels/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  panels: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const panelManager = editor.Panels;
 * ```
 *
 * * [addPanel](#addpanel)
 * * [addButton](#addbutton)
 * * [getButton](#getbutton)
 * * [getPanel](#getpanel)
 * * [getPanels](#getpanels)
 * * [getPanelsEl](#getpanelsel)
 * * [removePanel](#removepanel)
 * * [removeButton](#removebutton)
 *
 * @module Panels
 */





/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var panels, PanelsViewObj;
  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'Panels',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @private
     */
    init: function init(config) {
      c = config || {};

      for (var name in _config_config__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        if (!(name in c)) c[name] = _config_config__WEBPACK_IMPORTED_MODULE_0__["default"][name];
      }

      var ppfx = c.pStylePrefix;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix;
      panels = new _model_Panels__WEBPACK_IMPORTED_MODULE_2__["default"](c.defaults);
      PanelsViewObj = new _view_PanelsView__WEBPACK_IMPORTED_MODULE_4__["default"]({
        collection: panels,
        config: c
      });
      return this;
    },

    /**
     * Returns the collection of panels
     * @return {Collection} Collection of panel
     */
    getPanels: function getPanels() {
      return panels;
    },

    /**
     * Returns panels element
     * @return {HTMLElement}
     */
    getPanelsEl: function getPanelsEl() {
      return PanelsViewObj.el;
    },

    /**
     * Add new panel to the collection
     * @param {Object|Panel} panel Object with right properties or an instance of Panel
     * @return {Panel} Added panel. Useful in case passed argument was an Object
     * @example
     * var newPanel = panelManager.addPanel({
     *   id: 'myNewPanel',
     *  visible  : true,
     *  buttons  : [...],
     * });
     */
    addPanel: function addPanel(panel) {
      return panels.add(panel);
    },

    /**
     * Remove a panel from the collection
     * @param {Object|Panel|String} panel Object with right properties or an instance of Panel or Painel id
     * @return {Panel} Removed panel. Useful in case passed argument was an Object
     * @example
     * const newPanel = panelManager.removePanel({
     *   id: 'myNewPanel',
     *  visible  : true,
     *  buttons  : [...],
     * });
     *
     * const newPanel = panelManager.removePanel('myNewPanel');
     *
     */
    removePanel: function removePanel(panel) {
      return panels.remove(panel);
    },

    /**
     * Get panel by ID
     * @param  {string} id Id string
     * @return {Panel|null}
     * @example
     * var myPanel = panelManager.getPanel('myNewPanel');
     */
    getPanel: function getPanel(id) {
      var res = panels.where({
        id: id
      });
      return res.length ? res[0] : null;
    },

    /**
     * Add button to the panel
     * @param {string} panelId Panel's ID
     * @param {Object|Button} button Button object or instance of Button
     * @return {Button|null} Added button. Useful in case passed button was an Object
     * @example
     * var newButton = panelManager.addButton('myNewPanel',{
     *   id: 'myNewButton',
     *   className: 'someClass',
     *   command: 'someCommand',
     *   attributes: { title: 'Some title'},
     *   active: false,
     * });
     * // It's also possible to pass the command as an object
     * // with .run and .stop methods
     * ...
     * command: {
     *   run: function(editor) {
     *     ...
     *   },
     *   stop: function(editor) {
     *     ...
     *   }
     * },
     * // Or simply like a function which will be evaluated as a single .run command
     * ...
     * command: function(editor) {
     *   ...
     * }
     */
    addButton: function addButton(panelId, button) {
      var pn = this.getPanel(panelId);
      return pn ? pn.get('buttons').add(button) : null;
    },

    /**
     * Remove button from the panel
     * @param {String} panelId Panel's ID
     * @param {String} buttonId Button's ID
     * @return {Button|null} Removed button.
     * @example
     * const removedButton = panelManager.addButton('myNewPanel',{
     *   id: 'myNewButton',
     *   className: 'someClass',
     *   command: 'someCommand',
     *   attributes: { title: 'Some title'},
     *   active: false,
     * });
     *
     * const removedButton = panelManager.removeButton('myNewPanel', 'myNewButton');
     *
     */
    removeButton: function removeButton(panelId, button) {
      var pn = this.getPanel(panelId);
      return pn && pn.get('buttons').remove(button);
    },

    /**
     * Get button from the panel
     * @param {string} panelId Panel's ID
     * @param {string} id Button's ID
     * @return {Button|null}
     * @example
     * var button = panelManager.getButton('myPanel','myButton');
     */
    getButton: function getButton(panelId, id) {
      var pn = this.getPanel(panelId);

      if (pn) {
        var res = pn.get('buttons').where({
          id: id
        });
        return res.length ? res[0] : null;
      }

      return null;
    },

    /**
     * Render panels and buttons
     * @return {HTMLElement}
     * @private
     */
    render: function render() {
      return PanelsViewObj.render().el;
    },

    /**
     * Active activable buttons
     * @private
     */
    active: function active() {
      this.getPanels().each(function (p) {
        p.get('buttons').each(function (btn) {
          btn.get('active') && btn.trigger('updateActive');
        });
      });
    },

    /**
     * Disable buttons flagged as disabled
     * @private
     */
    disableButtons: function disableButtons() {
      this.getPanels().each(function (p) {
        p.get('buttons').each(function (btn) {
          if (btn.get('disable')) btn.trigger('change:disable');
        });
      });
    },
    Panel: _model_Panel__WEBPACK_IMPORTED_MODULE_1__["default"]
  };
});

/***/ }),

/***/ "./src/panels/model/Button.js":
/*!************************************!*\
  !*** ./src/panels/model/Button.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    id: '',
    label: '',
    tagName: 'span',
    className: '',
    command: '',
    context: '',
    buttons: [],
    attributes: {},
    options: {},
    active: false,
    dragDrop: false,
    togglable: true,
    runDefaultCommand: true,
    stopDefaultCommand: false,
    disable: false
  },
  initialize: function initialize(options) {
    if (this.get('buttons').length) {
      var Buttons = __webpack_require__(/*! ./Buttons */ "./src/panels/model/Buttons.js").default;

      this.set('buttons', new Buttons(this.get('buttons')));
    }
  }
}));

/***/ }),

/***/ "./src/panels/model/Buttons.js":
/*!*************************************!*\
  !*** ./src/panels/model/Buttons.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ "./src/panels/model/Button.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Button__WEBPACK_IMPORTED_MODULE_1__["default"],

  /**
   * Deactivate all buttons, except one passed
   * @param  {Object}  except  Model to ignore
   * @param  {Boolean}  r     Recursive flag
   *
   * @return  void
   * */
  deactivateAllExceptOne: function deactivateAllExceptOne(except, r) {
    this.forEach(function (model, index) {
      if (model !== except) {
        model.set('active', false);
        if (r && model.get('buttons').length) model.get('buttons').deactivateAllExceptOne(except, r);
      }
    });
  },

  /**
   * Deactivate all buttons
   * @param  {String}  ctx Context string
   *
   * @return  void
   * */
  deactivateAll: function deactivateAll(ctx, sender) {
    var context = ctx || '';
    this.forEach(function (model) {
      if (model.get('context') == context && model !== sender) {
        model.set('active', false, {
          silent: 1
        });
        model.trigger('updateActive', {
          fromCollection: 1
        });
      }
    });
  },

  /**
   * Disables all buttons
   * @param  {String}  ctx Context string
   *
   * @return  void
   * */
  disableAllButtons: function disableAllButtons(ctx) {
    var context = ctx || '';
    this.forEach(function (model, index) {
      if (model.get('context') == context) {
        model.set('disable', true);
      }
    });
  },

  /**
   * Disables all buttons, except one passed
   * @param  {Object}  except  Model to ignore
   * @param  {Boolean}  r     Recursive flag
   *
   * @return  void
   * */
  disableAllButtonsExceptOne: function disableAllButtonsExceptOne(except, r) {
    this.forEach(function (model, index) {
      if (model !== except) {
        model.set('disable', true);
        if (r && model.get('buttons').length) model.get('buttons').disableAllButtonsExceptOne(except, r);
      }
    });
  }
}));

/***/ }),

/***/ "./src/panels/model/Panel.js":
/*!***********************************!*\
  !*** ./src/panels/model/Panel.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Buttons */ "./src/panels/model/Buttons.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    id: '',
    content: '',
    visible: true,
    buttons: [],
    attributes: {}
  },
  initialize: function initialize(options) {
    this.btn = this.get('buttons') || [];
    this.buttons = new _Buttons__WEBPACK_IMPORTED_MODULE_1__["default"](this.btn);
    this.set('buttons', this.buttons);
  }
}));

/***/ }),

/***/ "./src/panels/model/Panels.js":
/*!************************************!*\
  !*** ./src/panels/model/Panels.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Panel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Panel */ "./src/panels/model/Panel.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Panel__WEBPACK_IMPORTED_MODULE_1__["default"]
}));

/***/ }),

/***/ "./src/panels/view/ButtonView.js":
/*!***************************************!*\
  !*** ./src/panels/view/ButtonView.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var $ = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  tagName: function tagName() {
    return this.model.get('tagName');
  },
  events: {
    click: 'clicked'
  },
  initialize: function initialize(o) {
    var cls = this.model.get('className');
    this.config = o.config || {};
    this.em = this.config.em || {};
    var pfx = this.config.stylePrefix || '';
    var ppfx = this.config.pStylePrefix || '';
    this.pfx = pfx;
    this.ppfx = this.config.pStylePrefix || '';
    this.id = pfx + this.model.get('id');
    this.activeCls = "".concat(pfx, "active ").concat(ppfx, "four-color");
    this.disableCls = "".concat(ppfx, "disabled");
    this.btnsVisCls = "".concat(pfx, "visible");
    this.className = pfx + 'btn' + (cls ? ' ' + cls : '');
    this.listenTo(this.model, 'change', this.render);
    this.listenTo(this.model, 'change:active updateActive', this.updateActive);
    this.listenTo(this.model, 'checkActive', this.checkActive);
    this.listenTo(this.model, 'change:bntsVis', this.updateBtnsVis);
    this.listenTo(this.model, 'change:attributes', this.updateAttributes);
    this.listenTo(this.model, 'change:className', this.updateClassName);
    this.listenTo(this.model, 'change:disable', this.updateDisable);
    if (this.em && this.em.get) this.commands = this.em.get('Commands');
  },

  /**
   * Updates class name of the button
   *
   * @return   void
   * */
  updateClassName: function updateClassName() {
    var model = this.model,
        pfx = this.pfx;
    var cls = model.get('className');
    var attrCls = model.get('attributes').class;
    var classStr = "".concat(attrCls ? attrCls : '', " ").concat(pfx, "btn ").concat(cls ? cls : '');
    this.$el.attr('class', classStr.trim());
  },

  /**
   * Updates attributes of the button
   *
   * @return   void
   * */
  updateAttributes: function updateAttributes() {
    this.$el.attr(this.model.get('attributes'));
    this.updateClassName();
  },

  /**
   * Updates visibility of children buttons
   *
   * @return  void
   * */
  updateBtnsVis: function updateBtnsVis() {
    if (!this.$buttons) return;
    if (this.model.get('bntsVis')) this.$buttons.addClass(this.btnsVisCls);else this.$buttons.removeClass(this.btnsVisCls);
  },

  /**
   * Update active status of the button
   *
   * @return   void
   * */
  updateActive: function updateActive() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = this.model,
        commands = this.commands,
        $el = this.$el,
        activeCls = this.activeCls;
    var fromCollection = opts.fromCollection;
    var context = model.get('context');
    var options = model.get('options');
    var commandName = model.get('command');
    var command = {};

    if (commands && Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(commandName)) {
      command = commands.get(commandName) || {};
    } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(commandName)) {
      command = commands.create({
        run: commandName
      });
    } else if (commandName !== null && Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isObject"])(commandName)) {
      command = commands.create(commandName);
    }

    if (model.get('active')) {
      !fromCollection && model.collection.deactivateAll(context, model);
      model.set('active', true, {
        silent: true
      }).trigger('checkActive');
      commands.runCommand(command, _objectSpread({}, options, {
        sender: model
      })); // Disable button if the command has no stop method

      command.noStop && model.set('active', false);
    } else {
      $el.removeClass(activeCls);
      commands.stopCommand(command, _objectSpread({}, options, {
        sender: model,
        force: 1
      }));
    }
  },
  updateDisable: function updateDisable() {
    var disableCls = this.disableCls,
        model = this.model;
    var disable = model.get('disable');
    this.$el[disable ? 'addClass' : 'removeClass'](disableCls);
  },

  /**
   * Update active style status
   *
   * @return   void
   * */
  checkActive: function checkActive() {
    var model = this.model,
        $el = this.$el,
        activeCls = this.activeCls;
    model.get('active') ? $el.addClass(activeCls) : $el.removeClass(activeCls);
  },

  /**
   * Triggered when button is clicked
   * @param  {Object}  e  Event
   *
   * @return   void
   * */
  clicked: function clicked(e) {
    if (this.model.get('bntsVis')) return;
    if (this.model.get('disable')) return;
    this.toogleActive();
  },
  toogleActive: function toogleActive() {
    var model = this.model;
    var _model$attributes = model.attributes,
        active = _model$attributes.active,
        togglable = _model$attributes.togglable;
    if (active && !togglable) return;
    model.set('active', !active); // If the stop is requested

    var command = this.em.get('Commands').get('select-comp');

    if (active) {
      if (model.get('runDefaultCommand')) this.em.runDefault();
    } else {
      if (model.get('stopDefaultCommand')) this.em.stopDefault();
    }
  },
  render: function render() {
    var label = this.model.get('label');
    var $el = this.$el;
    $el.empty();
    this.updateAttributes();
    label && $el.append(label);
    this.checkActive();
    this.updateDisable();
    return this;
  }
}));

/***/ }),

/***/ "./src/panels/view/ButtonsView.js":
/*!****************************************!*\
  !*** ./src/panels/view/ButtonsView.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ButtonView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ButtonView */ "./src/panels/view/ButtonView.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize(o) {
    this.opt = o || {};
    this.config = this.opt.config || {};
    this.pfx = this.config.stylePrefix || '';
    this.parentM = this.opt.parentM || null;
    this.listenTo(this.collection, 'add', this.addTo);
    this.listenTo(this.collection, 'reset remove', this.render);
    this.className = this.pfx + 'buttons';
  },

  /**
   * Add to collection
   * @param Object Model
   *
   * @return Object
   * */
  addTo: function addTo(model) {
    this.addToCollection(model);
  },

  /**
   * Add new object to collection
   * @param  Object  Model
   * @param  Object   Fragment collection
   *
   * @return Object Object created
   * */
  addToCollection: function addToCollection(model, fragmentEl) {
    var fragment = fragmentEl || null;
    var viewObject = _ButtonView__WEBPACK_IMPORTED_MODULE_1__["default"];
    var view = new viewObject({
      model: model,
      config: this.config,
      parentM: this.parentM
    });
    var rendered = view.render().el;

    if (fragment) {
      fragment.appendChild(rendered);
    } else {
      this.$el.append(rendered);
    }

    return rendered;
  },
  render: function render() {
    var fragment = document.createDocumentFragment();
    this.$el.empty();
    this.collection.each(function (model) {
      this.addToCollection(model, fragment);
    }, this);
    this.$el.append(fragment);
    this.$el.attr('class', Object(underscore__WEBPACK_IMPORTED_MODULE_2__["result"])(this, 'className'));
    return this;
  }
}));

/***/ }),

/***/ "./src/panels/view/PanelView.js":
/*!**************************************!*\
  !*** ./src/panels/view/PanelView.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ButtonsView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ButtonsView */ "./src/panels/view/ButtonsView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  initialize: function initialize(o) {
    var config = o.config || {};
    var model = this.model;
    this.config = config;
    this.pfx = config.stylePrefix || '';
    this.ppfx = config.pStylePrefix || '';
    this.buttons = model.get('buttons');
    this.className = this.pfx + 'panel';
    this.id = this.pfx + model.get('id');
    this.listenTo(model, 'change:appendContent', this.appendContent);
    this.listenTo(model, 'change:content', this.updateContent);
    this.listenTo(model, 'change:visible', this.toggleVisible);
    model.view = this;
  },

  /**
   * Append content of the panel
   * */
  appendContent: function appendContent() {
    this.$el.append(this.model.get('appendContent'));
  },

  /**
   * Update content
   * */
  updateContent: function updateContent() {
    this.$el.html(this.model.get('content'));
  },
  toggleVisible: function toggleVisible() {
    if (!this.model.get('visible')) {
      this.$el.addClass("".concat(this.ppfx, "hidden"));
      return;
    }

    this.$el.removeClass("".concat(this.ppfx, "hidden"));
  },
  attributes: function attributes() {
    return this.model.get('attributes');
  },
  initResize: function initResize() {
    var em = this.config.em;
    var editor = em ? em.get('Editor') : '';
    var resizable = this.model.get('resizable');

    if (editor && resizable) {
      var resz = resizable === true ? [1, 1, 1, 1] : resizable;
      var resLen = resz.length;
      var tc,
          cr,
          bc,
          cl = 0; // Choose which sides of the panel are resizable

      if (resLen == 2) {
        tc = resz[0];
        bc = resz[0];
        cr = resz[1];
        cl = resz[1];
      } else if (resLen == 4) {
        tc = resz[0];
        cr = resz[1];
        bc = resz[2];
        cl = resz[3];
      }

      var resizer = editor.Utils.Resizer.init(_objectSpread({
        tc: tc,
        cr: cr,
        bc: bc,
        cl: cl,
        tl: 0,
        tr: 0,
        bl: 0,
        br: 0,
        appendTo: this.el,
        silentFrames: 1,
        avoidContainerUpdate: 1,
        prefix: editor.getConfig().stylePrefix,
        onEnd: function onEnd() {
          em && em.trigger('change:canvasOffset');
        },
        posFetcher: function posFetcher(el, _ref) {
          var target = _ref.target;
          var style = el.style;
          var config = resizer.getConfig();
          var keyWidth = config.keyWidth;
          var keyHeight = config.keyHeight;
          var rect = el.getBoundingClientRect();
          var forContainer = target == 'container';
          var styleWidth = style[keyWidth];
          var styleHeight = style[keyHeight];
          var width = styleWidth && !forContainer ? parseFloat(styleWidth) : rect.width;
          var height = styleHeight && !forContainer ? parseFloat(styleHeight) : rect.height;
          return {
            left: 0,
            top: 0,
            width: width,
            height: height
          };
        }
      }, resizable));

      resizer.blur = function () {};

      resizer.focus(this.el);
    }
  },
  render: function render() {
    var $el = this.$el;
    var ppfx = this.ppfx;
    var cls = "".concat(this.className, " ").concat(this.id, " ").concat(ppfx, "one-bg ").concat(ppfx, "two-color");
    $el.addClass(cls);

    if (this.buttons.length) {
      var buttons = new _ButtonsView__WEBPACK_IMPORTED_MODULE_2__["default"]({
        collection: this.buttons,
        config: this.config
      });
      $el.append(buttons.render().el);
    }

    $el.append(this.model.get('content'));
    return this;
  }
}));

/***/ }),

/***/ "./src/panels/view/PanelsView.js":
/*!***************************************!*\
  !*** ./src/panels/view/PanelsView.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PanelView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PanelView */ "./src/panels/view/PanelView.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize(o) {
    this.opt = o || {};
    this.config = this.opt.config || {};
    this.pfx = this.config.stylePrefix || '';
    var items = this.collection;
    this.listenTo(items, 'add', this.addTo);
    this.listenTo(items, 'reset', this.render);
    this.listenTo(items, 'remove', this.onRemove);
    this.className = this.pfx + 'panels';
  },
  onRemove: function onRemove(model) {
    var view = model.view;
    view && view.remove();
  },

  /**
   * Add to collection
   * @param Object Model
   *
   * @return Object
   * @private
   * */
  addTo: function addTo(model) {
    this.addToCollection(model);
  },

  /**
   * Add new object to collection
   * @param  Object  Model
   * @param  Object   Fragment collection
   * @param  integer  Index of append
   *
   * @return Object Object created
   * @private
   * */
  addToCollection: function addToCollection(model, fragmentEl) {
    var fragment = fragmentEl || null;
    var config = this.config;
    var el = model.get('el');
    var view = new _PanelView__WEBPACK_IMPORTED_MODULE_1__["default"]({
      el: el,
      model: model,
      config: config
    });
    var rendered = view.render().el;
    var appendTo = model.get('appendTo'); // Do nothing if the panel was requested to be another element

    if (el) {} else if (appendTo) {
      var appendEl = document.querySelector(appendTo);
      appendEl.appendChild(rendered);
    } else {
      if (fragment) {
        fragment.appendChild(rendered);
      } else {
        this.$el.append(rendered);
      }
    }

    view.initResize();
    return rendered;
  },
  render: function render() {
    var _this = this;

    var $el = this.$el;
    var frag = document.createDocumentFragment();
    $el.empty();
    this.collection.each(function (model) {
      return _this.addToCollection(model, frag);
    });
    $el.append(frag);
    $el.attr('class', this.className);
    return this;
  }
}));

/***/ }),

/***/ "./src/parser/config/config.js":
/*!*************************************!*\
  !*** ./src/parser/config/config.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  textTags: ['br', 'b', 'i', 'u', 'a', 'ul', 'ol'],
  // Custom CSS parser
  parserCss: null,
  // Custom HTML parser
  parserHtml: null
});

/***/ }),

/***/ "./src/parser/index.js":
/*!*****************************!*\
  !*** ./src/parser/index.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/config */ "./src/parser/config/config.js");
/* harmony import */ var _model_ParserCss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/ParserCss */ "./src/parser/model/ParserCss.js");
/* harmony import */ var _model_ParserHtml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/ParserHtml */ "./src/parser/model/ParserHtml.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ __webpack_exports__["default"] = (function () {
  var conf = {};
  var pHtml, pCss;
  return {
    compTypes: '',
    parserCss: null,
    parserHtml: null,

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'Parser',

    /**
     * Get config object
     * @return {Object}
     */
    getConfig: function getConfig() {
      return conf;
    },

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @param {Array<Object>} [config.blocks=[]] Default blocks
     * @return {this}
     * @example
     * ...
     * {
     *     blocks: [
     *      {id:'h1-block' label: 'Heading', content:'<h1>...</h1>'},
     *      ...
     *    ],
     * }
     * ...
     */
    init: function init() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      conf = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_1__["default"], {}, config);
      conf.Parser = this;
      pHtml = new _model_ParserHtml__WEBPACK_IMPORTED_MODULE_3__["default"](conf);
      pCss = new _model_ParserCss__WEBPACK_IMPORTED_MODULE_2__["default"](conf);
      this.em = conf.em;
      this.parserCss = pCss;
      this.parserHtml = pHtml;
      return this;
    },

    /**
     * Parse HTML string and return valid model
     * @param  {string} str HTML string
     * @return {Object}
     */
    parseHtml: function parseHtml(str) {
      var em = this.em,
          compTypes = this.compTypes;
      pHtml.compTypes = em ? em.get('DomComponents').getTypes() : compTypes;
      return pHtml.parse(str, pCss);
    },

    /**
     * Parse CSS string and return valid model
     * @param  {string} str CSS string
     * @return {Array<Object>}
     */
    parseCss: function parseCss(str) {
      return pCss.parse(str);
    }
  };
});

/***/ }),

/***/ "./src/parser/model/BrowserParserCss.js":
/*!**********************************************!*\
  !*** ./src/parser/model/BrowserParserCss.js ***!
  \**********************************************/
/*! exports provided: parseSelector, parseStyle, parseCondition, createNode, parseNode, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseSelector", function() { return parseSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseStyle", function() { return parseStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseCondition", function() { return parseCondition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNode", function() { return createNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseNode", function() { return parseNode; });
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
 // At-rules
// https://developer.mozilla.org/it/docs/Web/API/CSSRule#Type_constants

var atRules = {
  4: 'media',
  5: 'font-face',
  6: 'page',
  7: 'keyframes',
  11: 'counter-style',
  12: 'supports',
  13: 'document',
  14: 'font-feature-values',
  15: 'viewport'
};
var atRuleKeys = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["keys"])(atRules);
var singleAtRules = ['5', '6', '11', '15'];
var singleAtRulesNames = ['font-face', 'page', 'counter-style', 'viewport'];
/**
 * Parse selector string to array.
 * Only classe based are valid as CSS rules inside editor, not valid
 * selectors will be dropped as additional
 * It's ok with the last part of the string as state (:hover, :active)
 * @param  {string} str Selectors string
 * @return {Object}
 * @example
 * var res = parseSelector('.test1, .test1.test2, .test2 .test3');
 * console.log(res);
 * // {
 * //result: [['test1'], ['test1', 'test2']],
 * //add: ['.test2 .test3']
 * //}
 */

var parseSelector = function parseSelector() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var add = [];
  var result = [];
  var sels = str.split(',');

  for (var i = 0, len = sels.length; i < len; i++) {
    var sel = sels[i].trim(); // Will accept only concatenated classes and last
    // class might be with state (eg. :hover), nothing else.
    // Can also accept SINGLE ID selectors, eg. `#myid`, `#myid:hover`
    // Composed are not valid: `#myid.some-class`, `#myid.some-class:hover`

    if (/^(\.{1}[\w\-]+)+(:{1,2}[\w\-()]+)?$/gi.test(sel) || /^(#{1}[\w\-]+){1}(:{1,2}[\w\-()]+)?$/gi.test(sel)) {
      var cls = sel.split('.').filter(Boolean);
      result.push(cls);
    } else {
      add.push(sel);
    }
  }

  return {
    result: result,
    add: add
  };
};
/**
 * Parse style declarations of the node
 * @param {CSSRule} node
 * @return {Object}
 */

var parseStyle = function parseStyle(node) {
  var stl = node.style;
  var style = {};

  for (var i = 0, len = stl.length; i < len; i++) {
    var propName = stl[i];
    var propValue = stl.getPropertyValue(propName);
    var important = stl.getPropertyPriority(propName);
    style[propName] = "".concat(propValue).concat(important ? " !".concat(important) : '');
  }

  return style;
};
/**
 * Get the condition when possible
 * @param  {CSSRule} node
 * @return {string}
 */

var parseCondition = function parseCondition(node) {
  var condition = node.conditionText || node.media && node.media.mediaText || node.name || node.selectorText || '';
  return condition.trim();
};
/**
 * Create node for the editor
 * @param  {Array<String>} selectors Array containing strings of classes
 * @param {Object} style Key-value object of style declarations
 * @return {Object}
 */

var createNode = function createNode(selectors) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var node = {};
  var selLen = selectors.length;
  var lastClass = selectors[selLen - 1];
  var stateArr = lastClass ? lastClass.split(/:(.+)/) : [];
  var state = stateArr[1];
  var atRule = opts.atRule,
      selectorsAdd = opts.selectorsAdd,
      mediaText = opts.mediaText;
  var singleAtRule = singleAtRulesNames.indexOf(atRule) >= 0;
  singleAtRule && (node.singleAtRule = 1);
  atRule && (node.atRuleType = atRule);
  selectorsAdd && (node.selectorsAdd = selectorsAdd);
  mediaText && (node.mediaText = mediaText); // Isolate the state from selectors

  if (state) {
    selectors[selLen - 1] = stateArr[0];
    node.state = state;
    stateArr.splice(stateArr.length - 1, 1);
  }

  node.selectors = selectors;
  node.style = style;
  return node;
};
/**
 * Fetch data from node
 * @param  {StyleSheet|CSSRule} el
 * @return {Array<Object>}
 */

var parseNode = function parseNode(el) {
  var result = [];
  var nodes = el.cssRules || [];

  for (var i = 0, len = nodes.length; i < len; i++) {
    var node = nodes[i];
    var type = node.type.toString();
    var singleAtRule = 0;
    var atRuleType = '';
    var condition = ''; // keyText is for CSSKeyframeRule

    var sels = node.selectorText || node.keyText;
    var isSingleAtRule = singleAtRules.indexOf(type) >= 0; // Check if the node is an at-rule

    if (isSingleAtRule) {
      singleAtRule = 1;
      atRuleType = atRules[type];
      condition = parseCondition(node);
    } else if (atRuleKeys.indexOf(type) >= 0) {
      var subRules = parseNode(node);
      condition = parseCondition(node);

      for (var s = 0, lens = subRules.length; s < lens; s++) {
        var subRule = subRules[s];
        condition && (subRule.mediaText = condition);
        subRule.atRuleType = atRules[type];
      }

      result = result.concat(subRules);
    }

    if (!sels && !isSingleAtRule) continue;
    var style = parseStyle(node);
    var selsParsed = parseSelector(sels);
    var selsAdd = selsParsed.add;
    sels = selsParsed.result;
    var lastRule = void 0; // For each group of selectors

    for (var k = 0, len3 = sels.length; k < len3; k++) {
      var model = createNode(sels[k], style, {
        atRule: atRules[type]
      });
      result.push(model);
      lastRule = model;
    } // Need to push somewhere not class-based selectors, if some rule was
    // created will push them there, otherwise will create a new rule


    if (selsAdd.length) {
      var selsAddStr = selsAdd.join(', ');

      if (lastRule) {
        lastRule.selectorsAdd = selsAddStr;
      } else {
        var _model = {
          selectors: [],
          selectorsAdd: selsAddStr,
          style: style
        };
        singleAtRule && (_model.singleAtRule = singleAtRule);
        atRuleType && (_model.atRuleType = atRuleType);
        condition && (_model.mediaText = condition);
        result.push(_model);
      }
    } // console.log('LAST PUSH', result[result.length - 1]);

  }

  return result;
};
/**
 * Parse CSS string and return the array of objects
 * @param  {String} str CSS string
 * @return {Array<Object>} Array of objects for the definition of CSSRules
 */

/* harmony default export */ __webpack_exports__["default"] = (function (str) {
  var el = document.createElement('style');
  el.innerHTML = str; // There is no .sheet before adding it to the <head>

  document.head.appendChild(el);
  var sheet = el.sheet;
  document.head.removeChild(el);
  return parseNode(sheet);
});

/***/ }),

/***/ "./src/parser/model/ParserCss.js":
/*!***************************************!*\
  !*** ./src/parser/model/ParserCss.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BrowserParserCss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserParserCss */ "./src/parser/model/BrowserParserCss.js");


/* harmony default export */ __webpack_exports__["default"] = (function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    /**
     * Parse CSS string to a desired model object
     * @param  {String} str CSS string
     * @return {Array<Object>}
     */
    parse: function parse(str) {
      var _this = this;

      var result = [];
      var parserCss = config.parserCss,
          _config$em = config.em,
          em = _config$em === void 0 ? {} : _config$em;
      var editor = em && em.get && em.get('Editor');
      var nodes = parserCss ? parserCss(str, editor) : Object(_BrowserParserCss__WEBPACK_IMPORTED_MODULE_1__["default"])(str);
      nodes.forEach(function (node) {
        return result = result.concat(_this.checkNode(node));
      });
      return result;
    },

    /**
     * Check the returned node from a custom parser and transforms it to
     * a valid object for the CSS composer
     * @return {[type]}
     */
    checkNode: function checkNode(node) {
      var _node = node,
          selectors = _node.selectors,
          style = _node.style;

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isString"])(selectors)) {
        var nodes = [];
        var selsParsed = Object(_BrowserParserCss__WEBPACK_IMPORTED_MODULE_1__["parseSelector"])(selectors);
        var classSets = selsParsed.result;
        var selectorsAdd = selsParsed.add.join(', ');
        var opts = {
          atRule: node.atRule,
          mediaText: node.params
        };

        if (classSets.length) {
          classSets.forEach(function (classSet) {
            nodes.push(Object(_BrowserParserCss__WEBPACK_IMPORTED_MODULE_1__["createNode"])(classSet, style, opts));
          });
        } else {
          nodes.push(Object(_BrowserParserCss__WEBPACK_IMPORTED_MODULE_1__["createNode"])([], style, opts));
        }

        if (selectorsAdd) {
          var lastNode = nodes[nodes.length - 1];
          lastNode.selectorsAdd = selectorsAdd;
        }

        node = nodes;
      }

      return node;
    }
  };
});

/***/ }),

/***/ "./src/parser/model/ParserHtml.js":
/*!****************************************!*\
  !*** ./src/parser/model/ParserHtml.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (function (config) {
  var TEXT_NODE = 'span';
  var c = config;
  var modelAttrStart = 'data-gjs-';
  return {
    compTypes: '',
    modelAttrStart: modelAttrStart,

    /**
     * Extract component props from an attribute object
     * @param {Object} attr
     * @returns {Object} An object containing props and attributes without them
     */
    splitPropsFromAttr: function splitPropsFromAttr() {
      var _this = this;

      var attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var props = {};
      var attrs = {};
      Object(underscore__WEBPACK_IMPORTED_MODULE_1__["each"])(attr, function (value, key) {
        if (key.indexOf(_this.modelAttrStart) === 0) {
          var modelAttr = key.replace(modelAttrStart, '');
          var valueLen = value.length;
          var valStr = value && Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(value);
          var firstChar = valStr && value.substr(0, 1);
          var lastChar = valStr && value.substr(valueLen - 1);
          value = value === 'true' ? true : value;
          value = value === 'false' ? false : value; // Try to parse JSON where it's possible
          // I can get false positive here (eg. a selector '[data-attr]')
          // so put it under try/catch and let fail silently

          try {
            value = firstChar == '{' && lastChar == '}' || firstChar == '[' && lastChar == ']' ? JSON.parse(value) : value;
          } catch (e) {}

          props[modelAttr] = value;
        } else {
          attrs[key] = value;
        }
      });
      return {
        props: props,
        attrs: attrs
      };
    },

    /**
     * Parse style string to object
     * @param {string} str
     * @return {Object}
     * @example
     * var stl = ParserHtml.parseStyle('color:black; width:100px; test:value;');
     * console.log(stl);
     * // {color: 'black', width: '100px', test: 'value'}
     */
    parseStyle: function parseStyle(str) {
      var result = {};
      var decls = str.split(';');

      for (var i = 0, len = decls.length; i < len; i++) {
        var decl = decls[i].trim();
        if (!decl) continue;
        var prop = decl.split(':');
        result[prop[0].trim()] = prop.slice(1).join(':').trim();
      }

      return result;
    },

    /**
     * Parse class string to array
     * @param {string} str
     * @return {Array<string>}
     * @example
     * var res = ParserHtml.parseClass('test1 test2 test3');
     * console.log(res);
     * // ['test1', 'test2', 'test3']
     */
    parseClass: function parseClass(str) {
      var result = [];
      var cls = str.split(' ');

      for (var i = 0, len = cls.length; i < len; i++) {
        var cl = cls[i].trim();
        if (!cl) continue;
        result.push(cl);
      }

      return result;
    },

    /**
     * Get data from the node element
     * @param  {HTMLElement} el DOM element to traverse
     * @return {Array<Object>}
     */
    parseNode: function parseNode(el) {
      var result = [];
      var nodes = el.childNodes;

      for (var i = 0, len = nodes.length; i < len; i++) {
        var node = nodes[i];
        var attrs = node.attributes || [];
        var attrsLen = attrs.length;
        var nodePrev = result[result.length - 1];
        var nodeChild = node.childNodes.length;
        var ct = this.compTypes;
        var model = {}; // Start with understanding what kind of component it is

        if (ct) {
          var obj = '';
          var type = node.getAttribute && node.getAttribute("".concat(modelAttrStart, "type")); // If the type is already defined, use it

          if (type) {
            model = {
              type: type
            };
          } else {
            // Iterate over all available Component Types and
            // the first with a valid result will be that component
            for (var it = 0; it < ct.length; it++) {
              var compType = ct[it];
              obj = compType.model.isComponent(node);

              if (obj) {
                if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(obj) !== 'object') {
                  obj = {
                    type: compType.id
                  };
                }

                break;
              }
            }

            model = obj;
          }
        } // Set tag name if not yet done


        if (!model.tagName) {
          model.tagName = node.tagName ? node.tagName.toLowerCase() : '';
        }

        if (attrsLen) {
          model.attributes = {};
        } // Parse attributes


        for (var j = 0; j < attrsLen; j++) {
          var nodeName = attrs[j].nodeName;
          var nodeValue = attrs[j].nodeValue; // Isolate attributes

          if (nodeName == 'style') {
            model.style = this.parseStyle(nodeValue);
          } else if (nodeName == 'class') {
            model.classes = this.parseClass(nodeValue);
          } else if (nodeName == 'contenteditable') {
            continue;
          } else if (nodeName.indexOf(modelAttrStart) === 0) {
            var modelAttr = nodeName.replace(modelAttrStart, '');
            var valueLen = nodeValue.length;
            var firstChar = nodeValue && nodeValue.substr(0, 1);
            var lastChar = nodeValue && nodeValue.substr(valueLen - 1);
            nodeValue = nodeValue === 'true' ? true : nodeValue;
            nodeValue = nodeValue === 'false' ? false : nodeValue; // Try to parse JSON where it's possible
            // I can get false positive here (eg. a selector '[data-attr]')
            // so put it under try/catch and let fail silently

            try {
              nodeValue = firstChar == '{' && lastChar == '}' || firstChar == '[' && lastChar == ']' ? JSON.parse(nodeValue) : nodeValue;
            } catch (e) {}

            model[modelAttr] = nodeValue;
          } else {
            model.attributes[nodeName] = nodeValue;
          }
        } // Check for nested elements but avoid it if already provided


        if (nodeChild && !model.components) {
          // Avoid infinite nested text nodes
          var firstChild = node.childNodes[0]; // If there is only one child and it's a TEXTNODE
          // just make it content of the current node

          if (nodeChild === 1 && firstChild.nodeType === 3) {
            !model.type && (model.type = 'text');
            model.content = firstChild.nodeValue;
          } else {
            model.components = this.parseNode(node);
          }
        } // Check if it's a text node and if could be moved to the prevous model


        if (model.type == 'textnode') {
          if (nodePrev && nodePrev.type == 'textnode') {
            nodePrev.content += model.content;
            continue;
          } // Throw away empty nodes (keep spaces)


          if (!config.keepEmptyTextNodes) {
            var content = node.nodeValue;

            if (content != ' ' && !content.trim()) {
              continue;
            }
          }
        } // If all children are texts and there is some textnode the parent should
        // be text too otherwise I'm unable to edit texnodes


        var comps = model.components;

        if (!model.type && comps) {
          var allTxt = 1;
          var foundTextNode = 0;

          for (var ci = 0; ci < comps.length; ci++) {
            var comp = comps[ci];
            var cType = comp.type;

            if (['text', 'textnode'].indexOf(cType) < 0 && c.textTags.indexOf(comp.tagName) < 0) {
              allTxt = 0;
              break;
            }

            if (cType == 'textnode') {
              foundTextNode = 1;
            }
          }

          if (allTxt && foundTextNode) {
            model.type = 'text';
          }
        } // If tagName is still empty and is not a textnode, do not push it


        if (!model.tagName && model.type != 'textnode') {
          continue;
        }

        result.push(model);
      }

      return result;
    },

    /**
     * Parse HTML string to a desired model object
     * @param  {string} str HTML string
     * @param  {ParserCss} parserCss In case there is style tags inside HTML
     * @return {Object}
     */
    parse: function parse(str, parserCss) {
      var config = c.em && c.em.get('Config') || {};
      var res = {
        html: '',
        css: ''
      };
      var el = document.createElement('div');
      el.innerHTML = str;
      var scripts = el.querySelectorAll('script');
      var i = scripts.length; // Remove all scripts

      if (!config.allowScripts) {
        while (i--) {
          scripts[i].parentNode.removeChild(scripts[i]);
        }
      } // Detach style tags and parse them


      if (parserCss) {
        var styleStr = '';
        var styles = el.querySelectorAll('style');
        var j = styles.length;

        while (j--) {
          styleStr = styles[j].innerHTML + styleStr;
          styles[j].parentNode.removeChild(styles[j]);
        }

        if (styleStr) res.css = parserCss.parse(styleStr);
      }

      var result = this.parseNode(el);
      if (result.length == 1) result = result[0];
      res.html = result;
      return res;
    }
  };
});

/***/ }),

/***/ "./src/plugin_manager/config/config.js":
/*!*********************************************!*\
  !*** ./src/plugin_manager/config/config.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  plugins: []
});

/***/ }),

/***/ "./src/plugin_manager/index.js":
/*!*************************************!*\
  !*** ./src/plugin_manager/index.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config/config */ "./src/plugin_manager/config/config.js");

/* harmony default export */ __webpack_exports__["default"] = (function (config) {
  var c = config || {}; // Set default options

  for (var name in _config_config__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    if (!(name in c)) c[name] = _config_config__WEBPACK_IMPORTED_MODULE_0__["default"][name];
  }

  var plugins = {};
  return {
    /**
     * Add new plugin. Plugins could not be overwritten
     * @param {string} id Plugin ID
     * @param {Function} plugin Function which contains all plugin logic
     * @return {Function} The plugin function
     * @example
     * PluginManager.add('some-plugin', function(editor){
     *   editor.Commands.add('new-command', {
     *     run:  function(editor, senderBtn){
     *       console.log('Executed new-command');
     *     }
     *   })
     * });
     */
    add: function add(id, plugin) {
      if (plugins[id]) {
        return plugins[id];
      }

      plugins[id] = plugin;
      return plugin;
    },

    /**
     * Returns plugin by ID
     * @param  {string} id Plugin ID
     * @return {Function|undefined} Plugin
     * @example
     * var plugin = PluginManager.get('some-plugin');
     * plugin(editor);
     */
    get: function get(id) {
      return plugins[id];
    },

    /**
     * Returns object with all plugins
     * @return {Object}
     */
    getAll: function getAll() {
      return plugins;
    }
  };
});

/***/ }),

/***/ "./src/selector_manager/config/config.js":
/*!***********************************************!*\
  !*** ./src/selector_manager/config/config.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // Style prefix
  stylePrefix: 'clm-',
  // Specify the element to use as a container, string (query) or HTMLElement
  // With the empty value, nothing will be rendered
  appendTo: '',
  // Default selectors
  selectors: [],
  // Label for selectors
  label: 'Classes',
  // Label for states
  statesLabel: '- State -',
  selectedLabel: 'Selected',
  // States
  states: [{
    name: 'hover',
    label: 'Hover'
  }, {
    name: 'active',
    label: 'Click'
  }, {
    name: 'nth-of-type(2n)',
    label: 'Even/Odd'
  }],
  // Custom selector name escaping strategy, eg.
  // name => name.replace(' ', '_')
  escapeName: 0
});

/***/ }),

/***/ "./src/selector_manager/index.js":
/*!***************************************!*\
  !*** ./src/selector_manager/index.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/config */ "./src/selector_manager/config/config.js");
/* harmony import */ var _model_Selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/Selector */ "./src/selector_manager/model/Selector.js");
/* harmony import */ var _model_Selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/Selectors */ "./src/selector_manager/model/Selectors.js");
/* harmony import */ var _view_ClassTagsView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view/ClassTagsView */ "./src/selector_manager/view/ClassTagsView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Selectors in GrapesJS are used in CSS Composer inside Rules and in Components as classes. To illustrate this concept let's take
 * a look at this code:
 *
 * ```css
 * span > #send-btn.btn{
 *  ...
 * }
 * ```
 * ```html
 * <span>
 *   <button id="send-btn" class="btn"></button>
 * </span>
 * ```
 *
 * In this scenario we get:
 * * span     -> selector of type `tag`
 * * send-btn -> selector of type `id`
 * * btn      -> selector of type `class`
 *
 * So, for example, being `btn` the same class entity it'll be easier to refactor and track things.
 *
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/selector_manager/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  selectorManager: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const selectorManager = editor.SelectorManager;
 * ```
 *
 * * [getConfig](#getconfig)
 * * [add](#add)
 * * [addClass](#addclass)
 * * [get](#get)
 * * [getAll](#getAll)
 *
 * @module SelectorManager
 */






var isId = function isId(str) {
  return Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(str) && str[0] == '#';
};

var isClass = function isClass(str) {
  return Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(str) && str[0] == '.';
};

/* harmony default export */ __webpack_exports__["default"] = (function (config) {
  var c = config || {};
  var selectors, selectorTags;
  return {
    Selector: _model_Selector__WEBPACK_IMPORTED_MODULE_3__["default"],
    Selectors: _model_Selectors__WEBPACK_IMPORTED_MODULE_4__["default"],

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'SelectorManager',

    /**
     * Get configuration object
     * @return {Object}
     */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @return {this}
     * @private
     */
    init: function init() {
      var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_2__["default"], {}, conf);
      var em = c.em;
      var ppfx = c.pStylePrefix;

      if (ppfx) {
        c.stylePrefix = ppfx + c.stylePrefix;
      }

      selectorTags = new _view_ClassTagsView__WEBPACK_IMPORTED_MODULE_5__["default"]({
        collection: new _model_Selectors__WEBPACK_IMPORTED_MODULE_4__["default"]([], {
          em: em,
          config: c
        }),
        config: c
      }); // Global selectors container

      selectors = new _model_Selectors__WEBPACK_IMPORTED_MODULE_4__["default"](c.selectors);
      selectors.on('add', function (model) {
        return em.trigger('selector:add', model);
      });
      return this;
    },
    postRender: function postRender() {
      var elTo = this.getConfig().appendTo;

      if (elTo) {
        var el = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isElement"])(elTo) ? elTo : document.querySelector(elTo);
        el.appendChild(this.render([]));
      }
    },
    addSelector: function addSelector(name) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var opts = _objectSpread({}, opt);

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isObject"])(name)) {
        opts = name;
      } else {
        opts.name = name;
      }

      if (isId(opts.name)) {
        opts.name = opts.name.substr(1);
        opts.type = _model_Selector__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_ID;
      } else if (isClass(opts.name)) {
        opts.name = opts.name.substr(1);
      }

      if (opts.label && !opts.name) {
        opts.name = this.escapeName(opts.label);
      }

      var cname = opts.name;
      var selector = cname ? this.get(cname, opts.type) : selectors.where(opts)[0];

      if (!selector) {
        return selectors.add(opts, {
          config: c
        });
      }

      return selector;
    },
    getSelector: function getSelector(name) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _model_Selector__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_CLASS;

      if (isId(name)) {
        name = name.substr(1);
        type = _model_Selector__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_ID;
      } else if (isClass(name)) {
        name = name.substr(1);
      }

      return selectors.where({
        name: name,
        type: type
      })[0];
    },

    /**
     * Add a new selector to collection if it's not already exists. Class type is a default one
     * @param {String|Array} name Selector/s name
     * @param {Object} opts Selector options
     * @param {String} [opts.label=''] Label for the selector, if it's not provided the label will be the same as the name
     * @param {String} [opts.type=1] Type of the selector. At the moment, only 'class' (1) is available
     * @return {Model|Array}
     * @example
     * const selector = selectorManager.add('selectorName');
     * // Same as
     * const selector = selectorManager.add('selectorName', {
     *   type: 1,
     *   label: 'selectorName'
     * });
     * // Multiple selectors
     * const selectors = selectorManager.add(['.class1', '.class2', '#id1']);
     * */
    add: function add(name) {
      var _this = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(name)) {
        return name.map(function (item) {
          return _this.addSelector(item, opts);
        });
      } else {
        return this.addSelector(name, opts);
      }
    },

    /**
     * Add class selectors
     * @param {Array|string} classes Array or string of classes
     * @return {Array} Array of added selectors
     * @example
     * sm.addClass('class1');
     * sm.addClass('class1 class2');
     * sm.addClass(['class1', 'class2']);
     * // -> [SelectorObject, ...]
     */
    addClass: function addClass(classes) {
      var _this2 = this;

      var added = [];

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(classes)) {
        classes = classes.trim().split(' ');
      }

      classes.forEach(function (name) {
        return added.push(_this2.addSelector(name));
      });
      return added;
    },

    /**
     * Get the selector by its name
     * @param {String|Array} name Selector name
     * @param {String} type Selector type
     * @return {Model|Array}
     * @example
     * const selector = selectorManager.get('selectorName');
     * // or get an array
     * const selectors = selectorManager.get(['class1', 'class2']);
     * */
    get: function get(name, type) {
      var _this3 = this;

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(name)) {
        var result = [];

        var _selectors = name.map(function (item) {
          return _this3.getSelector(item);
        }).filter(function (item) {
          return item;
        });

        _selectors.forEach(function (item) {
          return result.indexOf(item) < 0 && result.push(item);
        });

        return result;
      } else {
        return this.getSelector(name, type);
      }
    },

    /**
     * Get all selectors
     * @return {Collection}
     * */
    getAll: function getAll() {
      return selectors;
    },

    /**
     * Return escaped selector name
     * @param {String} name Selector name to escape
     * @returns {String} Escaped name
     */
    escapeName: function escapeName(name) {
      var _c = c,
          escapeName = _c.escapeName;
      return escapeName ? escapeName(name) : _model_Selector__WEBPACK_IMPORTED_MODULE_3__["default"].escapeName(name);
    },

    /**
     * Render class selectors. If an array of selectors is provided a new instance of the collection will be rendered
     * @param {Array<Object>} selectors
     * @return {HTMLElement}
     * @private
     */
    render: function render(selectors) {
      if (selectors) {
        var view = new _view_ClassTagsView__WEBPACK_IMPORTED_MODULE_5__["default"]({
          collection: new _model_Selectors__WEBPACK_IMPORTED_MODULE_4__["default"](selectors),
          config: c
        });
        return view.render().el;
      } else return selectorTags.render().el;
    }
  };
});

/***/ }),

/***/ "./src/selector_manager/model/Selector.js":
/*!************************************************!*\
  !*** ./src/selector_manager/model/Selector.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var TYPE_CLASS = 1;
var TYPE_ID = 2;
var Selector = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  idAttribute: 'name',
  defaults: {
    name: '',
    label: '',
    // Type of the selector
    type: TYPE_CLASS,
    // If not active it's not selectable by the style manager (uncheckboxed)
    active: true,
    // Can't be seen by the style manager, therefore even by the user
    // Will be rendered only in export code
    private: false,
    // If true, can't be removed from the attacched element
    protected: false
  },
  initialize: function initialize(props) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _opts$config = opts.config,
        config = _opts$config === void 0 ? {} : _opts$config;
    var name = this.get('name');
    var label = this.get('label');

    if (!name) {
      this.set('name', label);
    } else if (!label) {
      this.set('label', name);
    }

    var namePreEsc = this.get('name');
    var escapeName = config.escapeName;
    var nameEsc = escapeName ? escapeName(namePreEsc) : Selector.escapeName(namePreEsc);
    this.set('name', nameEsc);
  },

  /**
   * Get full selector name
   * @return {string}
   */
  getFullName: function getFullName() {
    var init = '';

    switch (this.get('type')) {
      case TYPE_CLASS:
        init = '.';
        break;

      case TYPE_ID:
        init = '#';
        break;
    }

    return init + this.get('name');
  }
}, {
  // All type selectors: https://developer.mozilla.org/it/docs/Web/CSS/CSS_Selectors
  // Here I define only what I need
  TYPE_CLASS: TYPE_CLASS,
  TYPE_ID: TYPE_ID,

  /**
   * Escape string
   * @param {string} name
   * @return {string}
   * @private
   */
  escapeName: function escapeName(name) {
    return "".concat(name).trim().replace(/([^a-z0-9\w-\:]+)/gi, '-');
  }
});
/* harmony default export */ __webpack_exports__["default"] = (Selector);

/***/ }),

/***/ "./src/selector_manager/model/Selectors.js":
/*!*************************************************!*\
  !*** ./src/selector_manager/model/Selectors.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Selector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Selector */ "./src/selector_manager/model/Selector.js");



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection.extend({
  model: _Selector__WEBPACK_IMPORTED_MODULE_2__["default"],
  modelId: function modelId(attr) {
    return "".concat(attr.name, "_").concat(attr.type || _Selector__WEBPACK_IMPORTED_MODULE_2__["default"].TYPE_CLASS);
  },
  getStyleable: function getStyleable() {
    return Object(underscore__WEBPACK_IMPORTED_MODULE_0__["filter"])(this.models, function (item) {
      return item.get('active') && !item.get('private');
    });
  },
  getValid: function getValid() {
    return Object(underscore__WEBPACK_IMPORTED_MODULE_0__["filter"])(this.models, function (item) {
      return !item.get('private');
    });
  },
  getFullString: function getFullString(collection) {
    var result = [];
    var coll = collection || this;
    coll.forEach(function (selector) {
      return result.push(selector.getFullName());
    });
    return result.join('').trim();
  }
}));

/***/ }),

/***/ "./src/selector_manager/view/ClassTagView.js":
/*!***************************************************!*\
  !*** ./src/selector_manager/view/ClassTagView.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

var inputProp = 'contentEditable';
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  template: function template() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var label = this.model.get('label') || '';
    return "\n      <span id=\"".concat(pfx, "checkbox\" class=\"fa\" data-tag-status></span>\n      <span id=\"").concat(pfx, "tag-label\" data-tag-name>").concat(label, "</span>\n      <span id=\"").concat(pfx, "close\" data-tag-remove>\n        &Cross;\n      </span>\n    ");
  },
  events: {
    'click [data-tag-remove]': 'removeTag',
    'click [data-tag-status]': 'changeStatus',
    'dblclick [data-tag-name]': 'startEditTag',
    'focusout [data-tag-name]': 'endEditTag'
  },
  initialize: function initialize(o) {
    var config = o.config || {};
    this.config = config;
    this.coll = o.coll || null;
    this.pfx = config.stylePrefix || '';
    this.ppfx = config.pStylePrefix || '';
    this.em = config.em;
    this.listenTo(this.model, 'change:active', this.updateStatus);
  },

  /**
   * Returns the element which containes the anme of the tag
   * @return {HTMLElement}
   */
  getInputEl: function getInputEl() {
    if (!this.inputEl) {
      this.inputEl = this.el.querySelector('[data-tag-name]');
    }

    return this.inputEl;
  },

  /**
   * Start editing tag
   * @private
   */
  startEditTag: function startEditTag() {
    var em = this.em;
    var inputEl = this.getInputEl();
    inputEl[inputProp] = true;
    inputEl.focus();
    em && em.setEditing(1);
  },

  /**
   * End editing tag. If the class typed already exists the
   * old one will be restored otherwise will be changed
   * @private
   */
  endEditTag: function endEditTag() {
    var model = this.model;
    var inputEl = this.getInputEl();
    var label = inputEl.textContent;
    var em = this.em;
    var sm = em && em.get('SelectorManager');
    inputEl[inputProp] = false;
    em && em.setEditing(0);

    if (sm) {
      var name = sm.escapeName(label);

      if (sm.get(name)) {
        inputEl.innerText = model.get('label');
      } else {
        model.set({
          name: name,
          label: label
        });
      }
    }
  },

  /**
   * Update status of the tag
   * @private
   */
  changeStatus: function changeStatus() {
    var model = this.model;
    model.set('active', !model.get('active'));
  },

  /**
   * Remove tag from the selected component
   * @param {Object} e
   * @private
   */
  removeTag: function removeTag() {
    var em = this.em,
        model = this.model;
    var sel = em && em.getSelected();
    if (!model.get('protected') && sel) sel.getSelectors().remove(model);
  },

  /**
   * Update status of the checkbox
   * @private
   */
  updateStatus: function updateStatus() {
    var model = this.model,
        $el = this.$el;
    var chkOn = 'fa-check-square-o';
    var chkOff = 'fa-square-o';
    var $chk = $el.find('[data-tag-status]');

    if (model.get('active')) {
      $chk.removeClass(chkOff).addClass(chkOn);
      $el.removeClass('opac50');
    } else {
      $chk.removeClass(chkOn).addClass(chkOff);
      $el.addClass('opac50');
    }
  },
  render: function render() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    this.$el.html(this.template());
    this.$el.attr('class', "".concat(pfx, "tag ").concat(ppfx, "three-bg"));
    this.updateStatus();
    return this;
  }
}));

/***/ }),

/***/ "./src/selector_manager/view/ClassTagsView.js":
/*!****************************************************!*\
  !*** ./src/selector_manager/view/ClassTagsView.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ClassTagView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ClassTagView */ "./src/selector_manager/view/ClassTagView.js");



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  template: Object(underscore__WEBPACK_IMPORTED_MODULE_0__["template"])("\n  <div id=\"<%= pfx %>up\">\n    <div id=\"<%= pfx %>label\"><%= label %></div>\n    <div id=\"<%= pfx %>status-c\">\n      <span id=\"<%= pfx %>input-c\">\n        <div class=\"<%= ppfx %>field <%= ppfx %>select\">\n          <span id=\"<%= ppfx %>input-holder\">\n            <select id=\"<%= pfx %>states\">\n              <option value=\"\"><%= statesLabel %></option>\n            </select>\n          </span>\n          <div class=\"<%= ppfx %>sel-arrow\">\n            <div class=\"<%= ppfx %>d-s-arrow\"></div>\n          </div>\n        </div>\n      </span>\n    </div>\n  </div>\n  <div id=\"<%= pfx %>tags-field\" class=\"<%= ppfx %>field\">\n    <div id=\"<%= pfx %>tags-c\"></div>\n    <input id=\"<%= pfx %>new\" />\n    <span id=\"<%= pfx %>add-tag\" class=\"fa fa-plus\"></span>\n  </div>\n  <div id=\"<%= pfx %>sel-help\">\n    <div id=\"<%= pfx %>label\"><%= selectedLabel %></div>\n    <div id=\"<%= pfx %>sel\"></div>\n    <div style=\"clear:both\"></div>\n  </div>"),
  events: {},
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.config = o.config || {};
    this.pfx = this.config.stylePrefix || '';
    this.ppfx = this.config.pStylePrefix || '';
    this.className = this.pfx + 'tags';
    this.addBtnId = this.pfx + 'add-tag';
    this.newInputId = this.pfx + 'new';
    this.stateInputId = this.pfx + 'states';
    this.stateInputC = this.pfx + 'input-c';
    this.states = this.config.states || [];
    this.events['click #' + this.addBtnId] = 'startNewTag';
    this.events['blur #' + this.newInputId] = 'endNewTag';
    this.events['keyup #' + this.newInputId] = 'onInputKeyUp';
    this.events['change #' + this.stateInputId] = 'stateChanged';
    var em = this.config.em;
    var emitter = this.getStyleEmitter();
    this.target = this.config.em;
    this.em = em;
    this.listenTo(emitter, 'styleManager:update', this.componentChanged);
    this.listenTo(em, 'component:toggled component:update:classes', this.componentChanged);
    this.listenTo(em, 'component:update:classes', this.updateSelector);
    this.listenTo(this.collection, 'add', this.addNew);
    this.listenTo(this.collection, 'reset', this.renderClasses);
    this.listenTo(this.collection, 'remove', this.tagRemoved);
    this.delegateEvents();
  },
  getStyleEmitter: function getStyleEmitter() {
    var em = this.em;
    var sm = em && em.get('StyleManager');
    var emitter = sm && sm.getEmitter();
    return emitter || {};
  },

  /**
   * Triggered when a tag is removed from collection
   * @param {Object} model Removed model
   * @private
   */
  tagRemoved: function tagRemoved(model) {
    this.updateStateVis();
  },

  /**
   * Create select input with states
   * @return {string} String of options
   * @private
   */
  getStateOptions: function getStateOptions() {
    var strInput = '';

    for (var i = 0; i < this.states.length; i++) {
      strInput += '<option value="' + this.states[i].name + '">' + this.states[i].label + '</option>';
    }

    return strInput;
  },

  /**
   * Add new model
   * @param {Object} model
   * @private
   */
  addNew: function addNew(model) {
    this.addToClasses(model);
  },

  /**
   * Start tag creation
   * @param {Object} e
   * @private
   */
  startNewTag: function startNewTag(e) {
    this.$addBtn.get(0).style.display = 'none';
    this.$input.show().focus();
  },

  /**
   * End tag creation
   * @param {Object} e
   * @private
   */
  endNewTag: function endNewTag(e) {
    this.$addBtn.get(0).style.display = '';
    this.$input.hide().val('');
  },

  /**
   * Checks what to do on keyup event
   * @param  {Object} e
   * @private
   */
  onInputKeyUp: function onInputKeyUp(e) {
    if (e.keyCode === 13) this.addNewTag(this.$input.val());else if (e.keyCode === 27) this.endNewTag();
  },

  /**
   * Triggered when component is changed
   * @param  {Object} e
   * @private
   */
  componentChanged: Object(underscore__WEBPACK_IMPORTED_MODULE_0__["debounce"])(function (target) {
    target = target || this.getTarget();
    this.compTarget = target;
    var validSelectors = [];

    if (target) {
      var state = target.get('state');
      state && this.getStates().val(state);
      var selectors = target.getSelectors();
      validSelectors = selectors.getValid();
    }

    this.collection.reset(validSelectors);
    this.updateStateVis(target);
  }),
  getTarget: function getTarget() {
    return this.target.getSelected();
  },

  /**
   * Update states visibility. Hides states in case there is no tags
   * inside collection
   * @private
   */
  updateStateVis: function updateStateVis(target) {
    var em = this.em;
    var avoidInline = em && em.getConfig('avoidInlineStyle');
    var display = this.collection.length || avoidInline ? 'block' : 'none';
    this.getStatesC().css('display', display);
    this.updateSelector(target);
  },

  /**
   * Update selector helper
   * @return {this}
   * @private
   */
  updateSelector: function updateSelector(target) {
    var pfx = this.pfx,
        collection = this.collection,
        el = this.el;
    var selected = target || this.getTarget();
    this.compTarget = selected;
    if (!selected || !selected.get) return;
    var state = selected.get('state');
    var coll = collection;
    var result = coll.getFullString(selected.getSelectors().getStyleable());
    result = result || selected.get('selectorsAdd') || (selected.getId ? "#".concat(selected.getId()) : '');
    result += state ? ":".concat(state) : '';
    var elSel = el.querySelector("#".concat(pfx, "sel"));
    elSel && (elSel.innerHTML = result);
  },

  /**
   * Triggered when the select with states is changed
   * @param  {Object} e
   * @private
   */
  stateChanged: function stateChanged(e) {
    if (this.compTarget) {
      this.compTarget.set('state', this.$states.val());
      this.updateSelector();
    }
  },

  /**
   * Add new tag to collection, if possible, and to the component
   * @param  {Object} e
   * @private
   */
  addNewTag: function addNewTag(label) {
    var target = this.target;
    var component = this.compTarget;

    if (!label.trim()) {
      return;
    }

    if (target) {
      var sm = target.get('SelectorManager');
      var model = sm.add({
        label: label
      });

      if (component) {
        var compCls = component.getSelectors();
        compCls.add(model);
        this.collection.add(model);
        this.updateStateVis();
      }
    }

    this.endNewTag();
  },

  /**
   * Add new object to collection
   * @param   {Object} model  Model
   * @param   {Object} fragmentEl   Fragment collection
   * @return {Object} Object created
   * @private
   * */
  addToClasses: function addToClasses(model) {
    var fragmentEl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var fragment = fragmentEl;
    var classes = this.getClasses();
    var rendered = new _ClassTagView__WEBPACK_IMPORTED_MODULE_2__["default"]({
      model: model,
      config: this.config,
      coll: this.collection
    }).render().el;
    fragment ? fragment.appendChild(rendered) : classes.append(rendered);
    return rendered;
  },

  /**
   * Render the collection of classes
   * @private
   */
  renderClasses: function renderClasses() {
    var _this = this;

    var frag = document.createDocumentFragment();
    var classes = this.getClasses();
    classes.empty();
    this.collection.each(function (model) {
      return _this.addToClasses(model, frag);
    });
    classes.append(frag);
  },

  /**
   * Return classes element
   * @return {HTMLElement}
   * @private
   */
  getClasses: function getClasses() {
    return this.$el.find("#".concat(this.pfx, "tags-c"));
  },

  /**
   * Return states element
   * @return {HTMLElement}
   * @private
   */
  getStates: function getStates() {
    if (!this.$states) this.$states = this.$el.find('#' + this.stateInputId);
    return this.$states;
  },

  /**
   * Return states container element
   * @return {HTMLElement}
   * @private
   */
  getStatesC: function getStatesC() {
    if (!this.$statesC) this.$statesC = this.$el.find('#' + this.stateInputC);
    return this.$statesC;
  },
  render: function render() {
    var ppfx = this.ppfx;
    var config = this.config;
    var $el = this.$el;
    $el.html(this.template({
      selectedLabel: config.selectedLabel,
      statesLabel: config.statesLabel,
      label: config.label,
      pfx: this.pfx,
      ppfx: this.ppfx
    }));
    this.$input = $el.find('input#' + this.newInputId);
    this.$addBtn = $el.find('#' + this.addBtnId);
    this.$classes = $el.find('#' + this.pfx + 'tags-c');
    this.$states = $el.find('#' + this.stateInputId);
    this.$statesC = $el.find('#' + this.stateInputC);
    this.$states.append(this.getStateOptions());
    this.renderClasses();
    $el.attr('class', "".concat(this.className, " ").concat(ppfx, "one-bg ").concat(ppfx, "two-color"));
    return this;
  }
}));

/***/ }),

/***/ "./src/storage_manager/config/config.js":
/*!**********************************************!*\
  !*** ./src/storage_manager/config/config.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // Prefix identifier that will be used inside storing and loading
  id: 'gjs-',
  // Enable/Disable autosaving
  autosave: 1,
  // Indicates if load data inside editor after init
  autoload: 1,
  // Indicates which storage to use. Available: local | remote
  type: 'local',
  // If autosave enabled, indicates how many steps (general changes to structure)
  // need to be done before save. Useful with remoteStorage to reduce remote calls
  stepsBeforeSave: 1,
  //Enable/Disable components model (JSON format)
  storeComponents: 1,
  //Enable/Disable styles model (JSON format)
  storeStyles: 1,
  //Enable/Disable saving HTML template
  storeHtml: 1,
  //Enable/Disable saving CSS template
  storeCss: 1,
  // ONLY FOR LOCAL STORAGE
  // If enabled, checks if browser supports Local Storage
  checkLocal: 1,
  // ONLY FOR REMOTE STORAGE
  // Custom parameters to pass with the remote storage request, eg. csrf token
  params: {},
  // Custom headers for the remote storage request
  headers: {},
  // Endpoint where to save all stuff
  urlStore: '',
  // Endpoint where to fetch data
  urlLoad: '',
  //Callback before request
  beforeSend: function beforeSend(jqXHR, settings) {},
  //Callback after request
  onComplete: function onComplete(jqXHR, status) {},
  // set contentType paramater of $.ajax
  // true: application/json; charset=utf-8'
  // false: 'x-www-form-urlencoded'
  contentTypeJson: true,
  credentials: 'include',
  // Pass custom options to fetch API (remote storage)
  // You can pass a simple object: { someOption: 'someValue' }
  // or a function wich returns and object to add:
  // currentOpts => {
  //  return currentOpts.method === 'post' ?  { method: 'patch' } : {};
  // }
  fetchOptions: ''
});

/***/ }),

/***/ "./src/storage_manager/index.js":
/*!**************************************!*\
  !*** ./src/storage_manager/index.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/config */ "./src/storage_manager/config/config.js");
/* harmony import */ var _model_LocalStorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/LocalStorage */ "./src/storage_manager/model/LocalStorage.js");
/* harmony import */ var _model_RemoteStorage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/RemoteStorage */ "./src/storage_manager/model/RemoteStorage.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/storage_manager/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  storageManager: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const storageManager = editor.StorageManager;
 * ```
 *
 * * [getConfig](#getconfig)
 * * [isAutosave](#isautosave)
 * * [setAutosave](#setautosave)
 * * [getStepsBeforeSave](#getstepsbeforesave)
 * * [setStepsBeforeSave](#setstepsbeforesave)
 * * [setStepsBeforeSave](#setstepsbeforesave)
 * * [getStorages](#getstorages)
 * * [getCurrent](#getcurrent)
 * * [getCurrentStorage](#getcurrentstorage)
 * * [setCurrent](#setcurrent)
 * * [add](#add)
 * * [get](#get)
 * * [store](#store)
 * * [load](#load)
 *
 * @module StorageManager
 */



/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var em;
  var storages = {};
  var defaultStorages = {};
  var eventStart = 'storage:start';
  var eventEnd = 'storage:end';
  var eventError = 'storage:error';
  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'StorageManager',

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @param {string} [config.id='gjs-'] The prefix for the fields, useful to differentiate storing/loading
     * with multiple editors on the same page. For example, in local storage, the item of HTML will be saved like 'gjs-html'
     * @param {Boolean} [config.autosave=true] Indicates if autosave mode is enabled, works in conjunction with stepsBeforeSave
     * @param {number} [config.stepsBeforeSave=1] If autosave enabled, indicates how many steps/changes are necessary
     * before autosave is triggered
     * @param {string} [config.type='local'] Default storage type. Available: 'local' | 'remote' | ''(do not store)
     * @private
     * @example
     * ...
     * {
     *    autosave: false,
     *    type: 'remote',
     * }
     * ...
     */
    init: function init() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_1__["default"], {}, config);
      em = c.em;
      if (c._disable) c.type = 0;
      defaultStorages.remote = new _model_RemoteStorage__WEBPACK_IMPORTED_MODULE_3__["default"](c);
      defaultStorages.local = new _model_LocalStorage__WEBPACK_IMPORTED_MODULE_2__["default"](c);
      c.currentStorage = c.type;
      this.loadDefaultProviders().setCurrent(c.type);
      return this;
    },

    /**
     * Get configuration object
     * @return {Object}
     * */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Checks if autosave is enabled
     * @return {Boolean}
     * */
    isAutosave: function isAutosave() {
      return !!c.autosave;
    },

    /**
     * Set autosave value
     * @param  {Boolean}  v
     * @return {this}
     * */
    setAutosave: function setAutosave(v) {
      c.autosave = !!v;
      return this;
    },

    /**
     * Returns number of steps required before trigger autosave
     * @return {number}
     * */
    getStepsBeforeSave: function getStepsBeforeSave() {
      return c.stepsBeforeSave;
    },

    /**
     * Set steps required before trigger autosave
     * @param  {number} v
     * @return {this}
     * */
    setStepsBeforeSave: function setStepsBeforeSave(v) {
      c.stepsBeforeSave = v;
      return this;
    },

    /**
     * Add new storage
     * @param {string} id Storage ID
     * @param  {Object} storage Storage wrapper
     * @param  {Function} storage.load Load method
     * @param  {Function} storage.store Store method
     * @return {this}
     * @example
     * storageManager.add('local2', {
     *   load: function(keys, clb, clbErr) {
     *     var res = {};
     *     for (var i = 0, len = keys.length; i < len; i++){
     *       var v = localStorage.getItem(keys[i]);
     *       if(v) res[keys[i]] = v;
     *     }
     *     clb(res); // might be called inside some async method
     *     // In case of errors...
     *     // clbErr('Went something wrong');
     *   },
     *   store: function(data, clb, clbErr) {
     *     for(var key in data)
     *       localStorage.setItem(key, data[key]);
     *     clb(); // might be called inside some async method
     *   }
     * });
     * */
    add: function add(id, storage) {
      storages[id] = storage;
      return this;
    },

    /**
     * Returns storage by id
     * @param {string} id Storage ID
     * @return {Object|null}
     * */
    get: function get(id) {
      return storages[id] || null;
    },

    /**
     * Returns all storages
     * @return   {Array}
     * */
    getStorages: function getStorages() {
      return storages;
    },

    /**
     * Returns current storage type
     * @return {string}
     * */
    getCurrent: function getCurrent() {
      return c.currentStorage;
    },

    /**
     * Set current storage type
     * @param {string} id Storage ID
     * @return {this}
     * */
    setCurrent: function setCurrent(id) {
      c.currentStorage = id;
      return this;
    },

    /**
     * Store key-value resources in the current storage
     * @param  {Object} data Data in key-value format, eg. {item1: value1, item2: value2}
     * @param {Function} clb Callback function
     * @return {Object|null}
     * @example
     * storageManager.store({item1: value1, item2: value2});
     * */
    store: function store(data, clb) {
      var _this = this;

      var st = this.get(this.getCurrent());
      var toStore = {};
      this.onStart('store', data);

      for (var key in data) {
        toStore[c.id + key] = data[key];
      }

      return st ? st.store(toStore, function (res) {
        clb && clb(res);

        _this.onEnd('store', res);
      }, function (err) {
        _this.onError('store', err);
      }) : null;
    },

    /**
     * Load resource from the current storage by keys
     * @param  {string|Array<string>} keys Keys to load
     * @param {Function} clb Callback function
     * @example
     * storageManager.load(['item1', 'item2'], res => {
     *  // res -> {item1: value1, item2: value2}
     * });
     * storageManager.load('item1', res => {
     * // res -> {item1: value1}
     * });
     * */
    load: function load(keys, clb) {
      var _this2 = this;

      var st = this.get(this.getCurrent());
      var keysF = [];
      var result = {};
      if (typeof keys === 'string') keys = [keys];
      this.onStart('load', keys);

      for (var i = 0, len = keys.length; i < len; i++) {
        keysF.push(c.id + keys[i]);
      }

      if (st) {
        st.load(keysF, function (res) {
          // Restore keys name
          var reg = new RegExp('^' + c.id + '');

          for (var itemKey in res) {
            var itemKeyR = itemKey.replace(reg, '');
            result[itemKeyR] = res[itemKey];
          }

          clb && clb(result);

          _this2.onEnd('load', result);
        }, function (err) {
          clb && clb(result);

          _this2.onError('load', err);
        });
      } else {
        clb && clb(result);
      }
    },

    /**
     * Load default storages
     * @return {this}
     * @private
     * */
    loadDefaultProviders: function loadDefaultProviders() {
      for (var id in defaultStorages) {
        this.add(id, defaultStorages[id]);
      }

      return this;
    },

    /**
     * Get current storage
     * @return {Storage}
     * */
    getCurrentStorage: function getCurrentStorage() {
      return this.get(this.getCurrent());
    },

    /**
     * On start callback
     * @private
     */
    onStart: function onStart(ctx, data) {
      if (em) {
        em.trigger(eventStart);
        ctx && em.trigger("".concat(eventStart, ":").concat(ctx), data);
      }
    },

    /**
     * On end callback
     * @private
     */
    onEnd: function onEnd(ctx, data) {
      if (em) {
        em.trigger(eventEnd);
        ctx && em.trigger("".concat(eventEnd, ":").concat(ctx), data);
      }
    },

    /**
     * On error callback
     * @private
     */
    onError: function onError(ctx, data) {
      if (em) {
        em.trigger(eventError, data);
        ctx && em.trigger("".concat(eventError, ":").concat(ctx), data);
        this.onEnd(ctx, data);
      }
    },

    /**
     * Check if autoload is possible
     * @return {Boolean}
     * @private
     * */
    canAutoload: function canAutoload() {
      var storage = this.getCurrentStorage();
      return storage && this.getConfig().autoload;
    }
  };
});

/***/ }),

/***/ "./src/storage_manager/model/LocalStorage.js":
/*!***************************************************!*\
  !*** ./src/storage_manager/model/LocalStorage.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    checkLocal: true
  },

  /**
   * @private
   */
  store: function store(data, clb) {
    this.checkStorageEnvironment();

    for (var key in data) {
      localStorage.setItem(key, data[key]);
    }

    if (typeof clb == 'function') {
      clb();
    }
  },

  /**
   * @private
   */
  load: function load(keys, clb) {
    this.checkStorageEnvironment();
    var result = {};

    for (var i = 0, len = keys.length; i < len; i++) {
      var value = localStorage.getItem(keys[i]);
      if (value) result[keys[i]] = value;
    }

    if (typeof clb == 'function') {
      clb(result);
    }

    return result;
  },

  /**
   * @private
   */
  remove: function remove(keys) {
    this.checkStorageEnvironment();

    for (var i = 0, len = keys.length; i < len; i++) {
      localStorage.removeItem(keys[i]);
    }
  },

  /**
   * Check storage environment
   * @private
   * */
  checkStorageEnvironment: function checkStorageEnvironment() {
    if (this.get('checkLocal') && !localStorage) console.warn("Your browser doesn't support localStorage");
  }
}));

/***/ }),

/***/ "./src/storage_manager/model/RemoteStorage.js":
/*!****************************************************!*\
  !*** ./src/storage_manager/model/RemoteStorage.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/fetch */ "./src/utils/fetch.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend({
  fetch: utils_fetch__WEBPACK_IMPORTED_MODULE_2__["default"],
  defaults: {
    urlStore: '',
    urlLoad: '',
    params: {},
    beforeSend: function beforeSend() {},
    onComplete: function onComplete() {},
    contentTypeJson: false,
    credentials: 'include',
    fetchOptions: ''
  },

  /**
   * Triggered before the request is started
   * @private
   */
  onStart: function onStart() {
    var em = this.get('em');
    var before = this.get('beforeSend');
    before && before();
  },

  /**
   * Triggered on request error
   * @param  {Object} err Error
   * @param  {Function} [clbErr] Error callback
   * @private
   */
  onError: function onError(err, clbErr) {
    if (clbErr) {
      clbErr(err);
    } else {
      var em = this.get('em');
      console.error(err);
      em && em.trigger('storage:error', err);
    }
  },

  /**
   * Triggered on request response
   * @param  {string} text Response text
   * @private
   */
  onResponse: function onResponse(text, clb) {
    var em = this.get('em');
    var complete = this.get('onComplete');
    var typeJson = this.get('contentTypeJson');
    var parsable = text && typeof text === 'string';
    var res = typeJson && parsable ? JSON.parse(text) : text;
    complete && complete(res);
    clb && clb(res);
    em && em.trigger('storage:response', res);
  },
  store: function store(data, clb, clbErr) {
    var body = {};

    for (var key in data) {
      body[key] = data[key];
    }

    this.request(this.get('urlStore'), {
      body: body
    }, clb, clbErr);
  },
  load: function load(keys, clb, clbErr) {
    this.request(this.get('urlLoad'), {
      method: 'get'
    }, clb, clbErr);
  },

  /**
   * Execute remote request
   * @param  {string} url Url
   * @param  {Object} [opts={}] Options
   * @param  {Function} [clb=null] Callback
   * @param  {Function} [clbErr=null] Error callback
   * @private
   */
  request: function request(url) {
    var _this = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var clb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var clbErr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var typeJson = this.get('contentTypeJson');
    var headers = this.get('headers') || {};
    var params = this.get('params');
    var reqHead = 'X-Requested-With';
    var typeHead = 'Content-Type';
    var bodyObj = opts.body || {};
    var fetchOptions;
    var body;

    for (var param in params) {
      bodyObj[param] = params[param];
    }

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(headers[reqHead])) {
      headers[reqHead] = 'XMLHttpRequest';
    } // With `fetch`, have to send FormData without any 'Content-Type'
    // https://stackoverflow.com/questions/39280438/fetch-missing-boundary-in-multipart-form-data-post


    if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(headers[typeHead]) && typeJson) {
      headers[typeHead] = 'application/json; charset=utf-8';
    }

    if (typeJson) {
      body = JSON.stringify(bodyObj);
    } else {
      body = new FormData();

      for (var bodyKey in bodyObj) {
        body.append(bodyKey, bodyObj[bodyKey]);
      }
    }

    fetchOptions = {
      method: opts.method || 'post',
      credentials: this.get('credentials'),
      headers: headers
    }; // Body should only be included on POST method

    if (fetchOptions.method === 'post') {
      fetchOptions.body = body;
    }

    var fetchOpts = this.get('fetchOptions') || {};
    var addOpts = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(fetchOpts) ? fetchOpts(fetchOptions) : fetchOptions;
    this.onStart();
    this.fetch(url, _objectSpread({}, fetchOptions, {}, addOpts || {})).then(function (res) {
      return (res.status / 200 | 0) == 1 ? res.text() : res.text().then(function (text) {
        return Promise.reject(text);
      });
    }).then(function (text) {
      return _this.onResponse(text, clb);
    }).catch(function (err) {
      return _this.onError(err, clbErr);
    });
  }
}));

/***/ }),

/***/ "./src/style_manager/config/config.js":
/*!********************************************!*\
  !*** ./src/style_manager/config/config.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'sm-',
  sectors: [],
  // Specify the element to use as a container, string (query) or HTMLElement
  // With the empty value, nothing will be rendered
  appendTo: '',
  // Text to show in case no element selected
  textNoElement: 'Select an element before using Style Manager',
  // Hide the property in case it's not stylable for the
  // selected component (each component has 'stylable' property)
  hideNotStylable: true,
  // Highlight changed properties of the selected component
  highlightChanged: true,
  // Highlight computed properties of the selected component
  highlightComputed: true,
  // Show computed properties of the selected component, if this value
  // is set to false, highlightComputed will not take effect
  showComputed: true,
  // Adds the possibility to clear property value from the target style
  clearProperties: 0,
  // Properties not to take in account for computed styles
  avoidComputed: ['width', 'height']
});

/***/ }),

/***/ "./src/style_manager/index.js":
/*!************************************!*\
  !*** ./src/style_manager/index.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/config */ "./src/style_manager/config/config.js");
/* harmony import */ var _model_Sectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/Sectors */ "./src/style_manager/model/Sectors.js");
/* harmony import */ var _model_Properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/Properties */ "./src/style_manager/model/Properties.js");
/* harmony import */ var _view_SectorsView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view/SectorsView */ "./src/style_manager/view/SectorsView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * With Style Manager you build categories (called sectors) of CSS properties which could be used to customize the style of components.
 * You can customize the initial state of the module from the editor initialization, by passing the following [Configuration Object](https://github.com/artf/grapesjs/blob/master/src/style_manager/config/config.js)
 * ```js
 * const editor = grapesjs.init({
 *  styleManager: {
 *    // options
 *  }
 * })
 * ```
 *
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const styleManager = editor.StyleManager;
 * ```
 *
 * * [getConfig](#getconfig)
 * * [addSector](#addsector)
 * * [getSector](#getsector)
 * * [removeSector](#removesector)
 * * [getSectors](#getsectors)
 * * [addProperty](#addproperty)
 * * [getProperty](#getproperty)
 * * [removeProperty](#removeproperty)
 * * [getProperties](#getproperties)
 * * [getModelToStyle](#getmodeltostyle)
 * * [addType](#addtype)
 * * [getType](#gettype)
 * * [getTypes](#gettypes)
 * * [createType](#createtype)
 *
 * @module StyleManager
 */





/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var properties;
  var sectors, SectView;
  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'StyleManager',

    /**
     * Get configuration object
     * @return {Object}
     */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     * @private
     */
    init: function init(config) {
      c = _objectSpread({}, _config_config__WEBPACK_IMPORTED_MODULE_2__["default"], {}, config);
      var ppfx = c.pStylePrefix;
      this.em = c.em;
      if (ppfx) c.stylePrefix = ppfx + c.stylePrefix;
      properties = new _model_Properties__WEBPACK_IMPORTED_MODULE_4__["default"]();
      sectors = new _model_Sectors__WEBPACK_IMPORTED_MODULE_3__["default"]([], c);
      SectView = new _view_SectorsView__WEBPACK_IMPORTED_MODULE_5__["default"]({
        collection: sectors,
        target: c.em,
        config: c
      });
      return this;
    },
    onLoad: function onLoad() {
      sectors.add(c.sectors);
    },
    postRender: function postRender() {
      var elTo = this.getConfig().appendTo;

      if (elTo) {
        var el = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isElement"])(elTo) ? elTo : document.querySelector(elTo);
        el.appendChild(this.render());
      }
    },

    /**
     * Add new sector to the collection. If the sector with the same id already exists,
     * that one will be returned
     * @param {string} id Sector id
     * @param  {Object} sector  Object representing sector
     * @param  {string} [sector.name='']  Sector's label
     * @param  {Boolean} [sector.open=true] Indicates if the sector should be opened
     * @param  {Array<Object>} [sector.properties=[]] Array of properties
     * @param  {Object} [options={}] Options
     * @return {Sector} Added Sector
     * @example
     * var sector = styleManager.addSector('mySector',{
     *   name: 'My sector',
     *   open: true,
     *   properties: [{ name: 'My property'}]
     * }, { at: 0 });
     * // With `at: 0` we place the new sector at the beginning of the collection
     * */
    addSector: function addSector(id, sector) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var result = this.getSector(id);

      if (!result) {
        sector.id = id;
        result = sectors.add(sector, opts);
      }

      return result;
    },

    /**
     * Get sector by id
     * @param {string} id  Sector id
     * @return {Sector|null}
     * @example
     * var sector = styleManager.getSector('mySector');
     * */
    getSector: function getSector(id) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var res = sectors.where({
        id: id
      })[0];
      !res && opts.warn && this._logNoSector(id);
      return res;
    },

    /**
     * Remove a sector by id
     * @param  {string} id Sector id
     * @return {Sector} Removed sector
     * @example
     * const removed = styleManager.removeSector('mySector');
     */
    removeSector: function removeSector(id) {
      return this.getSectors().remove(this.getSector(id, {
        warn: 1
      }));
    },

    /**
     * Get all sectors
     * @return {Sectors} Collection of sectors
     * */
    getSectors: function getSectors() {
      return sectors;
    },

    /**
     * Add property to the sector identified by id
     * @param {string} sectorId Sector id
     * @param {Object} property Property object
     * @param {string} [property.name=''] Name of the property
     * @param {string} [property.property=''] CSS property, eg. `min-height`
     * @param {string} [property.type=''] Type of the property: integer | radio | select | color | file | composite | stack
     * @param {Array<string>} [property.units=[]] Unit of measure available, eg. ['px','%','em']. Only for integer type
     * @param {string} [property.unit=''] Default selected unit from `units`. Only for integer type
     * @param {number} [property.min=null] Min possible value. Only for integer type
     * @param {number} [property.max=null] Max possible value. Only for integer type
     * @param {string} [property.defaults=''] Default value
     * @param {string} [property.info=''] Some description
     * @param {string} [property.icon=''] Class name. If exists no text will be displayed
     * @param {Boolean} [property.preview=false] Show layers preview. Only for stack type
     * @param {string} [property.functionName=''] Indicates if value need to be wrapped in some function, for istance `transform: rotate(90deg)`
     * @param {Array<Object>} [property.properties=[]] Nested properties for composite and stack type
     * @param {Array<Object>} [property.layers=[]] Layers for stack properties
     * @param {Array<Object>} [property.list=[]] List of possible options for radio and select types
     * @param  {Object} [options={}] Options
     * @return {Property|null} Added Property or `null` in case sector doesn't exist
     * @example
     * var property = styleManager.addProperty('mySector',{
     *   name: 'Minimum height',
     *   property: 'min-height',
     *   type: 'select',
     *   defaults: '100px',
     *   list: [{
     *     value: '100px',
     *     name: '100',
     *    },{
     *      value: '200px',
     *      name: '200',
     *    }],
     * }, { at: 0 });
     * // With `at: 0` we place the new property at the beginning of the collection
     */
    addProperty: function addProperty(sectorId, property) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var sector = this.getSector(sectorId, {
        warn: 1
      });
      var prop = null;
      if (sector) prop = sector.get('properties').add(property, opts);
      return prop;
    },

    /**
     * Get property by its CSS name and sector id
     * @param  {string} sectorId Sector id
     * @param  {string} name CSS property name, eg. 'min-height'
     * @return {Property|null}
     * @example
     * var property = styleManager.getProperty('mySector','min-height');
     */
    getProperty: function getProperty(sectorId, name) {
      var sector = this.getSector(sectorId, {
        warn: 1
      });
      var prop = null;

      if (sector) {
        prop = sector.get('properties').where({
          property: name
        });
        prop = prop.length == 1 ? prop[0] : prop;
      }

      return prop;
    },

    /**
     * Remove a property from the sector
     * @param  {string} sectorId Sector id
     * @param  {string} name CSS property name, eg. 'min-height'
     * @return {Property} Removed property
     * @example
     * const property = styleManager.removeProperty('mySector', 'min-height');
     */
    removeProperty: function removeProperty(sectorId, name) {
      var props = this.getProperties(sectorId);
      return props && props.remove(this.getProperty(sectorId, name));
    },

    /**
     * Get properties of the sector
     * @param  {string} sectorId Sector id
     * @return {Properties} Collection of properties
     * @example
     * var properties = styleManager.getProperties('mySector');
     */
    getProperties: function getProperties(sectorId) {
      var props = null;
      var sector = this.getSector(sectorId, {
        warn: 1
      });
      if (sector) props = sector.get('properties');
      return props;
    },

    /**
     * Get what to style inside Style Manager. If you select the component
     * without classes the entity is the Component itself and all changes will
     * go inside its 'style' property. Otherwise, if the selected component has
     * one or more classes, the function will return the corresponding CSS Rule
     * @param  {Model} model
     * @return {Model}
     */
    getModelToStyle: function getModelToStyle(model) {
      var em = c.em;
      var classes = model.get('classes');
      var id = model.getId();

      if (em) {
        var config = em.getConfig();
        var um = em.get('UndoManager');
        var cssC = em.get('CssComposer');
        var state = !config.devicePreviewMode ? model.get('state') : '';
        var valid = classes.getStyleable();
        var hasClasses = valid.length;
        var opts = {
          state: state
        };
        var rule; // I stop undo manager here as after adding the CSSRule (generally after
        // selecting the component) and calling undo() it will remove the rule from
        // the collection, therefore updating it in style manager will not affect it
        // #268

        um.stop();

        if (hasClasses) {
          var deviceW = em.getCurrentMedia();
          rule = cssC.get(valid, state, deviceW);

          if (!rule) {
            rule = cssC.add(valid, state, deviceW);
          }
        } else if (config.avoidInlineStyle) {
          rule = cssC.getIdRule(id, opts);
          !rule && (rule = cssC.setIdRule(id, {}, opts));
          if (model.is('wrapper')) rule.set('wrapper', 1);
        }

        rule && (model = rule);
        um.start();
      }

      return model;
    },

    /**
     * Add new property type
     * @param {string} id Type ID
     * @param {Object} definition Definition of the type. Each definition contains
     *                            `model` (business logic), `view` (presentation logic)
     *                            and `isType` function which recognize the type of the
     *                            passed entity
     *@example
     * styleManager.addType('my-type', {
     *  model: {},
     *  view: {},
     *  isType: (value) => {
     *    if (value && value.type == 'my-type') {
     *      return value;
     *    }
     *  },
     * })
     */
    addType: function addType(id, definition) {
      properties.addType(id, definition);
    },

    /**
     * Get type
     * @param {string} id Type ID
     * @return {Object} Type definition
     */
    getType: function getType(id) {
      return properties.getType(id);
    },

    /**
     * Get all types
     * @return {Array}
     */
    getTypes: function getTypes() {
      return properties.getTypes();
    },

    /**
     * Create new property from type
     * @param {string} id Type ID
     * @param  {Object} [options={}] Options
     * @param  {Object} [options.model={}] Custom model object
     * @param  {Object} [options.view={}] Custom view object
     * @return {PropertyView}
     * @example
     * const propView = styleManager.createType('integer', {
     *  model: {units: ['px', 'rem']}
     * });
     * propView.render();
     * propView.model.on('change:value', ...);
     * someContainer.appendChild(propView.el);
     */
    createType: function createType(id) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$model = _ref.model,
          model = _ref$model === void 0 ? {} : _ref$model,
          _ref$view = _ref.view,
          view = _ref$view === void 0 ? {} : _ref$view;

      var type = this.getType(id);

      if (type) {
        return new type.view(_objectSpread({
          model: new type.model(model),
          config: c
        }, view));
      }
    },

    /**
     * Select different target for the Style Manager.
     * It could be a Component, CSSRule, or a string of any CSS selector
     * @param {Component|CSSRule|String} target
     * @return {Styleable} A Component or CSSRule
     */
    setTarget: function setTarget(target, opts) {
      return SectView.setTarget(target, opts);
    },
    getEmitter: function getEmitter() {
      return SectView.propTarget;
    },

    /**
     * Render sectors and properties
     * @return  {HTMLElement}
     * @private
     * */
    render: function render() {
      return SectView.render().el;
    },
    _logNoSector: function _logNoSector(sectorId) {
      var em = this.em;
      em && em.logWarning("'".concat(sectorId, "' sector not found"));
    }
  };
});

/***/ }),

/***/ "./src/style_manager/model/Layer.js":
/*!******************************************!*\
  !*** ./src/style_manager/model/Layer.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Properties */ "./src/style_manager/model/Properties.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    index: '',
    value: '',
    values: {},
    active: false,
    preview: false,
    properties: []
  },
  initialize: function initialize() {
    var _this = this;

    var properties = this.get('properties');
    var value = this.get('value');
    this.set('properties', properties instanceof _Properties__WEBPACK_IMPORTED_MODULE_1__["default"] ? properties : new _Properties__WEBPACK_IMPORTED_MODULE_1__["default"](properties));
    this.get('properties').forEach(function (item) {
      var collection = _this.collection;
      item.parent = collection && collection.property;
    }); // If there is no value I'll try to get it from values
    // I need value setted to make preview working

    if (!value) {
      var val = '';
      var values = this.get('values');

      for (var prop in values) {
        val += ' ' + values[prop];
      }

      this.set('value', val.trim());
    }
  },

  /**
   * Get property at some index
   * @param  {Number} index
   * @return {Object}
   */
  getPropertyAt: function getPropertyAt(index) {
    return this.get('properties').at(index);
  },
  getPropertyValue: function getPropertyValue(property) {
    var result = '';
    this.get('properties').each(function (prop) {
      if (prop.get('property') == property) {
        result = prop.getFullValue();
      }
    });
    return result;
  },
  getFullValue: function getFullValue() {
    var result = [];
    this.get('properties').each(function (prop) {
      return result.push(prop.getFullValue());
    });
    return result.join(' ');
  }
}));

/***/ }),

/***/ "./src/style_manager/model/Layers.js":
/*!*******************************************!*\
  !*** ./src/style_manager/model/Layers.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Layer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Layer */ "./src/style_manager/model/Layer.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection.extend({
  model: _Layer__WEBPACK_IMPORTED_MODULE_2__["default"],
  initialize: function initialize() {
    this.idx = 1;
    this.on('add', this.onAdd);
    this.on('reset', this.onReset);
  },
  onAdd: function onAdd(model, c, opts) {
    if (!opts.noIncrement) model.set('index', this.idx++);
  },
  onReset: function onReset() {
    this.idx = 1;
  },
  getSeparator: function getSeparator() {
    var property = this.property;
    return property ? property.get('layerSeparator') : ', ';
  },

  /**
   * Get layers from a value string (for not detached properties),
   * example of input:
   * `layer1Value, layer2Value, layer3Value, ...`
   * @param  {string} value
   * @return {Array}
   * @private
   */
  getLayersFromValue: function getLayersFromValue(value) {
    var _this = this;

    var layers = []; // Remove spaces inside functions, eg:
    // From: 1px 1px rgba(2px, 2px, 2px), 2px 2px rgba(3px, 3px, 3px)
    // To: 1px 1px rgba(2px,2px,2px), 2px 2px rgba(3px,3px,3px)

    value.replace(/\(([\w\s,.]*)\)/g, function (match) {
      var cleaned = match.replace(/,\s*/g, ',');
      value = value.replace(match, cleaned);
    });
    var layerValues = value ? value.split(this.getSeparator()) : [];
    layerValues.forEach(function (layerValue) {
      layers.push({
        properties: _this.properties.parseValue(layerValue)
      });
    });
    return layers;
  },

  /**
   * Get layers from a style object (for detached properties),
   * example of input:
   * {
   *  subPropname1: sub-propvalue11, sub-propvalue12, sub-propvalue13, ...
   *  subPropname2: sub-propvalue21, sub-propvalue22, sub-propvalue23, ...
   *  subPropname3: sub-propvalue31, sub-propvalue32, sub-propvalue33, ...
   * }
   * @param  {Object} styleObj
   * @return {Array}
   * @private
   */
  getLayersFromStyle: function getLayersFromStyle(styleObj) {
    var layers = [];
    var properties = this.properties;
    var propNames = properties.pluck('property');
    properties.each(function (propModel) {
      var style = styleObj[propModel.get('property')];
      var values = style ? style.split(', ') : [];
      values.forEach(function (value, i) {
        value = propModel.parseValue(value.trim()).value;
        var layer = layers[i];

        var propertyObj = _objectSpread({}, propModel.attributes, {}, {
          value: value
        });

        if (layer) {
          layer.properties.push(propertyObj);
        } else {
          layers[i] = {
            properties: [propertyObj]
          };
        }
      });
    }); // Now whit all layers in, will check missing properties

    layers.forEach(function (layer) {
      var layerProprs = layer.properties.map(function (prop) {
        return prop.property;
      });
      properties.each(function (propModel) {
        var propertyName = propModel.get('property');

        if (layerProprs.indexOf(propertyName) < 0) {
          layer.properties.push(_objectSpread({}, propModel.attributes));
        }
      });
    });
    return layers;
  },
  active: function active(index) {
    this.each(function (layer) {
      return layer.set('active', 0);
    });
    var layer = this.at(index);
    layer && layer.set('active', 1);
  },
  getFullValue: function getFullValue() {
    var result = [];
    this.each(function (layer) {
      return result.push(layer.getFullValue());
    });
    return result.join(this.getSeparator());
  },
  getPropertyValues: function getPropertyValues(property) {
    var result = [];
    this.each(function (layer) {
      var value = layer.getPropertyValue(property);
      value && result.push(value);
    });
    return result.join(', ');
  }
}));

/***/ }),

/***/ "./src/style_manager/model/Properties.js":
/*!***********************************************!*\
  !*** ./src/style_manager/model/Properties.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var domain_abstract_model_TypeableCollection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! domain_abstract/model/TypeableCollection */ "./src/domain_abstract/model/TypeableCollection.js");
/* harmony import */ var _Property__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Property */ "./src/style_manager/model/Property.js");
/* harmony import */ var _PropertyStack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PropertyStack */ "./src/style_manager/model/PropertyStack.js");
/* harmony import */ var _view_PropertyStackView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../view/PropertyStackView */ "./src/style_manager/view/PropertyStackView.js");
/* harmony import */ var _PropertyComposite__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PropertyComposite */ "./src/style_manager/model/PropertyComposite.js");
/* harmony import */ var _view_PropertyCompositeView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../view/PropertyCompositeView */ "./src/style_manager/view/PropertyCompositeView.js");
/* harmony import */ var _view_PropertyFileView__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../view/PropertyFileView */ "./src/style_manager/view/PropertyFileView.js");
/* harmony import */ var _view_PropertyColorView__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../view/PropertyColorView */ "./src/style_manager/view/PropertyColorView.js");
/* harmony import */ var _PropertySelect__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PropertySelect */ "./src/style_manager/model/PropertySelect.js");
/* harmony import */ var _view_PropertySelectView__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../view/PropertySelectView */ "./src/style_manager/view/PropertySelectView.js");
/* harmony import */ var _PropertyRadio__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./PropertyRadio */ "./src/style_manager/model/PropertyRadio.js");
/* harmony import */ var _view_PropertyRadioView__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../view/PropertyRadioView */ "./src/style_manager/view/PropertyRadioView.js");
/* harmony import */ var _PropertySlider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./PropertySlider */ "./src/style_manager/model/PropertySlider.js");
/* harmony import */ var _view_PropertySliderView__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../view/PropertySliderView */ "./src/style_manager/view/PropertySliderView.js");
/* harmony import */ var _PropertyInteger__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./PropertyInteger */ "./src/style_manager/model/PropertyInteger.js");
/* harmony import */ var _view_PropertyIntegerView__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./../view/PropertyIntegerView */ "./src/style_manager/view/PropertyIntegerView.js");
/* harmony import */ var _view_PropertyView__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./../view/PropertyView */ "./src/style_manager/view/PropertyView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



















/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection.extend(domain_abstract_model_TypeableCollection__WEBPACK_IMPORTED_MODULE_2__["default"]).extend({
  types: [{
    id: 'stack',
    model: _PropertyStack__WEBPACK_IMPORTED_MODULE_4__["default"],
    view: _view_PropertyStackView__WEBPACK_IMPORTED_MODULE_5__["default"],
    isType: function isType(value) {
      if (value && value.type == 'stack') {
        return value;
      }
    }
  }, {
    id: 'composite',
    model: _PropertyComposite__WEBPACK_IMPORTED_MODULE_6__["default"],
    view: _view_PropertyCompositeView__WEBPACK_IMPORTED_MODULE_7__["default"],
    isType: function isType(value) {
      if (value && value.type == 'composite') {
        return value;
      }
    }
  }, {
    id: 'file',
    model: _Property__WEBPACK_IMPORTED_MODULE_3__["default"],
    view: _view_PropertyFileView__WEBPACK_IMPORTED_MODULE_8__["default"],
    isType: function isType(value) {
      if (value && value.type == 'file') {
        return value;
      }
    }
  }, {
    id: 'color',
    model: _Property__WEBPACK_IMPORTED_MODULE_3__["default"],
    view: _view_PropertyColorView__WEBPACK_IMPORTED_MODULE_9__["default"],
    isType: function isType(value) {
      if (value && value.type == 'color') {
        return value;
      }
    }
  }, {
    id: 'select',
    model: _PropertySelect__WEBPACK_IMPORTED_MODULE_10__["default"],
    view: _view_PropertySelectView__WEBPACK_IMPORTED_MODULE_11__["default"],
    isType: function isType(value) {
      if (value && value.type == 'select') {
        return value;
      }
    }
  }, {
    id: 'radio',
    model: _PropertyRadio__WEBPACK_IMPORTED_MODULE_12__["default"],
    view: _view_PropertyRadioView__WEBPACK_IMPORTED_MODULE_13__["default"],
    isType: function isType(value) {
      if (value && value.type == 'radio') {
        return value;
      }
    }
  }, {
    id: 'slider',
    model: _PropertySlider__WEBPACK_IMPORTED_MODULE_14__["default"],
    view: _view_PropertySliderView__WEBPACK_IMPORTED_MODULE_15__["default"],
    isType: function isType(value) {
      if (value && value.type == 'slider') {
        return value;
      }
    }
  }, {
    id: 'integer',
    model: _PropertyInteger__WEBPACK_IMPORTED_MODULE_16__["default"],
    view: _view_PropertyIntegerView__WEBPACK_IMPORTED_MODULE_17__["default"],
    isType: function isType(value) {
      if (value && value.type == 'integer') {
        return value;
      }
    }
  }, {
    id: 'base',
    model: _Property__WEBPACK_IMPORTED_MODULE_3__["default"],
    view: _view_PropertyView__WEBPACK_IMPORTED_MODULE_18__["default"],
    isType: function isType(value) {
      value.type = 'base';
      return value;
    }
  }],
  deepClone: function deepClone() {
    var collection = this.clone();
    collection.reset(collection.map(function (model) {
      var cloned = model.clone();
      cloned.typeView = model.typeView;
      return cloned;
    }));
    return collection;
  },

  /**
   * Parse a value and return an array splitted by properties
   * @param  {string} value
   * @return {Array}
   * @return
   */
  parseValue: function parseValue(value) {
    var _this = this;

    var properties = [];
    var values = value.split(' ');
    values.forEach(function (value, i) {
      var property = _this.at(i);

      if (!property) return;
      properties.push(_objectSpread({}, property.attributes, {}, {
        value: value
      }));
    });
    return properties;
  },
  getFullValue: function getFullValue() {
    var result = '';
    this.each(function (model) {
      return result += "".concat(model.getFullValue(), " ");
    });
    return result.trim();
  }
}));

/***/ }),

/***/ "./src/style_manager/model/Property.js":
/*!*********************************************!*\
  !*** ./src/style_manager/model/Property.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var Property = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend({
  defaults: {
    name: '',
    property: '',
    type: '',
    defaults: '',
    info: '',
    value: '',
    icon: '',
    functionName: '',
    status: '',
    visible: true,
    fixedValues: ['initial', 'inherit'],
    // If true, the property will be forced to be full width
    full: 0,
    // If true to the value will be added '!important'
    important: 0,
    // If true, will be hidden by default and will show up only for targets
    // which require this property (via `stylable-require`)
    // Use case:
    // you can add all SVG CSS properties with toRequire as true
    // and then require them on SVG Components
    toRequire: 0,
    // Specifies dependency on other properties of the selected object.
    // Property is shown only when all conditions are matched.
    //
    // example: { display: ['flex', 'block'], position: ['absolute'] };
    //          in this case the property is only shown when display is
    //          of value 'flex' or 'block' AND position is 'absolute'
    requires: null,
    // Specifies dependency on properties of the parent of the selected object.
    // Property is shown only when all conditions are matched.
    requiresParent: null
  },
  initialize: function initialize() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var id = this.get('id') || '';
    var name = this.get('name') || '';
    !this.get('property') && this.set('property', (name || id).replace(/ /g, '-'));
    var prop = this.get('property');
    !this.get('id') && this.set('id', prop);
    !name && this.set('name', Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["capitalize"])(prop).replace(/-/g, ' '));
    Property.callInit(this, props, opts);
  },
  init: function init() {},

  /**
   * Clear the value
   * @return {this}
   */
  clearValue: function clearValue() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.set({
      value: undefined
    }, opts);
    return this;
  },

  /**
   * Update value
   * @param {any} value
   * @param {Boolen} [complete=true] Indicates if it's a final state
   * @param {Object} [opts={}] Options
   */
  setValue: function setValue(value) {
    var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var parsed = this.parseValue(value);
    this.set(parsed, _objectSpread({}, opts, {
      avoidStore: 1
    })); // It's important to set an empty value, otherwise the
    // UndoManager won't see the change

    if (complete) {
      this.set('value', '', opts);
      this.set(parsed, opts);
    }
  },

  /**
   * Like `setValue` but, in addition, prevents the update of the input element
   * as the changes should come from the input itself.
   * This method is useful with the definition of custom properties
   * @param {any} value
   * @param {Boolen} [complete=true] Indicates if it's a final state
   * @param {Object} [opts={}] Options
   */
  setValueFromInput: function setValueFromInput(value, complete) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.setValue(value, complete, _objectSpread({}, opts, {
      fromInput: 1
    }));
  },

  /**
   * Parse a raw value, generally fetched from the target, for this property
   * @param  {string} value Raw value string
   * @return {Object}
   * @example
   * // example with an Input type
   * prop.parseValue('translateX(10deg)');
   * // -> { value: 10, unit: 'deg', functionName: 'translateX' }
   *
   */
  parseValue: function parseValue(value) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var result = {
      value: value
    };
    var imp = '!important';

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(value) && value.indexOf(imp) !== -1) {
      result.value = value.replace(imp, '').trim();
      result.important = 1;
    }

    if (!this.get('functionName') && !opts.complete) {
      return result;
    }

    var args = [];
    var valueStr = "".concat(result.value);
    var start = valueStr.indexOf('(') + 1;
    var end = valueStr.lastIndexOf(')');
    var functionName = valueStr.substring(0, start - 1);
    if (functionName) result.functionName = functionName;
    args.push(start); // Will try even if the last closing parentheses is not found

    if (end >= 0) {
      args.push(end);
    }

    result.value = String.prototype.substring.apply(valueStr, args);

    if (opts.numeric) {
      var num = parseFloat(result.value);
      result.unit = result.value.replace(num, '');
      result.value = num;
    }

    return result;
  },

  /**
   * Get the default value
   * @return {string}
   * @private
   */
  getDefaultValue: function getDefaultValue() {
    return this.get('defaults');
  },

  /**
   * Get a complete value of the property.
   * This probably will replace the getValue when all
   * properties models will be splitted
   * @param {string} val Custom value to replace the one on the model
   * @return {string}
   * @private
   */
  getFullValue: function getFullValue(val) {
    var fn = this.get('functionName');
    var value = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(val) ? this.get('value') : val;
    var hasValue = !Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value);

    if (fn && hasValue) {
      value = "".concat(fn, "(").concat(value, ")");
    }

    if (hasValue && this.get('important')) {
      value = "".concat(value, " !important");
    }

    return value || '';
  }
}, {
  callParentInit: function callParentInit(property, ctx, props) {
    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    property.prototype.initialize.apply(ctx, [props, _objectSpread({}, opts, {
      skipInit: 1
    })]);
  },
  callInit: function callInit(context, props) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    !opts.skipInit && context.init(props, opts);
  }
});
/* harmony default export */ __webpack_exports__["default"] = (Property);

/***/ }),

/***/ "./src/style_manager/model/PropertyComposite.js":
/*!******************************************************!*\
  !*** ./src/style_manager/model/PropertyComposite.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Property__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Property */ "./src/style_manager/model/Property.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_Property__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: _objectSpread({}, _Property__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
    // 'background' is a good example where to make a difference
    // between detached and not
    //
    // - NOT detached (default)
    // background: url(..) no-repeat center ...;
    // - Detached
    // background-image: url();
    // background-repeat: repeat;
    // ...
    detached: 0,
    // Array of sub properties
    properties: [],
    // Separator between properties
    separator: ' '
  }),
  initialize: function initialize() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _Property__WEBPACK_IMPORTED_MODULE_1__["default"].callParentInit(_Property__WEBPACK_IMPORTED_MODULE_1__["default"], this, props, opts);
    var properties = this.get('properties') || [];

    var Properties = __webpack_require__(/*! ./Properties */ "./src/style_manager/model/Properties.js").default;

    this.set('properties', new Properties(properties));
    this.listenTo(this, 'change:value', this.updateValues);
    _Property__WEBPACK_IMPORTED_MODULE_1__["default"].callInit(this, props, opts);
  },

  /**
   * Clear the value
   * @return {this}
   */
  clearValue: function clearValue() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.get('properties').each(function (property) {
      return property.clearValue();
    });
    return _Property__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.clearValue.apply(this, arguments);
  },

  /**
   * Update property values
   */
  updateValues: function updateValues() {
    var values = this.getFullValue().split(this.getSplitSeparator());
    this.get('properties').each(function (property, i) {
      var len = values.length; // Try to get value from a shorthand:
      // 11px -> 11px 11px 11px 11xp
      // 11px 22px -> 11px 22px 11px 22xp

      var value = values[i] || values[i % len + (len != 1 && len % 2 ? 1 : 0)]; // There some issue with UndoManager
      //property.setValue(value, 0, {fromParent: 1});
    });
  },

  /**
   * Split by sperator but avoid it inside parenthesis
   * @return {RegExp}
   */
  getSplitSeparator: function getSplitSeparator() {
    return new RegExp("".concat(this.get('separator'), "(?![^\\(]*\\))"));
  },

  /**
   * Returns default value
   * @param  {Boolean} defaultProps Force to get defaults from properties
   * @return {string}
   */
  getDefaultValue: function getDefaultValue(defaultProps) {
    var value = this.get('defaults');

    if (value && !defaultProps) {
      return value;
    }

    value = '';
    var properties = this.get('properties');
    properties.each(function (prop, index) {
      return value += "".concat(prop.getDefaultValue(), " ");
    });
    return value.trim();
  },
  getFullValue: function getFullValue() {
    if (this.get('detached')) {
      return '';
    }

    return this.get('properties').getFullValue();
  },

  /**
   * Get property at some index
   * @param  {Number} index
   * @return {Object}
   */
  getPropertyAt: function getPropertyAt(index) {
    return this.get('properties').at(index);
  }
}));

/***/ }),

/***/ "./src/style_manager/model/PropertyFactory.js":
/*!****************************************************!*\
  !*** ./src/style_manager/model/PropertyFactory.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (function () {
  return {
    /**
     * Build props object by their name
     * @param  {Array<string>|string} props Array of properties name
     * @return {Array<Object>}
     */
    build: function build(props) {
      var objs = [];
      var dftFixedValues = ['initial', 'inherit'];
      if (typeof props === 'string') props = [props];

      for (var i = 0, len = props.length; i < len; i++) {
        var obj = {};
        var prop = props[i];
        obj.property = prop; // Property

        switch (prop) {
          case 'border-radius-c':
            obj.property = 'border-radius';
            break;
        } // Fixed values


        switch (prop) {
          case 'top':
          case 'right':
          case 'bottom':
          case 'left':
          case 'margin-top':
          case 'margin-right':
          case 'margin-bottom':
          case 'margin-left':
          case 'padding-top':
          case 'padding-right':
          case 'padding-bottom':
          case 'padding-left':
          case 'width':
          case 'max-width':
          case 'min-width':
          case 'height':
          case 'max-height':
          case 'min-height':
          case 'flex-basis':
            obj.fixedValues = ['initial', 'inherit', 'auto'];
            break;

          case 'font-size':
            obj.fixedValues = ['medium', 'xx-small', 'x-small', 'small', 'large', 'x-large', 'xx-large', 'smaller', 'larger', 'length', 'initial', 'inherit'];
            break;

          case 'letter-spacing':
          case 'line-height':
            obj.fixedValues = ['normal', 'initial', 'inherit'];
            break;
        } // Type


        switch (prop) {
          case 'float':
          case 'position':
          case 'text-align':
            obj.type = 'radio';
            break;

          case 'display':
          case 'flex-direction':
          case 'flex-wrap':
          case 'justify-content':
          case 'align-items':
          case 'align-content':
          case 'align-self':
          case 'font-family':
          case 'font-weight':
          case 'border-style':
          case 'box-shadow-type':
          case 'background-repeat':
          case 'background-position':
          case 'background-attachment':
          case 'background-size':
          case 'transition-property':
          case 'transition-timing-function':
          case 'cursor':
          case 'overflow':
          case 'overflow-x':
          case 'overflow-y':
            obj.type = 'select';
            break;

          case 'top':
          case 'right':
          case 'bottom':
          case 'left':
          case 'margin-top':
          case 'margin-right':
          case 'margin-bottom':
          case 'margin-left':
          case 'padding-top':
          case 'padding-right':
          case 'padding-bottom':
          case 'padding-left':
          case 'min-height':
          case 'min-width':
          case 'max-height':
          case 'max-width':
          case 'width':
          case 'height':
          case 'font-size':
          case 'letter-spacing':
          case 'line-height':
          case 'text-shadow-h':
          case 'text-shadow-v':
          case 'text-shadow-blur':
          case 'border-radius-c':
          case 'border-top-left-radius':
          case 'border-top-right-radius':
          case 'border-bottom-left-radius':
          case 'border-bottom-right-radius':
          case 'border-width':
          case 'box-shadow-h':
          case 'box-shadow-v':
          case 'box-shadow-blur':
          case 'box-shadow-spread':
          case 'transition-duration':
          case 'perspective':
          case 'transform-rotate-x':
          case 'transform-rotate-y':
          case 'transform-rotate-z':
          case 'transform-scale-x':
          case 'transform-scale-y':
          case 'transform-scale-z':
          case 'order':
          case 'flex-grow':
          case 'flex-shrink':
          case 'flex-basis':
            obj.type = 'integer';
            break;

          case 'margin':
          case 'padding':
          case 'border-radius':
          case 'border':
          case 'transform':
            obj.type = 'composite';
            break;

          case 'color':
          case 'text-shadow-color':
          case 'background-color':
          case 'border-color':
          case 'box-shadow-color':
            obj.type = 'color';
            break;

          case 'text-shadow':
          case 'box-shadow':
          case 'background':
          case 'transition':
            obj.type = 'stack';
            break;

          case 'background-image':
            obj.type = 'file';
            break;
        } // Defaults


        switch (prop) {
          case 'float':
          case 'background-color':
          case 'background-image':
          case 'text-shadow':
            obj.defaults = 'none';
            break;

          case 'display':
            obj.defaults = 'block';
            break;

          case 'flex-direction':
            obj.defaults = 'row';
            break;

          case 'flex-wrap':
            obj.defaults = 'nowrap';
            break;

          case 'justify-content':
            obj.defaults = 'flex-start';
            break;

          case 'align-items':
            obj.defaults = 'stretch';
            break;

          case 'align-content':
            obj.defaults = 'stretch';
            break;

          case 'align-self':
            obj.defaults = 'auto';
            break;

          case 'position':
            obj.defaults = 'static';
            break;

          case 'margin-top':
          case 'margin-right':
          case 'margin-bottom':
          case 'margin-left':
          case 'padding-top':
          case 'padding-right':
          case 'padding-bottom':
          case 'padding-left':
          case 'text-shadow-h':
          case 'text-shadow-v':
          case 'text-shadow-blur':
          case 'border-radius-c':
          case 'box-shadow-h':
          case 'box-shadow-v':
          case 'box-shadow-spread':
          case 'perspective':
          case 'transform-rotate-x':
          case 'transform-rotate-y':
          case 'transform-rotate-z':
          case 'order':
          case 'flex-grow':
            obj.defaults = 0;
            break;

          case 'border-top-left-radius':
          case 'border-top-right-radius':
          case 'border-bottom-left-radius':
          case 'border-bottom-right-radius':
            obj.defaults = '0px';
            break;

          case 'transform-scale-x':
          case 'transform-scale-y':
          case 'transform-scale-z':
          case 'flex-shrink':
            obj.defaults = 1;
            break;

          case 'box-shadow-blur':
            obj.defaults = '5px';
            break;

          case 'top':
          case 'right':
          case 'bottom':
          case 'left':
          case 'min-height':
          case 'min-width':
          case 'max-height':
          case 'max-width':
          case 'width':
          case 'height':
          case 'background-size':
          case 'cursor':
          case 'flex-basis':
            obj.defaults = 'auto';
            break;

          case 'font-family':
            obj.defaults = 'Arial, Helvetica, sans-serif';
            break;

          case 'font-size':
          case 'border-width':
            obj.defaults = 'medium';
            break;

          case 'font-weight':
            obj.defaults = '400';
            break;

          case 'letter-spacing':
          case 'line-height':
            obj.defaults = 'normal';
            break;

          case 'color':
          case 'text-shadow-color':
          case 'border-color':
          case 'box-shadow-color':
            obj.defaults = 'black';
            break;

          case 'text-align':
            obj.defaults = 'left';
            break;

          case 'border-style':
            obj.defaults = 'solid';
            break;

          case 'box-shadow-type':
            obj.defaults = '';
            break;

          case 'background-repeat':
            obj.defaults = 'repeat';
            break;

          case 'background-position':
            obj.defaults = 'left top';
            break;

          case 'background-attachment':
            obj.defaults = 'scroll';
            break;

          case 'transition-property':
            obj.defaults = 'width';
            break;

          case 'transition-duration':
            obj.defaults = '2';
            break;

          case 'transition-timing-function':
            obj.defaults = 'ease';
            break;

          case 'overflow':
          case 'overflow-x':
          case 'overflow-y':
            obj.defaults = 'visible';
            break;
        }
        /*
         * Add styleable dependency on other properties. Allows properties to be
         * dynamically hidden or shown based on values of other properties.
         *
         * Property will be styleable if all of the properties (keys) in the
         * requires object have any of the values specified in the array.
         */


        switch (prop) {
          case 'flex-direction':
          case 'flex-wrap':
          case 'justify-content':
          case 'align-items':
          case 'align-content':
            obj.requires = {
              display: ['flex']
            };
            break;

          case 'order':
          case 'flex-basis':
          case 'flex-grow':
          case 'flex-shrink':
          case 'align-self':
            obj.requiresParent = {
              display: ['flex']
            };
            break;
        } // Units


        switch (prop) {
          case 'top':
          case 'bottom':
          case 'margin-top':
          case 'margin-bottom':
          case 'padding-top':
          case 'padding-bottom':
          case 'min-height':
          case 'max-height':
          case 'height':
            obj.units = ['px', '%', 'vh'];
            break;

          case 'right':
          case 'left':
          case 'margin-right':
          case 'margin-left':
          case 'padding-right':
          case 'padding-left':
          case 'min-width':
          case 'max-width':
          case 'width':
            obj.units = ['px', '%', 'vw'];
            break;

          case 'flex-basis':
            obj.units = ['px', '%', 'vw', 'vh'];
            break;

          case 'text-shadow-v':
          case 'text-shadow-h':
          case 'text-shadow-blur':
          case 'border-radius-c':
          case 'border-top-left-radius':
          case 'border-top-right-radius':
          case 'border-bottom-left-radius':
          case 'border-bottom-right-radius':
          case 'box-shadow-h':
          case 'box-shadow-v':
            obj.units = ['px', '%'];
            break;

          case 'font-size':
          case 'letter-spacing':
          case 'line-height':
            obj.units = ['px', 'em', 'rem', '%'];
            break;

          case 'border-width':
            obj.units = ['px', 'em'];
            break;

          case 'box-shadow-blur':
          case 'box-shadow-spread':
          case 'perspective':
            obj.units = ['px'];
            break;

          case 'transition-duration':
            obj.units = ['s'];
            break;

          case 'transform-rotate-x':
          case 'transform-rotate-y':
          case 'transform-rotate-z':
            obj.units = ['deg'];
            break;
        } // Min/Max


        switch (prop) {
          case 'padding-top':
          case 'padding-right':
          case 'padding-bottom':
          case 'padding-left':
          case 'min-height':
          case 'min-width':
          case 'max-height':
          case 'max-width':
          case 'width':
          case 'height':
          case 'font-size':
          case 'text-shadow-blur':
          case 'border-radius-c':
          case 'border-top-left-radius':
          case 'border-top-right-radius':
          case 'border-bottom-left-radius':
          case 'border-bottom-right-radius':
          case 'border-width':
          case 'box-shadow-blur':
          case 'transition-duration':
          case 'perspective':
          case 'flex-basis':
            obj.min = 0;
            break;
        } // Preview


        switch (prop) {
          case 'text-shadow':
          case 'box-shadow':
          case 'background':
            obj.preview = true;
            break;
        } // Detached


        switch (prop) {
          case 'background':
            obj.detached = true;
            break;
        } // Functions


        switch (prop) {
          case 'transform-rotate-x':
            obj.functionName = 'rotateX';
            break;

          case 'transform-rotate-y':
            obj.functionName = 'rotateY';
            break;

          case 'transform-rotate-z':
            obj.functionName = 'rotateZ';
            break;

          case 'transform-scale-x':
            obj.functionName = 'scaleX';
            break;

          case 'transform-scale-y':
            obj.functionName = 'scaleY';
            break;

          case 'transform-scale-z':
            obj.functionName = 'scaleZ';
            break;

          case 'background-image':
            obj.functionName = 'url';
            break;
        } // Options


        switch (prop) {
          case 'float':
            obj.list = [{
              value: 'none'
            }, {
              value: 'left'
            }, {
              value: 'right'
            }];
            break;

          case 'display':
            obj.list = [{
              value: 'block'
            }, {
              value: 'inline'
            }, {
              value: 'inline-block'
            }, {
              value: 'flex'
            }, {
              value: 'none'
            }];
            break;

          case 'flex-direction':
            obj.list = [{
              value: 'row'
            }, {
              value: 'row-reverse'
            }, {
              value: 'column'
            }, {
              value: 'column-reverse'
            }];
            break;

          case 'flex-wrap':
            obj.list = [{
              value: 'nowrap'
            }, {
              value: 'wrap'
            }, {
              value: 'wrap-reverse'
            }];
            break;

          case 'justify-content':
            obj.list = [{
              value: 'flex-start'
            }, {
              value: 'flex-end'
            }, {
              value: 'center'
            }, {
              value: 'space-between'
            }, {
              value: 'space-around'
            }, {
              value: 'space-evenly'
            }];
            break;

          case 'align-items':
            obj.list = [{
              value: 'flex-start'
            }, {
              value: 'flex-end'
            }, {
              value: 'center'
            }, {
              value: 'baseline'
            }, {
              value: 'stretch'
            }];
            break;

          case 'align-content':
            obj.list = [{
              value: 'flex-start'
            }, {
              value: 'flex-end'
            }, {
              value: 'center'
            }, {
              value: 'space-between'
            }, {
              value: 'space-around'
            }, {
              value: 'stretch'
            }];
            break;

          case 'align-self':
            obj.list = [{
              value: 'auto'
            }, {
              value: 'flex-start'
            }, {
              value: 'flex-end'
            }, {
              value: 'center'
            }, {
              value: 'baseline'
            }, {
              value: 'stretch'
            }];
            break;

          case 'position':
            obj.list = [{
              value: 'static'
            }, {
              value: 'relative'
            }, {
              value: 'absolute'
            }, {
              value: 'fixed'
            }];
            break;

          case 'font-family':
            var ss = ', sans-serif';
            var fonts = ['Arial, Helvetica' + ss, 'Arial Black, Gadget' + ss, 'Brush Script MT' + ss, 'Comic Sans MS, cursive' + ss, 'Courier New, Courier, monospace', 'Georgia, serif', 'Helvetica, serif', 'Impact, Charcoal' + ss, 'Lucida Sans Unicode, Lucida Grande' + ss, 'Tahoma, Geneva' + ss, 'Times New Roman, Times, serif', 'Trebuchet MS, Helvetica' + ss, 'Verdana, Geneva' + ss];
            obj.list = [];

            for (var j = 0, l = fonts.length; j < l; j++) {
              var font = {};
              font.value = fonts[j];
              font.name = fonts[j].split(',')[0];
              obj.list.push(font);
            }

            break;

          case 'font-weight':
            obj.list = [{
              value: '100',
              name: 'Thin'
            }, {
              value: '200',
              name: 'Extra-Light'
            }, {
              value: '300',
              name: 'Light'
            }, {
              value: '400',
              name: 'Normal'
            }, {
              value: '500',
              name: 'Medium'
            }, {
              value: '600',
              name: 'Semi-Bold'
            }, {
              value: '700',
              name: 'Bold'
            }, {
              value: '800',
              name: 'Extra-Bold'
            }, {
              value: '900',
              name: 'Ultra-Bold'
            }];
            break;

          case 'text-align':
            obj.list = [{
              value: 'left'
            }, {
              value: 'center'
            }, {
              value: 'right'
            }, {
              value: 'justify'
            }];
            break;

          case 'border-style':
            obj.list = [{
              value: 'none'
            }, {
              value: 'solid'
            }, {
              value: 'dotted'
            }, {
              value: 'dashed'
            }, {
              value: 'double'
            }, {
              value: 'groove'
            }, {
              value: 'ridge'
            }, {
              value: 'inset'
            }, {
              value: 'outset'
            }];
            break;

          case 'box-shadow-type':
            obj.list = [{
              value: '',
              name: 'Outside'
            }, {
              value: 'inset',
              name: 'Inside'
            }];
            break;

          case 'background-repeat':
            obj.list = [{
              value: 'repeat'
            }, {
              value: 'repeat-x'
            }, {
              value: 'repeat-y'
            }, {
              value: 'no-repeat'
            }];
            break;

          case 'background-position':
            obj.list = [{
              value: 'left top'
            }, {
              value: 'left center'
            }, {
              value: 'left bottom'
            }, {
              value: 'right top'
            }, {
              value: 'right center'
            }, {
              value: 'right bottom'
            }, {
              value: 'center top'
            }, {
              value: 'center center'
            }, {
              value: 'center bottom'
            }];
            break;

          case 'background-attachment':
            obj.list = [{
              value: 'scroll'
            }, {
              value: 'fixed'
            }, {
              value: 'local'
            }];
            break;

          case 'background-size':
            obj.list = [{
              value: 'auto'
            }, {
              value: 'cover'
            }, {
              value: 'contain'
            }];
            break;

          case 'transition-property':
            obj.list = [{
              value: 'all'
            }, {
              value: 'width'
            }, {
              value: 'height'
            }, {
              value: 'background-color'
            }, {
              value: 'transform'
            }, {
              value: 'box-shadow'
            }, {
              value: 'opacity'
            }];
            break;

          case 'transition-timing-function':
            obj.list = [{
              value: 'linear'
            }, {
              value: 'ease'
            }, {
              value: 'ease-in'
            }, {
              value: 'ease-out'
            }, {
              value: 'ease-in-out'
            }];
            break;

          case 'cursor':
            obj.list = [{
              value: 'auto'
            }, {
              value: 'pointer'
            }, {
              value: 'copy'
            }, {
              value: 'crosshair'
            }, {
              value: 'grab'
            }, {
              value: 'grabbing'
            }, {
              value: 'help'
            }, {
              value: 'move'
            }, {
              value: 'text'
            }];
            break;

          case 'overflow':
          case 'overflow-x':
          case 'overflow-y':
            obj.list = [{
              value: 'visible'
            }, {
              value: 'hidden'
            }, {
              value: 'scroll'
            }, {
              value: 'auto'
            }];
            break;
        } // Properties


        switch (prop) {
          case 'margin':
            obj.properties = this.build(['margin-top', 'margin-right', 'margin-bottom', 'margin-left']);
            break;

          case 'padding':
            obj.properties = this.build(['padding-top', 'padding-right', 'padding-bottom', 'padding-left']);
            break;

          case 'text-shadow':
            obj.properties = this.build(['text-shadow-h', 'text-shadow-v', 'text-shadow-blur', 'text-shadow-color']);
            break;

          case 'border':
            obj.properties = this.build(['border-width', 'border-style', 'border-color']);
            break;

          case 'border-radius':
            obj.properties = this.build(['border-top-left-radius', 'border-top-right-radius', 'border-bottom-right-radius', 'border-bottom-left-radius']);
            break;

          case 'box-shadow':
            obj.properties = this.build(['box-shadow-h', 'box-shadow-v', 'box-shadow-blur', 'box-shadow-spread', 'box-shadow-color', 'box-shadow-type']);
            break;

          case 'background':
            obj.properties = this.build(['background-image', 'background-repeat', 'background-position', 'background-attachment', 'background-size']);
            break;

          case 'transition':
            obj.properties = this.build(['transition-property', 'transition-duration', 'transition-timing-function']);
            break;

          case 'transform':
            obj.properties = this.build(['transform-rotate-x', 'transform-rotate-y', 'transform-rotate-z', 'transform-scale-x', 'transform-scale-y', 'transform-scale-z']);
            break;
        }

        objs.push(obj);
      }

      return objs;
    }
  };
});

/***/ }),

/***/ "./src/style_manager/model/PropertyInteger.js":
/*!****************************************************!*\
  !*** ./src/style_manager/model/PropertyInteger.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Property__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Property */ "./src/style_manager/model/Property.js");
/* harmony import */ var domain_abstract_ui_InputNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! domain_abstract/ui/InputNumber */ "./src/domain_abstract/ui/InputNumber.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ __webpack_exports__["default"] = (_Property__WEBPACK_IMPORTED_MODULE_2__["default"].extend({
  defaults: _objectSpread({}, _Property__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.defaults, {
    // Array of units, eg. ['px', '%']
    units: [],
    // Selected unit, eg. 'px'
    unit: '',
    // Integer value steps
    step: 1,
    // Minimum value
    min: '',
    // Maximum value
    max: ''
  }),
  init: function init() {
    var unit = this.get('unit');
    var units = this.get('units');
    this.input = new domain_abstract_ui_InputNumber__WEBPACK_IMPORTED_MODULE_3__["default"]({
      model: this
    });

    if (units.length && !unit) {
      this.set('unit', units[0]);
    }
  },
  clearValue: function clearValue() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.set({
      value: undefined,
      unit: undefined
    }, opts);
    return this;
  },
  parseValue: function parseValue(val) {
    var parsed = _Property__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.parseValue.apply(this, arguments);

    var _this$input$validateI = this.input.validateInputValue(parsed.value, {
      deepCheck: 1
    }),
        value = _this$input$validateI.value,
        unit = _this$input$validateI.unit;

    parsed.value = value;
    parsed.unit = unit;
    return parsed;
  },
  getFullValue: function getFullValue() {
    var value = this.get('value');
    var unit = this.get('unit');
    value = !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(value) ? value : '';
    unit = !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(unit) && value ? unit : '';
    value = "".concat(value).concat(unit);
    return _Property__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.getFullValue.apply(this, [value]);
  }
}));

/***/ }),

/***/ "./src/style_manager/model/PropertyRadio.js":
/*!**************************************************!*\
  !*** ./src/style_manager/model/PropertyRadio.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Property__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Property */ "./src/style_manager/model/Property.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_Property__WEBPACK_IMPORTED_MODULE_2__["default"].extend({
  defaults: function defaults() {
    return _objectSpread({}, _Property__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.defaults, {
      // Array of options, eg. [{name: 'Label ', value: '100'}]
      options: [],
      full: 1
    });
  },
  initialize: function initialize() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _Property__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.initialize.apply(this, args);
    this.listenTo(this, 'change:options', this.onOptionChange);
  },
  onOptionChange: function onOptionChange() {
    this.set('list', this.get('options'));
  },
  getOptions: function getOptions() {
    var _this$attributes = this.attributes,
        options = _this$attributes.options,
        list = _this$attributes.list;
    return options && options.length ? options : list;
  },
  setOptions: function setOptions() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    this.set('options', opts);
    return this;
  },
  addOption: function addOption(opt) {
    if (opt) {
      var opts = this.getOptions();
      this.setOptions([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(opts), [opt]));
    }

    return this;
  }
}));

/***/ }),

/***/ "./src/style_manager/model/PropertySelect.js":
/*!***************************************************!*\
  !*** ./src/style_manager/model/PropertySelect.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyRadio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyRadio */ "./src/style_manager/model/PropertyRadio.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_PropertyRadio__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: function defaults() {
    return _objectSpread({}, _PropertyRadio__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
      full: 0
    });
  }
}));

/***/ }),

/***/ "./src/style_manager/model/PropertySlider.js":
/*!***************************************************!*\
  !*** ./src/style_manager/model/PropertySlider.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyInteger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyInteger */ "./src/style_manager/model/PropertyInteger.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_PropertyInteger__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: _objectSpread({}, _PropertyInteger__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
    showInput: 1
  })
}));

/***/ }),

/***/ "./src/style_manager/model/PropertyStack.js":
/*!**************************************************!*\
  !*** ./src/style_manager/model/PropertyStack.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyComposite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyComposite */ "./src/style_manager/model/PropertyComposite.js");
/* harmony import */ var _Layers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Layers */ "./src/style_manager/model/Layers.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ __webpack_exports__["default"] = (_PropertyComposite__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  defaults: _objectSpread({}, _PropertyComposite__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.defaults, {
    // Array of layers (which contain properties)
    layers: [],
    // The separator used to join layer values
    layerSeparator: ', ',
    // Layer preview
    preview: 0
  }),
  initialize: function initialize() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _PropertyComposite__WEBPACK_IMPORTED_MODULE_1__["default"].callParentInit(_PropertyComposite__WEBPACK_IMPORTED_MODULE_1__["default"], this, props, opts);
    var layers = this.get('layers');
    var layersColl = new _Layers__WEBPACK_IMPORTED_MODULE_2__["default"](layers);
    layersColl.property = this;
    layersColl.properties = this.get('properties');
    this.set('layers', layersColl);
    _PropertyComposite__WEBPACK_IMPORTED_MODULE_1__["default"].callInit(this, props, opts);
  },
  getLayers: function getLayers() {
    return this.get('layers');
  },
  getCurrentLayer: function getCurrentLayer() {
    return this.getLayers().filter(function (layer) {
      return layer.get('active');
    })[0];
  },
  getFullValue: function getFullValue() {
    return this.get('detached') ? '' : this.get('layers').getFullValue();
  },

  /**
   * This method allows to customize layers returned from the target
   * @param  {Object} target
   * @return {Array} Should return an array of layers
   * @example
   * // return example
   * [
   *  {
   *    properties: [
   *      { property: 'width', ... }
   *      { property: 'height', ... }
   *    ]
   *  }
   * ]
   */
  getLayersFromTarget: function getLayersFromTarget(target) {
    return;
  }
}));

/***/ }),

/***/ "./src/style_manager/model/Sector.js":
/*!*******************************************!*\
  !*** ./src/style_manager/model/Sector.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Properties */ "./src/style_manager/model/Properties.js");
/* harmony import */ var _PropertyFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PropertyFactory */ "./src/style_manager/model/PropertyFactory.js");




/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend({
  defaults: {
    id: '',
    name: '',
    open: true,
    buildProps: '',
    extendBuilded: 1,
    properties: []
  },
  initialize: function initialize(opts) {
    var o = opts || {};
    var builded = this.buildProperties(o.buildProps);
    var name = this.get('name') || '';
    var props = [];
    !this.get('id') && this.set('id', name.replace(/ /g, '_').toLowerCase());
    if (!builded) props = this.get('properties');else props = this.extendProperties(builded);
    var propsModel = new _Properties__WEBPACK_IMPORTED_MODULE_2__["default"](props);
    propsModel.sector = this;
    this.set('properties', propsModel);
  },

  /**
   * Extend properties
   * @param {Array<Object>} props Start properties
   * @param {Array<Object>} moProps Model props
   * @param {Boolean} ex Returns the same amount of passed model props
   * @return {Array<Object>} Final props
   * @private
   */
  extendProperties: function extendProperties(props, moProps, ex) {
    var pLen = props.length;
    var mProps = moProps || this.get('properties');
    var ext = this.get('extendBuilded');
    var isolated = [];

    for (var i = 0, len = mProps.length; i < len; i++) {
      var mProp = mProps[i];
      var found = 0;

      for (var j = 0; j < pLen; j++) {
        var prop = props[j];

        if (mProp.property == prop.property || mProp.id == prop.property) {
          // Check for nested properties
          var mPProps = mProp.properties;

          if (mPProps && mPProps.length) {
            mProp.properties = this.extendProperties(prop.properties || [], mPProps, 1);
          }

          props[j] = ext ? Object(underscore__WEBPACK_IMPORTED_MODULE_1__["extend"])(prop, mProp) : mProp;
          isolated[j] = props[j];
          found = 1;
          continue;
        }
      }

      if (!found) {
        props.push(mProp);
        isolated.push(mProp);
      }
    }

    return ex ? isolated.filter(function (i) {
      return i;
    }) : props;
  },

  /**
   * Build properties
   * @param {Array<string>} propr Array of props as sting
   * @return {Array<Object>}
   * @private
   */
  buildProperties: function buildProperties(props) {
    var r;
    var buildP = props || [];
    if (!buildP.length) return;
    if (!this.propFactory) this.propFactory = new _PropertyFactory__WEBPACK_IMPORTED_MODULE_3__["default"]();
    r = this.propFactory.build(buildP);
    return r;
  }
}));

/***/ }),

/***/ "./src/style_manager/model/Sectors.js":
/*!********************************************!*\
  !*** ./src/style_manager/model/Sectors.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Sector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sector */ "./src/style_manager/model/Sector.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Sector__WEBPACK_IMPORTED_MODULE_1__["default"]
}));

/***/ }),

/***/ "./src/style_manager/view/LayerView.js":
/*!*********************************************!*\
  !*** ./src/style_manager/view/LayerView.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertiesView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertiesView */ "./src/style_manager/view/PropertiesView.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  events: {
    click: 'active',
    'click [data-close-layer]': 'remove',
    'mousedown [data-move-layer]': 'initSorter',
    'touchstart [data-move-layer]': 'initSorter'
  },
  template: function template(model) {
    var pfx = this.pfx,
        ppfx = this.ppfx;
    var label = "Layer ".concat(model.get('index'));
    return "\n      <div id=\"".concat(pfx, "move\" class=\"").concat(ppfx, "no-touch-actions\" data-move-layer>\n        <i class=\"fa fa-arrows\"></i>\n      </div>\n      <div id=\"").concat(pfx, "label\">").concat(label, "</div>\n      <div id=\"").concat(pfx, "preview-box\">\n      \t<div id=\"").concat(pfx, "preview\" data-preview></div>\n      </div>\n      <div id=\"").concat(pfx, "close-layer\" class=\"").concat(pfx, "btn-close\" data-close-layer>\n        &Cross;\n      </div>\n      <div id=\"").concat(pfx, "inputs\" data-properties></div>\n      <div style=\"clear:both\"></div>\n    ");
  },
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = this.model;
    this.stackModel = o.stackModel || {};
    this.config = o.config || {};
    this.pfx = this.config.stylePrefix || '';
    this.ppfx = this.config.pStylePrefix || '';
    this.sorter = o.sorter || null;
    this.propsConfig = o.propsConfig || {};
    this.customPreview = o.onPreview;
    this.listenTo(model, 'destroy remove', this.remove);
    this.listenTo(model, 'change:active', this.updateVisibility);
    this.listenTo(model.get('properties'), 'change', this.updatePreview); // For the sorter

    model.view = this;
    model.set({
      droppable: 0,
      draggable: 1
    });
    this.$el.data('model', model);
  },

  /**
   * Delegate sorting
   * @param  {Event} e
   * */
  initSorter: function initSorter(e) {
    if (this.sorter) this.sorter.startSort(this.el);
  },
  remove: function remove(e) {
    if (e && e.stopPropagation) e.stopPropagation();
    var model = this.model;
    var collection = model.collection;
    var stackModel = this.stackModel;
    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.remove.apply(this, arguments);

    if (collection.contains(model)) {
      collection.remove(model);
    }

    if (stackModel && stackModel.set) {
      stackModel.set({
        stackIndex: null
      }, {
        silent: true
      });
      stackModel.trigger('updateValue');
    }
  },

  /**
   * Default method for changing preview box
   * @param {Collection} props
   * @param {Element} $el
   */
  onPreview: function onPreview(value) {
    var values = value.split(' ');
    var lim = 3;
    var result = [];
    this.model.get('properties').each(function (prop, index) {
      var value = values[index] || '';

      if (value) {
        if (prop.get('type') == 'integer') {
          var valueInt = parseInt(value, 10);
          var unit = value.replace(valueInt, '');
          valueInt = !isNaN(valueInt) ? valueInt : 0;
          valueInt = valueInt > lim ? lim : valueInt;
          valueInt = valueInt < -lim ? -lim : valueInt;
          value = valueInt + unit;
        }
      }

      result.push(value);
    });
    return result.join(' ');
  },
  updatePreview: function updatePreview() {
    var stackModel = this.stackModel;
    var customPreview = this.customPreview;
    var previewEl = this.getPreviewEl();
    var value = this.model.getFullValue();
    var preview = customPreview ? customPreview(value) : this.onPreview(value);

    if (preview && stackModel && previewEl) {
      previewEl.style[stackModel.get('property')] = preview;
    }
  },
  getPropertiesWrapper: function getPropertiesWrapper() {
    if (!this.propsWrapEl) {
      this.propsWrapEl = this.el.querySelector('[data-properties]');
    }

    return this.propsWrapEl;
  },
  getPreviewEl: function getPreviewEl() {
    if (!this.previewEl) {
      this.previewEl = this.el.querySelector('[data-preview]');
    }

    return this.previewEl;
  },
  active: function active() {
    var model = this.model;
    var collection = model.collection;
    collection.active(collection.indexOf(model));
  },
  updateVisibility: function updateVisibility() {
    var pfx = this.pfx;
    var wrapEl = this.getPropertiesWrapper();
    var active = this.model.get('active');
    wrapEl.style.display = active ? '' : 'none';
    this.$el[active ? 'addClass' : 'removeClass']("".concat(pfx, "active"));
  },
  render: function render() {
    var propsConfig = this.propsConfig;
    var model = this.model,
        el = this.el,
        pfx = this.pfx;
    var preview = model.get('preview');
    var properties = new _PropertiesView__WEBPACK_IMPORTED_MODULE_1__["default"]({
      collection: model.get('properties'),
      config: this.config,
      target: propsConfig.target,
      customValue: propsConfig.customValue,
      propTarget: propsConfig.propTarget,
      onChange: propsConfig.onChange
    }).render().el;
    el.innerHTML = this.template(model);
    el.className = "".concat(pfx, "layer").concat(!preview ? " ".concat(pfx, "no-preview") : '');
    this.getPropertiesWrapper().appendChild(properties);
    this.updateVisibility();
    this.updatePreview();
    return this;
  }
}));

/***/ }),

/***/ "./src/style_manager/view/LayersView.js":
/*!**********************************************!*\
  !*** ./src/style_manager/view/LayersView.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _LayerView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LayerView */ "./src/style_manager/view/LayerView.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize(o) {
    this.config = o.config || {};
    this.stackModel = o.stackModel;
    this.preview = o.preview;
    this.pfx = this.config.stylePrefix || '';
    this.ppfx = this.config.pStylePrefix || '';
    this.propsConfig = o.propsConfig;
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var collection = this.collection;
    this.className = "".concat(pfx, "layers ").concat(ppfx, "field");
    this.listenTo(collection, 'add', this.addTo);
    this.listenTo(collection, 'deselectAll', this.deselectAll);
    this.listenTo(collection, 'reset', this.render);
    var em = this.config.em || '';
    var utils = em ? em.get('Utils') : '';
    this.sorter = utils ? new utils.Sorter({
      container: this.el,
      ignoreViewChildren: 1,
      containerSel: ".".concat(pfx, "layers"),
      itemSel: ".".concat(pfx, "layer"),
      pfx: this.config.pStylePrefix
    }) : ''; // For the Sorter

    collection.view = this;
    this.$el.data('model', collection);
    this.$el.data('collection', collection);
  },

  /**
   * Add to collection
   * @param Object Model
   *
   * @return Object
   * */
  addTo: function addTo(model) {
    var i = this.collection.indexOf(model);
    this.addToCollection(model, null, i);
  },

  /**
   * Add new object to collection
   * @param Object Model
   * @param Object Fragment collection
   * @param  {number} index Index of append
   *
   * @return Object Object created
   * */
  addToCollection: function addToCollection(model, fragmentEl, index) {
    var fragment = fragmentEl || null;
    var stackModel = this.stackModel;
    var config = this.config;
    var sorter = this.sorter;
    var propsConfig = this.propsConfig;

    if (typeof this.preview !== 'undefined') {
      model.set('preview', this.preview);
    }

    var view = new _LayerView__WEBPACK_IMPORTED_MODULE_1__["default"]({
      model: model,
      config: config,
      sorter: sorter,
      stackModel: stackModel,
      propsConfig: propsConfig
    });
    var rendered = view.render().el;

    if (fragment) {
      fragment.appendChild(rendered);
    } else {
      if (typeof index != 'undefined') {
        var method = 'before'; // If the added model is the last of collection
        // need to change the logic of append

        if (this.$el.children().length == index) {
          index--;
          method = 'after';
        } // In case the added is new in the collection index will be -1


        if (index < 0) {
          this.$el.append(rendered);
        } else this.$el.children().eq(index)[method](rendered);
      } else this.$el.append(rendered);
    }

    return rendered;
  },

  /**
   * Deselect all
   *
   * @return void
   * */
  deselectAll: function deselectAll() {
    this.$el.find('.' + this.pfx + 'layer').removeClass(this.pfx + 'active');
  },
  render: function render() {
    var fragment = document.createDocumentFragment();
    this.$el.empty();
    this.collection.each(function (model) {
      this.addToCollection(model, fragment);
    }, this);
    this.$el.append(fragment);
    this.$el.attr('class', this.className);
    if (this.sorter) this.sorter.plh = null;
    return this;
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertiesView.js":
/*!**************************************************!*\
  !*** ./src/style_manager/view/PropertiesView.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/dom */ "./src/utils/dom.js");


/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  initialize: function initialize(o) {
    this.config = o.config || {};
    this.pfx = this.config.stylePrefix || '';
    this.target = o.target || {};
    this.propTarget = o.propTarget || {};
    this.onChange = o.onChange;
    this.onInputRender = o.onInputRender || {};
    this.customValue = o.customValue || {};
    this.properties = [];
    var coll = this.collection;
    this.listenTo(coll, 'add', this.addTo);
    this.listenTo(coll, 'reset', this.render);
  },
  addTo: function addTo(model, coll, opts) {
    this.add(model, null, opts);
  },
  add: function add(model, frag) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var appendTo = frag || this.el;
    var view = new model.typeView({
      model: model,
      name: model.get('name'),
      id: this.pfx + model.get('property'),
      target: this.target,
      propTarget: this.propTarget,
      onChange: this.onChange,
      onInputRender: this.onInputRender,
      config: this.config
    });

    if (model.get('type') != 'composite') {
      view.customValue = this.customValue;
    }

    view.render();
    var rendered = view.el;
    this.properties.push(view);
    Object(utils_dom__WEBPACK_IMPORTED_MODULE_1__["appendAtIndex"])(appendTo, rendered, opts.at);
  },
  render: function render() {
    var _this = this;

    this.properties = [];
    var fragment = document.createDocumentFragment();
    this.collection.each(function (model) {
      return _this.add(model, fragment);
    });
    this.$el.append(fragment);
    this.$el.attr('class', "".concat(this.pfx, "properties"));
    return this;
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyColorView.js":
/*!*****************************************************!*\
  !*** ./src/style_manager/view/PropertyColorView.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyIntegerView */ "./src/style_manager/view/PropertyIntegerView.js");
/* harmony import */ var domain_abstract_ui_InputColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! domain_abstract/ui/InputColor */ "./src/domain_abstract/ui/InputColor.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ __webpack_exports__["default"] = (_PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  setValue: function setValue(value) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    opts = _objectSpread({}, opts, {
      silent: 1
    });
    this.inputInst.setValue(value, opts);
  },
  onRender: function onRender() {
    if (!this.input) {
      var ppfx = this.ppfx;
      var inputColor = new domain_abstract_ui_InputColor__WEBPACK_IMPORTED_MODULE_2__["default"]({
        target: this.target,
        model: this.model,
        ppfx: ppfx
      });
      var input = inputColor.render();
      this.el.querySelector(".".concat(ppfx, "fields")).appendChild(input.el);
      this.$input = input.inputEl;
      this.$color = input.colorEl;
      this.input = this.$input.get(0);
      this.inputInst = input;
    }
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyCompositeView.js":
/*!*********************************************************!*\
  !*** ./src/style_manager/view/PropertyCompositeView.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyView */ "./src/style_manager/view/PropertyView.js");


var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (_PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  templateInput: function templateInput() {
    var pfx = this.pfx;
    return "\n      <div class=\"".concat(pfx, "field ").concat(pfx, "composite\">\n        <span id=\"").concat(pfx, "input-holder\"></span>\n      </div>\n    ");
  },
  inputValueChanged: function inputValueChanged() {
    // If it's not detached (eg. 'padding: 1px 2px 3px 4px;') it will follow
    // the same flow of PropertyView
    if (!this.model.get('detached')) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.inputValueChanged.apply(this, args);
    }
  },
  clear: function clear(e) {
    var props = this.properties;
    props && props.forEach(function (propView) {
      return propView.clear();
    });
    _PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.clear.apply(this, arguments);
  },

  /**
   * Renders input
   * */
  onRender: function onRender() {
    var model = this.model;
    var props = model.get('properties') || [];
    var self = this;
    this.properties = [];

    if (props.length) {
      if (!this.$input) {
        this.$input = $('<input type="hidden" value="0">');
        this.input = this.$input.get(0);
      }

      if (!this.props) {
        this.props = model.get('properties');
      }

      if (!this.$props) {
        //Not yet supported nested composite
        this.props.each(function (prop, index) {
          if (prop && prop.get('type') == 'composite') {
            this.props.remove(prop);
            console.warn('Nested composite types not yet allowed.');
          }

          prop.parent = model;
        }, this);

        var PropertiesView = __webpack_require__(/*! ./PropertiesView */ "./src/style_manager/view/PropertiesView.js").default;

        var propsView = new PropertiesView(this.getPropsConfig());
        this.$props = propsView.render().$el;
        this.properties = propsView.properties;
        this.$el.find("#".concat(this.pfx, "input-holder")).append(this.$props);
      }
    }
  },

  /**
   * Returns configurations that should be past to properties
   * @param {Object} opts
   * @return {Object}
   */
  getPropsConfig: function getPropsConfig(opts) {
    var that = this;
    var model = this.model;
    var result = {
      config: this.config,
      collection: this.props,
      target: this.target,
      propTarget: this.propTarget,
      // On any change made to children I need to update composite value
      onChange: function onChange(el, view, opts) {
        model.set('value', model.getFullValue(), opts);
      },
      // Each child property will receive a full composite string, eg. '0px 0px 10px 0px'
      // I need to extract from that string the corresponding one to that property.
      customValue: function customValue(property, mIndex) {
        return that.valueOnIndex(mIndex, property);
      }
    }; // If detached let follow its standard flow

    if (model.get('detached')) {
      delete result.onChange;
    }

    return result;
  },

  /**
   * Extract string from composite value
   * @param {number} index Index
   * @param {Object} view Property view
   * @return {string}
   * */
  valueOnIndex: function valueOnIndex(index, view) {
    var value;
    var targetValue = this.getTargetValue({
      ignoreDefault: 1
    }); // If the target value of the composite is not empty I'll fetch
    // the corresponding value from the requested index, otherwise try
    // to get the value of the sub-property

    if (targetValue) {
      var values = targetValue.split(this.model.getSplitSeparator());
      value = values[index];
    } else {
      value = view && view.getTargetValue({
        ignoreCustomValue: 1,
        ignoreDefault: 1
      });
    }

    return value;
  },
  clearCached: function clearCached() {
    _PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.clearCached.apply(this, arguments);
    this.$input = null;
    this.props = null;
    this.$props = null;
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyFileView.js":
/*!****************************************************!*\
  !*** ./src/style_manager/view/PropertyFileView.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _PropertyView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PropertyView */ "./src/style_manager/view/PropertyView.js");



var $ = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (_PropertyView__WEBPACK_IMPORTED_MODULE_2__["default"].extend({
  templateInput: function templateInput() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var assetsLabel = this.config.assetsLabel || 'Images';
    return "\n    <div class=\"".concat(pfx, "field ").concat(pfx, "file\">\n      <div id='").concat(pfx, "input-holder'>\n        <div class=\"").concat(pfx, "btn-c\">\n          <button class=\"").concat(pfx, "btn\" id=\"").concat(pfx, "images\" type=\"button\">\n            ").concat(assetsLabel, "\n          </button>\n        </div>\n        <div style=\"clear:both;\"></div>\n      </div>\n      <div id=\"").concat(pfx, "preview-box\">\n        <div id=\"").concat(pfx, "preview-file\"></div>\n        <div id=\"").concat(pfx, "close\">&Cross;</div>\n      </div>\n    </div>\n    ");
  },
  init: function init() {
    var em = this.em;
    this.modal = em.get('Modal');
    this.am = em.get('AssetManager');
    this.events['click #' + this.pfx + 'close'] = 'removeFile';
    this.events['click #' + this.pfx + 'images'] = 'openAssetManager';
    this.delegateEvents();
  },
  onRender: function onRender() {
    if (!this.$input) {
      var plh = this.model.getDefaultValue();
      this.$input = $("<input placeholder=\"".concat(plh, "\">"));
    }

    if (!this.$preview) {
      this.$preview = this.$el.find('#' + this.pfx + 'preview-file');
    }

    if (!this.$previewBox) {
      this.$previewBox = this.$el.find('#' + this.pfx + 'preview-box');
    }

    this.setValue(this.componentValue, 0);
  },
  clearCached: function clearCached() {
    _PropertyView__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.clearCached.apply(this, arguments);
    this.$preview = null;
    this.$previewBox = null;
  },
  setValue: function setValue(value, f) {
    _PropertyView__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.setValue.apply(this, arguments);
    this.setPreviewView(value && value != this.model.getDefaultValue());
    this.setPreview(value);
  },

  /**
   * Change visibility of the preview box
   * @param bool Visibility
   *
   * @return void
   * */
  setPreviewView: function setPreviewView(v) {
    var pv = this.$previewBox;
    pv && pv[v ? 'addClass' : 'removeClass']("".concat(this.pfx, "show"));
  },

  /**
   * Spread url
   * @param string Url
   *
   * @return void
   * */
  spreadUrl: function spreadUrl(url) {
    this.model.set('value', url);
    this.setPreviewView(1);
  },

  /**
   * Shows file preview
   * @param string Value
   * */
  setPreview: function setPreview(value) {
    var preview = this.$preview;
    value = value && value.indexOf('url(') < 0 ? "url(".concat(value, ")") : value;
    preview && preview.css('background-image', value);
  },

  /** @inheritdoc */
  cleanValue: function cleanValue() {
    this.setPreviewView(0);
    this.model.set({
      value: ''
    }, {
      silent: true
    });
  },

  /**
   * Remove file from input
   *
   * @return void
   * */
  removeFile: function removeFile() {
    this.model.set('value', this.model.getDefaultValue());

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _PropertyView__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.cleanValue.apply(this, args);
    this.setPreviewView(0);
  },

  /**
   * Open dialog for image selecting
   * @param  {Object}  e  Event
   *
   * @return void
   * */
  openAssetManager: function openAssetManager(e) {
    var _this = this;

    var em = this.em,
        modal = this.modal;
    var editor = em ? em.get('Editor') : '';

    if (editor) {
      editor.runCommand('open-assets', {
        types: ['image'],
        accept: 'image/*',
        target: this.getTargetModel(),
        onClick: function onClick() {},
        onDblClick: function onDblClick() {},
        onSelect: function onSelect(asset) {
          modal.close();
          var url = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isString"])(asset) ? asset : asset.get('src');

          _this.spreadUrl(url);
        }
      });
    }
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyIntegerView.js":
/*!*******************************************************!*\
  !*** ./src/style_manager/view/PropertyIntegerView.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyView */ "./src/style_manager/view/PropertyView.js");


var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (_PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  templateInput: function templateInput() {
    return '';
  },
  init: function init() {
    var model = this.model;
    this.listenTo(model, 'change:unit', this.modelValueChanged);
    this.listenTo(model, 'el:change', this.elementUpdated);
    this.listenTo(model, 'change:units', this.render);
  },
  setValue: function setValue(value) {
    var parsed = this.model.parseValue(value);
    value = "".concat(parsed.value).concat(parsed.unit);
    this.inputInst.setValue(value, {
      silent: 1
    });
  },
  onRender: function onRender() {
    var ppfx = this.ppfx;

    if (!this.input) {
      var input = this.model.input;
      input.ppfx = ppfx;
      input.render();
      var fields = this.el.querySelector(".".concat(ppfx, "fields"));
      fields.appendChild(input.el);
      this.$input = input.inputEl;
      this.unit = input.unitEl;
      this.$unit = $(this.unit);
      this.input = this.$input.get(0);
      this.inputInst = input;
    }
  },
  clearCached: function clearCached() {
    _PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.clearCached.apply(this, arguments);
    this.unit = null;
    this.$unit = null;
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyRadioView.js":
/*!*****************************************************!*\
  !*** ./src/style_manager/view/PropertyRadioView.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _PropertyView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PropertyView */ "./src/style_manager/view/PropertyView.js");

/* harmony default export */ __webpack_exports__["default"] = (_PropertyView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  templateInput: function templateInput() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    return "\n      <div class=\"".concat(ppfx, "field ").concat(ppfx, "field-radio\">\n      </div>\n    ");
  },
  onRender: function onRender() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var itemCls = "".concat(ppfx, "radio-item-label");
    var model = this.model;
    var prop = model.get('property');
    var options = model.get('list') || model.get('options') || [];

    if (!this.input) {
      if (options && options.length) {
        var inputStr = '';
        options.forEach(function (el) {
          var cl = el.className ? "".concat(el.className, " ").concat(pfx, "icon ").concat(itemCls) : '';
          var id = "".concat(prop, "-").concat(el.value);
          var labelTxt = el.name || el.value;
          var titleAttr = el.title ? "title=\"".concat(el.title, "\"") : '';
          inputStr += "\n            <div class=\"".concat(ppfx, "radio-item\">\n              <input type=\"radio\" class=\"").concat(pfx, "radio\" id=\"").concat(id, "\" name=\"").concat(prop, "\" value=\"").concat(el.value, "\"/>\n              <label class=\"").concat(cl || itemCls, "\" ").concat(titleAttr, " for=\"").concat(id, "\">").concat(cl ? '' : labelTxt, "</label>\n            </div>\n          ");
        });
        var inputHld = this.el.querySelector(".".concat(ppfx, "field"));
        inputHld.innerHTML = "<div class=\"".concat(ppfx, "radio-items\">").concat(inputStr, "</div>");
        this.input = inputHld.firstChild;
      }
    }
  },
  getInputValue: function getInputValue() {
    var inputChk = this.getCheckedEl();
    return inputChk ? inputChk.value : '';
  },
  getCheckedEl: function getCheckedEl() {
    var input = this.getInputEl();
    return input ? input.querySelector('input:checked') : '';
  },
  setValue: function setValue(value) {
    var model = this.model;
    var val = value || model.get('value') || model.getDefaultValue();
    var input = this.getInputEl();
    var inputIn = input ? input.querySelector("[value=\"".concat(val, "\"]")) : '';

    if (inputIn) {
      inputIn.checked = true;
    } else {
      var inputChk = this.getCheckedEl();
      inputChk && (inputChk.checked = false);
    }
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertySelectView.js":
/*!******************************************************!*\
  !*** ./src/style_manager/view/PropertySelectView.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyView */ "./src/style_manager/view/PropertyView.js");


var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (_PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  templateInput: function templateInput() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    return "\n      <div class=\"".concat(ppfx, "field ").concat(ppfx, "select\">\n        <span id=\"").concat(pfx, "input-holder\"></span>\n        <div class=\"").concat(ppfx, "sel-arrow\">\n          <div class=\"").concat(ppfx, "d-s-arrow\"></div>\n        </div>\n      </div>\n    ");
  },
  initialize: function initialize() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _PropertyView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.initialize.apply(this, args);
    this.listenTo(this.model, 'change:options', this.updateOptions);
  },
  updateOptions: function updateOptions() {
    this.input = null;
    this.onRender();
  },
  onRender: function onRender() {
    var pfx = this.pfx;
    var options = this.model.getOptions();

    if (!this.input) {
      var optionsStr = '';
      options.forEach(function (option) {
        var name = option.name || option.value;
        var style = option.style ? option.style.replace(/"/g, '&quot;') : '';
        var styleAttr = style ? "style=\"".concat(style, "\"") : '';
        var value = option.value.replace(/"/g, '&quot;');
        optionsStr += "<option value=\"".concat(value, "\" ").concat(styleAttr, ">").concat(name, "</option>");
      });
      var inputH = this.el.querySelector("#".concat(pfx, "input-holder"));
      inputH.innerHTML = "<select>".concat(optionsStr, "</select>");
      this.input = inputH.firstChild;
    }
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertySliderView.js":
/*!******************************************************!*\
  !*** ./src/style_manager/view/PropertySliderView.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyIntegerView */ "./src/style_manager/view/PropertyIntegerView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/* harmony default export */ __webpack_exports__["default"] = (_PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  events: function events() {
    return _objectSpread({}, _PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.events, {
      'change [type=range]': 'inputValueChanged',
      'input [type=range]': 'inputValueChangedSoft',
      change: ''
    });
  },
  templateInput: function templateInput(model) {
    var ppfx = this.ppfx;
    return "\n      <div class=\"".concat(ppfx, "field ").concat(ppfx, "field-range\">\n        <input type=\"range\"\n          min=\"").concat(model.get('min'), "\"\n          max=\"").concat(model.get('max'), "\"\n          step=\"").concat(model.get('step'), "\"/>\n      </div>\n    ");
  },
  getSliderEl: function getSliderEl() {
    if (!this.slider) {
      this.slider = this.el.querySelector('input[type=range]');
    }

    return this.slider;
  },
  inputValueChanged: function inputValueChanged() {
    var model = this.model;
    var step = model.get('step');
    this.getInputEl().value = this.getSliderEl().value;
    var value = this.getInputValue() - step;
    model.set('value', value, {
      avoidStore: 1
    }).set('value', value + step);
    this.elementUpdated();
  },
  inputValueChangedSoft: function inputValueChangedSoft() {
    this.getInputEl().value = this.getSliderEl().value;
    this.model.set('value', this.getInputValue(), {
      avoidStore: 1
    });
    this.elementUpdated();
  },
  setValue: function setValue(value) {
    var parsed = this.model.parseValue(value);
    this.getSliderEl().value = parseFloat(parsed.value);
    _PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.setValue.apply(this, arguments);
  },
  onRender: function onRender() {
    _PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.onRender.apply(this, arguments);

    if (!this.model.get('showInput')) {
      this.inputInst.el.style.display = 'none';
    }
  },
  clearCached: function clearCached() {
    _PropertyIntegerView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.clearCached.apply(this, arguments);
    this.slider = null;
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyStackView.js":
/*!*****************************************************!*\
  !*** ./src/style_manager/view/PropertyStackView.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _PropertyCompositeView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PropertyCompositeView */ "./src/style_manager/view/PropertyCompositeView.js");
/* harmony import */ var _LayersView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LayersView */ "./src/style_manager/view/LayersView.js");


/* harmony default export */ __webpack_exports__["default"] = (_PropertyCompositeView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  templateInput: function templateInput() {
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    return "\n      <div class=\"".concat(pfx, "field ").concat(pfx, "stack\">\n        <button type=\"button\" id=\"").concat(pfx, "add\" data-add-layer>+</button>\n        <div data-layers-wrapper></div>\n      </div>\n    ");
  },
  init: function init() {
    var model = this.model;
    var pfx = this.pfx;
    model.set('stackIndex', null);
    this.events["click [data-add-layer]"] = 'addLayer';
    this.listenTo(model, 'change:stackIndex', this.indexChanged);
    this.listenTo(model, 'updateValue', this.inputValueChanged);
    this.delegateEvents();
  },
  clear: function clear(e) {
    e && e.stopPropagation();
    this.model.get('layers').reset();
    this.model.clearValue();
    this.targetUpdated();
  },

  /**
   * Fired when the target is updated.
   * With detached mode the component will be always empty as its value
   * so we gonna check all props and find if it has any difference
   * */
  targetUpdated: function targetUpdated() {
    if (!this.model.get('detached')) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _PropertyCompositeView__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.targetUpdated.apply(this, args);
    } else {
      this.checkVisibility();
    }

    this.refreshLayers();
  },

  /**
   * Returns the collection of layers
   * @return {Collection}
   */
  getLayers: function getLayers() {
    return this.model.get('layers');
  },

  /**
   * Triggered when another layer has been selected.
   * This allow to move all rendered properties to a new
   * selected layer
   * @param {Event}
   *
   * @return {Object}
   * */
  indexChanged: function indexChanged(e) {
    var model = this.model;
    this.getLayers().active(model.get('stackIndex'));
  },
  addLayer: function addLayer() {
    var model = this.model;
    var layers = this.getLayers();
    var properties = model.get('properties').deepClone();
    properties.each(function (property) {
      return property.set('value', '');
    });
    var layer = layers.add({
      properties: properties
    }); // In detached mode inputValueChanged will add new 'layer value'
    // to all subprops

    this.inputValueChanged(); // This will set subprops with a new default values

    model.set('stackIndex', layers.indexOf(layer));
  },
  inputValueChanged: function inputValueChanged() {
    var model = this.model;
    this.elementUpdated(); // If not detached I'll just put all the values from layers to property
    // eg. background: layer1Value, layer2Value, layer3Value, ...

    if (!model.get('detached')) {
      model.set('value', this.getLayerValues());
    } else {
      model.get('properties').each(function (prop) {
        return prop.trigger('change:value');
      });
    }
  },

  /**
   * There is no need to handle input update by the property itself,
   * this will be done by layers
   * @private
   */
  setValue: function setValue() {},

  /**
   * Create value by layers
   * @return string
   * */
  getLayerValues: function getLayerValues() {
    return this.getLayers().getFullValue();
  },

  /**
   * Refresh layers
   * */
  refreshLayers: function refreshLayers() {
    var layersObj = [];
    var model = this.model;
    var layers = this.getLayers();
    var detached = model.get('detached');
    var target = this.getTarget(); // With detached layers values will be assigned to their properties

    if (detached) {
      var style = target ? target.getStyle() : {};
      layersObj = layers.getLayersFromStyle(style);
    } else {
      var value = this.getTargetValue();
      value = value == model.getDefaultValue() ? '' : value;
      layersObj = layers.getLayersFromValue(value);
    }

    var toAdd = model.getLayersFromTarget(target) || layersObj;
    layers.reset();
    layers.add(toAdd);
    model.set({
      stackIndex: null
    }, {
      silent: true
    });
  },
  onRender: function onRender() {
    var self = this;
    var model = this.model;
    var fieldEl = this.el.querySelector('[data-layers-wrapper]');

    var PropertiesView = __webpack_require__(/*! ./PropertiesView */ "./src/style_manager/view/PropertiesView.js").default;

    var propsConfig = {
      target: this.target,
      propTarget: this.propTarget,
      // Things to do when a single sub-property is changed
      onChange: function onChange(el, view, opt) {
        var subModel = view.model;

        if (model.get('detached')) {
          var subProp = subModel.get('property');
          var values = self.getLayers().getPropertyValues(subProp);
          view.updateTargetStyle(values, null, opt);
        } else {
          model.set('value', model.getFullValue(), opt);
        }
      }
    };
    var layers = new _LayersView__WEBPACK_IMPORTED_MODULE_1__["default"]({
      collection: this.getLayers(),
      stackModel: model,
      preview: model.get('preview'),
      config: this.config,
      propsConfig: propsConfig
    }).render().el; // Will use it to propogate changes

    new PropertiesView({
      target: this.target,
      collection: this.model.get('properties'),
      stackModel: model,
      config: this.config,
      onChange: propsConfig.onChange,
      propTarget: propsConfig.propTarget,
      customValue: propsConfig.customValue
    }).render(); //model.get('properties')

    fieldEl.appendChild(layers);
  }
}));

/***/ }),

/***/ "./src/style_manager/view/PropertyView.js":
/*!************************************************!*\
  !*** ./src/style_manager/view/PropertyView.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");





var clearProp = 'data-clear-style';
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  template: function template(model) {
    var pfx = this.pfx;
    return "\n      <div class=\"".concat(pfx, "label\">\n        ").concat(this.templateLabel(model), "\n      </div>\n      <div class=\"").concat(this.ppfx, "fields\">\n        ").concat(this.templateInput(model), "\n      </div>\n    ");
  },
  templateLabel: function templateLabel(model) {
    var pfx = this.pfx;
    var icon = model.get('icon');
    var info = model.get('info');
    var parent = model.parent;
    return "\n      <span class=\"".concat(pfx, "icon ").concat(icon, "\" title=\"").concat(info, "\">\n        ").concat(model.get('name'), "\n      </span>\n      ").concat(!parent ? "<b class=\"".concat(pfx, "clear\" ").concat(clearProp, ">&Cross;</b>") : '', "\n    ");
  },
  templateInput: function templateInput(model) {
    return "\n      <div class=\"".concat(this.ppfx, "field\">\n        <input placeholder=\"").concat(model.getDefaultValue(), "\"/>\n      </div>\n    ");
  },
  events: _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({
    change: 'inputValueChanged'
  }, "click [".concat(clearProp, "]"), 'clear'),
  initialize: function initialize() {
    var _this = this;

    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["bindAll"])(this, 'targetUpdated');
    this.config = o.config || {};
    var em = this.config.em;
    this.em = em;
    this.pfx = this.config.stylePrefix || '';
    this.ppfx = this.config.pStylePrefix || '';
    this.target = o.target || {};
    this.propTarget = o.propTarget || {};
    this.onChange = o.onChange;
    this.onInputRender = o.onInputRender || {};
    this.customValue = o.customValue || {};
    var model = this.model;
    this.property = model.get('property');
    this.input = null;
    var pfx = this.pfx;
    this.inputHolderId = '#' + pfx + 'input-holder';
    this.sector = model.collection && model.collection.sector;
    model.view = this;

    if (!model.get('value')) {
      model.set('value', model.getDefaultValue());
    }

    em && em.on("update:component:style:".concat(this.property), this.targetUpdated); //em && em.on(`styleable:change:${this.property}`, this.targetUpdated);
    // Listening to changes of properties in this.requires, so that styleable
    // changes based on other properties are propagated

    var requires = model.get('requires');
    requires && Object.keys(requires).forEach(function (property) {
      em && em.on("component:styleUpdate:".concat(property), _this.targetUpdated);
    });
    this.listenTo(this.propTarget, 'update styleManager:update', this.targetUpdated);
    this.listenTo(model, 'destroy remove', this.remove);
    this.listenTo(model, 'change:value', this.modelValueChanged);
    this.listenTo(model, 'targetUpdated', this.targetUpdated);
    this.listenTo(model, 'change:visible', this.updateVisibility);
    this.listenTo(model, 'change:status', this.updateStatus);
    var init = this.init && this.init.bind(this);
    init && init();
  },

  /**
   * Triggers when the status changes. The status indicates if the value of
   * the proprerty is changed or inherited
   * @private
   */
  updateStatus: function updateStatus() {
    var model = this.model;
    var status = model.get('status');
    var parent = model.parent;
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    var config = this.config;
    var updatedCls = "".concat(ppfx, "four-color");
    var computedCls = "".concat(ppfx, "color-warn");
    var labelEl = this.$el.children(".".concat(pfx, "label"));
    var clearStyleEl = this.getClearEl();
    var clearStyle = clearStyleEl ? clearStyleEl.style : {};
    labelEl.removeClass("".concat(updatedCls, " ").concat(computedCls));
    clearStyle.display = 'none';

    switch (status) {
      case 'updated':
        !parent && labelEl.addClass(updatedCls);

        if (config.clearProperties) {
          clearStyle.display = 'inline';
        }

        break;

      case 'computed':
        labelEl.addClass(computedCls);
        break;
    }
  },

  /**
   * Clear the property from the target
   */
  clear: function clear(e) {
    var _this2 = this;

    e && e.stopPropagation();
    this.model.clearValue(); // Skip one stack with setTimeout to avoid inconsistencies

    setTimeout(function () {
      return _this2.targetUpdated();
    });
  },

  /**
   * Get clear element
   * @return {HTMLElement}
   */
  getClearEl: function getClearEl() {
    if (!this.clearEl) {
      this.clearEl = this.el.querySelector("[".concat(clearProp, "]"));
    }

    return this.clearEl;
  },

  /**
   * Returns selected target which should have 'style' property
   * @return {Model|null}
   */
  getTarget: function getTarget() {
    return this.getTargetModel();
  },

  /**
   * Returns Styleable model
   * @return {Model|null}
   */
  getTargetModel: function getTargetModel() {
    return this.propTarget && this.propTarget.model;
  },

  /**
   * Returns helper Styleable model
   * @return {Model|null}
   */
  getHelperModel: function getHelperModel() {
    return this.propTarget && this.propTarget.helper;
  },

  /**
   * Triggers when the value of element input/s is changed, so have to update
   * the value of the model which will propogate those changes to the target
   */
  inputValueChanged: function inputValueChanged(e) {
    e && e.stopPropagation();
    this.model.setValue(this.getInputValue(), 1, {
      fromInput: 1
    });
    this.elementUpdated();
  },

  /**
   * Fired when the element of the property is updated
   */
  elementUpdated: function elementUpdated() {
    this.setStatus('updated');
  },
  setStatus: function setStatus(value) {
    this.model.set('status', value);
    var parent = this.model.parent;
    parent && value && parent.set('status', value);
  },
  emitUpdateTarget: Object(underscore__WEBPACK_IMPORTED_MODULE_2__["debounce"])(function () {
    var em = this.config.em;
    em && em.trigger('styleManager:update:target', this.getTarget());
  }),

  /**
   * Fired when the target is changed
   * */
  targetUpdated: function targetUpdated() {
    this.emitUpdateTarget();

    if (!this.checkVisibility()) {
      return;
    }

    var config = this.config;
    var em = config.em;
    var model = this.model;
    var property = model.get('property');
    var value = '';
    var status = '';
    var targetValue = this.getTargetValue({
      ignoreDefault: 1
    });
    var defaultValue = model.getDefaultValue();
    var computedValue = this.getComputedValue();

    if (targetValue) {
      value = targetValue;

      if (config.highlightChanged) {
        status = 'updated';
      }
    } else if (computedValue && config.showComputed && computedValue != defaultValue) {
      value = computedValue;

      if (config.highlightComputed) {
        status = 'computed';
      }
    } else {
      value = defaultValue;
      status = '';
    }

    model.setValue(value, 0, {
      fromTarget: 1
    });
    this.setStatus(status);

    if (em) {
      em.trigger('styleManager:change', this, property, value);
      em.trigger("styleManager:change:".concat(property), this, value);
    }
  },
  checkVisibility: function checkVisibility() {
    var result = 1; // Check if need to hide the property

    if (this.config.hideNotStylable) {
      if (!this.isTargetStylable() || !this.isComponentStylable()) {
        this.hide();
        result = 0;
      } else {
        this.show();
      } // Sector is not passed to Composite and Stack types


      if (this.sector) {
        this.sector.trigger('updateVisibility');
      }
    }

    return result;
  },

  /**
   * Get the value of this property from the target (eg, Component, CSSRule)
   * @param {Object} [opts] Options
   * @param {Boolean} [options.fetchFromFunction]
   * @param {Boolean} [options.ignoreDefault]
   * @return string
   * @private
   */
  getTargetValue: function getTargetValue() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var result;
    var model = this.model;
    var target = this.getTargetModel();
    var customFetchValue = this.customValue;

    if (!target) {
      return result;
    }

    result = target.getStyle()[model.get('property')];

    if (!result && !opts.ignoreDefault) {
      result = model.getDefaultValue();
    }

    if (typeof customFetchValue == 'function' && !opts.ignoreCustomValue) {
      var index = model.collection.indexOf(model);
      var customValue = customFetchValue(this, index);

      if (customValue) {
        result = customValue;
      }
    }

    return result;
  },

  /**
   * Returns computed value
   * @return {String}
   * @private
   */
  getComputedValue: function getComputedValue() {
    var target = this.propTarget;
    var computed = target.computed || {};
    var computedDef = target.computedDefault || {};
    var avoid = this.config.avoidComputed || [];
    var property = this.model.get('property');
    var notToSkip = avoid.indexOf(property) < 0;
    var value = computed[property];
    var valueDef = computedDef[Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["camelCase"])(property)];
    return computed && notToSkip && valueDef !== value && value;
  },

  /**
   * Returns value from input
   * @return {string}
   */
  getInputValue: function getInputValue() {
    var input = this.getInputEl();
    return input ? input.value : '';
  },

  /**
   * Triggers when the `value` of the model changes, so the target and
   * the input element should be updated
   * @param {Object} e  Event
   * @param {Mixed} val  Value
   * @param {Object} opt  Options
   * */
  modelValueChanged: function modelValueChanged(e, val) {
    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var em = this.config.em;
    var model = this.model;
    var value = model.getFullValue();
    var target = this.getTarget();
    var prop = model.get('property');
    var onChange = this.onChange; // Avoid element update if the change comes from it

    if (!opt.fromInput) {
      this.setValue(value);
    } // Check if component is allowed to be styled


    if (!target || !this.isTargetStylable() || !this.isComponentStylable()) {
      return;
    } // Avoid target update if the changes comes from it


    if (!opt.fromTarget) {
      // The onChange is used by Composite/Stack properties, so I'd avoid sending
      // it back if the change comes from one of those
      if (onChange && !opt.fromParent) {
        onChange(target, this, opt);
      } else {
        this.updateTargetStyle(value, null, opt);
      }
    }

    var component = em && em.getSelected();

    if (em && component) {
      em.trigger('component:update', component);
      em.trigger('component:styleUpdate', component, prop);
      em.trigger("component:styleUpdate:".concat(prop), component);
    }
  },

  /**
   * Update target style
   * @param  {string} value
   * @param  {string} name
   * @param  {Object} opts
   */
  updateTargetStyle: function updateTargetStyle(value) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var property = name || this.model.get('property');
    var target = this.getTarget();
    var style = target.getStyle();

    if (value) {
      style[property] = value;
    } else {
      delete style[property];
    }

    target.setStyle(style, opts); // Helper is used by `states` like ':hover' to show its preview

    var helper = this.getHelperModel();
    helper && helper.setStyle(style, opts);
  },

  /**
   * Check if target is stylable with this property
   * The target could be the Component as the CSS Rule
   * @return {Boolean}
   */
  isTargetStylable: function isTargetStylable(target) {
    var trg = target || this.getTarget();
    var model = this.model;
    var id = model.get('id');
    var property = model.get('property');
    var toRequire = model.get('toRequire');
    var unstylable = trg.get('unstylable');
    var stylableReq = trg.get('stylable-require');
    var requires = model.get('requires');
    var requiresParent = model.get('requiresParent');
    var sectors = this.sector ? this.sector.collection : null;
    var selected = this.em ? this.em.getSelected() : null;
    var stylable = trg.get('stylable'); // Stylable could also be an array indicating with which property
    // the target could be styled

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(stylable)) {
      stylable = stylable.indexOf(property) >= 0;
    } // Check if the property was signed as unstylable


    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(unstylable)) {
      stylable = unstylable.indexOf(property) < 0;
    } // Check if the property is available only if requested


    if (toRequire) {
      stylable = !target || stylableReq && (stylableReq.indexOf(id) >= 0 || stylableReq.indexOf(property) >= 0);
    } // Check if the property is available based on other property's values


    if (sectors && requires) {
      var properties = Object.keys(requires);
      sectors.each(function (sector) {
        sector.get('properties').each(function (model) {
          if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["includes"])(properties, model.id)) {
            var values = requires[model.id];
            stylable = stylable && Object(underscore__WEBPACK_IMPORTED_MODULE_2__["includes"])(values, model.get('value'));
          }
        });
      });
    } // Check if the property is available based on parent's property values


    if (requiresParent) {
      var parent = selected && selected.parent();
      var parentEl = parent && parent.getEl();

      if (parentEl) {
        var styles = window.getComputedStyle(parentEl);
        Object(underscore__WEBPACK_IMPORTED_MODULE_2__["each"])(requiresParent, function (values, property) {
          stylable = stylable && styles[property] && Object(underscore__WEBPACK_IMPORTED_MODULE_2__["includes"])(values, styles[property]);
        });
      } else {
        stylable = false;
      }
    }

    return stylable;
  },

  /**
   * Check if the selected component is stylable with this property
   * The target could be the Component as the CSS Rule
   * @return {Boolean}
   */
  isComponentStylable: function isComponentStylable() {
    var em = this.em;
    var component = em && em.getSelected();

    if (!component) {
      return true;
    }

    return this.isTargetStylable(component);
  },

  /**
   * Passed a raw value you have to update the input element, generally
   * is the value fetched from targets, so you can receive values with
   * functions, units, etc. (eg. `rotateY(45deg)`)
   * get also
   * @param {string} value
   * @private
   */
  setRawValue: function setRawValue(value) {
    this.setValue(this.model.parseValue(value));
  },

  /**
   * Update the element input.
   * Usually the value is a result of `model.getFullValue()`
   * @param {String} value The value from the model
   * */
  setValue: function setValue(value) {
    var model = this.model;
    var val = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value) ? model.getDefaultValue() : value;
    var input = this.getInputEl();
    input && (input.value = val);
  },
  getInputEl: function getInputEl() {
    if (!this.input) {
      this.input = this.el.querySelector('input');
    }

    return this.input;
  },
  updateVisibility: function updateVisibility() {
    this.el.style.display = this.model.get('visible') ? 'block' : 'none';
  },
  show: function show() {
    this.model.set('visible', 1);
  },
  hide: function hide() {
    this.model.set('visible', 0);
  },

  /**
   * Clean input
   * */
  cleanValue: function cleanValue() {
    this.setValue('');
  },
  clearCached: function clearCached() {
    this.clearEl = null;
    this.input = null;
    this.$input = null;
  },
  render: function render() {
    this.clearCached();
    var pfx = this.pfx;
    var model = this.model;
    var el = this.el;
    var property = model.get('property');
    var full = model.get('full');
    var className = "".concat(pfx, "property");
    el.innerHTML = this.template(model);
    el.className = "".concat(className, " ").concat(pfx).concat(model.get('type'), " ").concat(className, "__").concat(property);
    el.className += full ? " ".concat(className, "--full") : '';
    this.updateStatus();
    var onRender = this.onRender && this.onRender.bind(this);
    onRender && onRender();
    this.setValue(model.get('value'), {
      targetUpdate: 1
    });
  }
}));

/***/ }),

/***/ "./src/style_manager/view/SectorView.js":
/*!**********************************************!*\
  !*** ./src/style_manager/view/SectorView.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _PropertiesView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PropertiesView */ "./src/style_manager/view/PropertiesView.js");



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({
  template: Object(underscore__WEBPACK_IMPORTED_MODULE_1__["template"])("\n  <div class=\"<%= pfx %>title\" data-sector-title>\n    <i id=\"<%= pfx %>caret\" class=\"fa\"></i>\n    <%= label %>\n  </div>"),
  events: {
    'click [data-sector-title]': 'toggle'
  },
  initialize: function initialize(o) {
    this.config = o.config || {};
    this.pfx = this.config.stylePrefix || '';
    this.target = o.target || {};
    this.propTarget = o.propTarget || {};
    this.caretR = 'fa-caret-right';
    this.caretD = 'fa-caret-down';
    var model = this.model;
    this.listenTo(model, 'change:open', this.updateOpen);
    this.listenTo(model, 'updateVisibility', this.updateVisibility);
    this.listenTo(model, 'destroy remove', this.remove);
  },

  /**
   * If all properties are hidden this will hide the sector
   */
  updateVisibility: function updateVisibility() {
    var show;
    this.model.get('properties').each(function (prop) {
      if (prop.get('visible')) {
        show = 1;
      }
    });
    this.el.style.display = show ? 'block' : 'none';
  },

  /**
   * Update visibility
   */
  updateOpen: function updateOpen() {
    if (this.model.get('open')) this.show();else this.hide();
  },

  /**
   * Show the content of the sector
   * */
  show: function show() {
    this.$el.addClass(this.pfx + 'open');
    this.getPropertiesEl().style.display = '';
    this.$caret.removeClass(this.caretR).addClass(this.caretD);
  },

  /**
   * Hide the content of the sector
   * */
  hide: function hide() {
    this.$el.removeClass(this.pfx + 'open');
    this.getPropertiesEl().style.display = 'none';
    this.$caret.removeClass(this.caretD).addClass(this.caretR);
  },
  getPropertiesEl: function getPropertiesEl() {
    return this.$el.find(".".concat(this.pfx, "properties")).get(0);
  },

  /**
   * Toggle visibility
   * */
  toggle: function toggle(e) {
    var v = this.model.get('open') ? 0 : 1;
    this.model.set('open', v);
  },
  render: function render() {
    var pfx = this.pfx,
        model = this.model;
    var id = model.attributes.id;
    this.$el.html(this.template({
      pfx: pfx,
      label: model.get('name')
    }));
    this.$caret = this.$el.find("#".concat(pfx, "caret"));
    this.renderProperties();
    this.$el.attr('class', "".concat(pfx, "sector ").concat(pfx, "sector__").concat(id, " no-select"));
    this.updateOpen();
    return this;
  },
  renderProperties: function renderProperties() {
    var objs = this.model.get('properties');

    if (objs) {
      var view = new _PropertiesView__WEBPACK_IMPORTED_MODULE_2__["default"]({
        collection: objs,
        target: this.target,
        propTarget: this.propTarget,
        config: this.config
      });
      this.$el.append(view.render().el);
    }
  }
}));

/***/ }),

/***/ "./src/style_manager/view/SectorsView.js":
/*!***********************************************!*\
  !*** ./src/style_manager/view/SectorsView.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var utils_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/dom */ "./src/utils/dom.js");
/* harmony import */ var _SectorView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SectorView */ "./src/style_manager/view/SectorView.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var config = o.config || {};
    this.pfx = config.stylePrefix || '';
    this.ppfx = config.pStylePrefix || '';
    this.target = o.target || {};
    this.config = config; // The target that will emit events for properties

    var target = {};
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["extend"])(target, backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Events);
    var body = document.body;
    var dummy = document.createElement("el-".concat(new Date().getTime()));
    body.appendChild(dummy);
    target.computedDefault = _objectSpread({}, window.getComputedStyle(dummy));
    body.removeChild(dummy);
    this.propTarget = target;
    var coll = this.collection;
    var events = 'component:toggled component:update:classes component:update:state change:device';
    this.listenTo(coll, 'add', this.addTo);
    this.listenTo(coll, 'reset', this.render);
    this.listenTo(this.target, events, this.targetUpdated);
  },

  /**
   * Add to collection
   * @param {Object} model Model
   * @return {Object}
   * @private
   * */
  addTo: function addTo(model, coll) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.addToCollection(model, null, opts);
  },

  /**
   * Fired when target is updated
   * @private
   */
  targetUpdated: function targetUpdated() {
    var em = this.target;
    var pt = this.propTarget;
    var model = em.getSelected();
    if (!model) return;
    var config = em.get('Config');
    var state = !config.devicePreviewMode ? model.get('state') : '';
    var el = model.getEl();
    pt.helper = null; // Create computed style container

    if (el && Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["isTaggableNode"])(el)) {
      var stateStr = state ? ":".concat(state) : null;
      pt.computed = window.getComputedStyle(el, stateStr);
    } // Create a new rule for the state as a helper


    var appendStateRule = function appendStateRule() {
      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var cc = em.get('CssComposer');
      var helperCls = 'hc-state';
      var rules = cc.getAll();
      var helperRule = cc.getClassRule(helperCls);

      if (!helperRule) {
        helperRule = cc.setClassRule(helperCls);
      } else {
        // I will make it last again, otherwise it could be overridden
        rules.remove(helperRule);
        rules.add(helperRule);
      }

      helperRule.set('important', 1);
      helperRule.setStyle(style);
      pt.helper = helperRule;
    };

    model = em.get('StyleManager').getModelToStyle(model);
    state && appendStateRule(model.getStyle());
    pt.model = model;
    pt.trigger('update');
  },

  /**
   * Select different target for the Style Manager.
   * It could be a Component, CSSRule, or a string of any CSS selector
   * @param {Component|CSSRule|String} target
   * @return {Styleable} A Component or CSSRule
   */
  setTarget: function setTarget(target) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var em = this.target;
    var config = em.get('Config');
    var targetIsClass = opts.targetIsClass,
        stylable = opts.stylable;
    var model = target;

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(target)) {
      var rule;
      var rules = em.get('CssComposer').getAll();

      if (targetIsClass) {
        rule = rules.filter(function (rule) {
          return rule.get('selectors').getFullString() === target;
        })[0];
      }

      if (!rule) {
        rule = rules.filter(function (rule) {
          return rule.get('selectorsAdd') === target;
        })[0];
      }

      if (!rule) {
        rule = rules.add({
          selectors: [],
          selectorsAdd: target
        });
      }

      stylable && rule.set({
        stylable: stylable
      });
      model = rule;
    }

    var state = !config.devicePreviewMode ? model.get('state') : '';
    var pt = this.propTarget;
    pt.model = model;
    pt.trigger('styleManager:update', model);
    return model;
  },

  /**
   * Add new object to collection
   * @param {Object} model Model
   * @param  {Object} fragmentEl collection
   * @return {Object} Object created
   * @private
   * */
  addToCollection: function addToCollection(model, fragmentEl) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var pfx = this.pfx,
        target = this.target,
        propTarget = this.propTarget,
        config = this.config,
        el = this.el;
    var appendTo = fragmentEl || el;
    var rendered = new _SectorView__WEBPACK_IMPORTED_MODULE_5__["default"]({
      model: model,
      id: "".concat(pfx).concat(model.get('id')),
      name: model.get('name'),
      properties: model.get('properties'),
      target: target,
      propTarget: propTarget,
      config: config
    }).render().el;
    Object(utils_dom__WEBPACK_IMPORTED_MODULE_4__["appendAtIndex"])(appendTo, rendered, opts.at);
    return rendered;
  },
  render: function render() {
    var _this = this;

    var frag = document.createDocumentFragment();
    var $el = this.$el;
    var pfx = this.pfx;
    var ppfx = this.ppfx;
    $el.empty();
    this.collection.each(function (model) {
      return _this.addToCollection(model, frag);
    });
    $el.append(frag);
    $el.addClass("".concat(pfx, "sectors ").concat(ppfx, "one-bg ").concat(ppfx, "two-color"));
    return this;
  }
}));

/***/ }),

/***/ "./src/trait_manager/config/config.js":
/*!********************************************!*\
  !*** ./src/trait_manager/config/config.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  stylePrefix: 'trt-',
  // Specify the element to use as a container, string (query) or HTMLElement
  // With the empty value, nothing will be rendered
  appendTo: '',
  labelContainer: 'Component settings',
  // Placeholder label for text input types
  labelPlhText: 'eg. Text here',
  // Placeholder label for href input
  labelPlhHref: 'eg. https://google.com',
  // Default options for the target input
  optionsTarget: [{
    value: '',
    name: 'This window'
  }, {
    value: '_blank',
    name: 'New window'
  }],
  // Text to show in case no element selected
  textNoElement: 'Select an element before using Trait Manager'
});

/***/ }),

/***/ "./src/trait_manager/index.js":
/*!************************************!*\
  !*** ./src/trait_manager/index.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/config */ "./src/trait_manager/config/config.js");
/* harmony import */ var _view_TraitsView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view/TraitsView */ "./src/trait_manager/view/TraitsView.js");



/* harmony default export */ __webpack_exports__["default"] = (function () {
  var c = {};
  var TraitsViewer;
  return {
    TraitsView: _view_TraitsView__WEBPACK_IMPORTED_MODULE_2__["default"],

    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'TraitManager',

    /**
     * Get configuration object
     * @return {Object}
     * @private
     */
    getConfig: function getConfig() {
      return c;
    },

    /**
     * Initialize module. Automatically called with a new instance of the editor
     * @param {Object} config Configurations
     */
    init: function init() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      c = config;
      Object(underscore__WEBPACK_IMPORTED_MODULE_0__["defaults"])(c, _config_config__WEBPACK_IMPORTED_MODULE_1__["default"]);
      var ppfx = c.pStylePrefix;
      ppfx && (c.stylePrefix = "".concat(ppfx).concat(c.stylePrefix));
      TraitsViewer = new _view_TraitsView__WEBPACK_IMPORTED_MODULE_2__["default"]({
        collection: [],
        editor: c.em,
        config: c
      });
      return this;
    },
    postRender: function postRender() {
      var elTo = this.getConfig().appendTo;

      if (elTo) {
        var el = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isElement"])(elTo) ? elTo : document.querySelector(elTo);
        el.appendChild(this.render());
      }
    },

    /**
     *
     * Get Traits viewer
     * @private
     */
    getTraitsViewer: function getTraitsViewer() {
      return TraitsViewer;
    },

    /**
     * Add new trait type
     * @param {string} name Type name
     * @param {Object} methods Object representing the trait
     */
    addType: function addType(name, trait) {
      var itemView = TraitsViewer.itemView;
      TraitsViewer.itemsView[name] = itemView.extend(trait);
    },

    /**
     * Get trait type
     * @param {string} name Type name
     * @return {Object}
     */
    getType: function getType(name) {
      return TraitsViewer.itemsView[name];
    },
    render: function render() {
      return TraitsViewer.render().el;
    }
  };
});

/***/ }),

/***/ "./src/trait_manager/model/Trait.js":
/*!******************************************!*\
  !*** ./src/trait_manager/model/Trait.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Model.extend({
  defaults: {
    type: 'text',
    // text, number, range, select
    label: '',
    name: '',
    min: '',
    max: '',
    unit: '',
    step: 1,
    value: '',
    target: '',
    default: '',
    placeholder: '',
    changeProp: 0,
    options: []
  },
  initialize: function initialize() {
    var target = this.get('target');
    var name = this.get('name');
    var changeProp = this.get('changeProp');

    if (target) {
      this.target = target;
      this.unset('target');
      var targetEvent = changeProp ? "change:".concat(name) : "change:attributes:".concat(name);
      this.listenTo(target, targetEvent, this.targetUpdated);
    }
  },

  /**
   * Return all the propeties
   * @returns {Object}
   */
  props: function props() {
    return this.attributes;
  },
  targetUpdated: function targetUpdated() {
    var value = this.getTargetValue();
    this.set({
      value: value
    }, {
      fromTarget: 1
    });
  },
  getTargetValue: function getTargetValue() {
    var name = this.get('name');
    var target = this.target;
    var value;

    if (this.get('changeProp')) {
      value = target.get(name);
    } else {
      value = target.getAttributes()[name];
    }

    return !Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value) ? value : '';
  },
  setTargetValue: function setTargetValue(value) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var target = this.target;
    var name = this.get('name');
    if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value)) return;

    if (this.get('changeProp')) {
      target.set(name, value, opts);
    } else {
      var attrs = _objectSpread({}, target.get('attributes'));

      attrs[name] = value;
      target.set('attributes', attrs, opts);
    }
  },
  setValueFromInput: function setValueFromInput(value) {
    var final = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var toSet = {
      value: value
    };
    this.set(toSet, _objectSpread({}, opts, {
      avoidStore: 1
    })); // Have to trigger the change

    if (final) {
      this.set('value', '', opts);
      this.set(toSet, opts);
    }
  },

  /**
   * Get the initial value of the trait
   * @return {string}
   */
  getInitValue: function getInitValue() {
    var target = this.target;
    var name = this.get('name');
    var value;

    if (target) {
      var attrs = target.get('attributes');
      value = this.get('changeProp') ? target.get(name) : attrs[name];
    }

    return value || this.get('value') || this.get('default');
  }
}));

/***/ }),

/***/ "./src/trait_manager/model/TraitFactory.js":
/*!*************************************************!*\
  !*** ./src/trait_manager/model/TraitFactory.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    /**
     * Build props object by their name
     * @param  {Array<string>|string} props Array of properties name
     * @return {Array<Object>}
     */
    build: function build(props) {
      var objs = [];
      if (typeof props === 'string') props = [props];

      for (var i = 0; i < props.length; i++) {
        var obj = {};
        var prop = props[i];
        obj.name = prop; // Define type

        switch (prop) {
          case 'target':
            obj.type = 'select';
            break;
        } // Define placeholder


        switch (prop) {
          case 'title':
          case 'alt':
          case 'id':
            obj.placeholder = config.labelPlhText;
            break;

          case 'href':
            obj.placeholder = config.labelPlhHref;
            break;
        } // Define options


        switch (prop) {
          case 'target':
            obj.options = config.optionsTarget;
            break;
        }

        objs.push(obj);
      }

      return objs;
    }
  };
});

/***/ }),

/***/ "./src/trait_manager/model/Traits.js":
/*!*******************************************!*\
  !*** ./src/trait_manager/model/Traits.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Trait__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Trait */ "./src/trait_manager/model/Trait.js");
/* harmony import */ var _TraitFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TraitFactory */ "./src/trait_manager/model/TraitFactory.js");




/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.extend({
  model: _Trait__WEBPACK_IMPORTED_MODULE_2__["default"],
  initialize: function initialize(coll) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.em = options.em || '';
    this.listenTo(this, 'add', this.handleAdd);
    this.listenTo(this, 'reset', this.handleReset);
  },
  handleReset: function handleReset(coll) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$previousModels = _ref.previousModels,
        previousModels = _ref$previousModels === void 0 ? [] : _ref$previousModels;

    previousModels.forEach(function (model) {
      return model.trigger('remove');
    });
  },
  handleAdd: function handleAdd(model) {
    var target = this.target;

    if (target) {
      model.target = target;
    }
  },
  setTarget: function setTarget(target) {
    this.target = target;
  },
  add: function add(models, opt) {
    var em = this.em; // Use TraitFactory if necessary

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(models) || Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isArray"])(models)) {
      var tm = em && em.get && em.get('TraitManager');
      var tmOpts = tm && tm.getConfig();
      var tf = Object(_TraitFactory__WEBPACK_IMPORTED_MODULE_3__["default"])(tmOpts);

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(models)) {
        models = [models];
      }

      for (var i = 0, len = models.length; i < len; i++) {
        var str = models[i];
        var model = Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(str) ? tf.build(str)[0] : str;
        model.target = this.target;
        models[i] = model;
      }
    }

    return backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Collection.prototype.add.apply(this, [models, opt]);
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitButtonView.js":
/*!***************************************************!*\
  !*** ./src/trait_manager/view/TraitButtonView.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _TraitView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TraitView */ "./src/trait_manager/view/TraitView.js");


/* harmony default export */ __webpack_exports__["default"] = (_TraitView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  events: {
    'click button': 'handleClick'
  },
  templateInput: '',
  handleClick: function handleClick() {
    var model = this.model,
        em = this.em;
    var command = model.get('command');

    if (command) {
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isString"])(command)) {
        em.get('Commands').run(command);
      } else {
        command(em.get('Editor'), model);
      }
    }
  },
  renderLabel: function renderLabel() {
    if (this.model.get('label')) {
      _TraitView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.renderLabel.apply(this, arguments);
    }
  },
  getInputEl: function getInputEl() {
    var model = this.model,
        ppfx = this.ppfx;

    var _model$props = model.props(),
        labelButton = _model$props.labelButton,
        text = _model$props.text,
        full = _model$props.full;

    var label = labelButton || text;
    var className = "".concat(ppfx, "btn");
    var input = "<button type=\"button\" class=\"".concat(className, "-prim").concat(full ? " ".concat(className, "--full") : '', "\">").concat(label, "</button>");
    return input;
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitCheckboxView.js":
/*!*****************************************************!*\
  !*** ./src/trait_manager/view/TraitCheckboxView.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _TraitView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TraitView */ "./src/trait_manager/view/TraitView.js");


/* harmony default export */ __webpack_exports__["default"] = (_TraitView__WEBPACK_IMPORTED_MODULE_1__["default"].extend({
  appendInput: 0,
  templateInput: function templateInput() {
    var ppfx = this.ppfx,
        clsField = this.clsField;
    return "<label class=\"".concat(clsField, "\" data-input>\n    <i class=\"").concat(ppfx, "chk-icon\"></i>\n  </label>");
  },

  /**
   * Fires when the input is changed
   * @private
   */
  onChange: function onChange() {
    var value = this.getInputElem().checked;
    this.model.set('value', this.getCheckedValue(value));
  },
  getCheckedValue: function getCheckedValue(checked) {
    var result = checked;
    var _this$model$attribute = this.model.attributes,
        valueTrue = _this$model$attribute.valueTrue,
        valueFalse = _this$model$attribute.valueFalse;

    if (result && !Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(valueTrue)) {
      result = valueTrue;
    }

    if (!result && !Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(valueFalse)) {
      result = valueFalse;
    }

    return result;
  },

  /**
   * Returns input element
   * @return {HTMLElement}
   * @private
   */
  getInputEl: function getInputEl() {
    var toInit = !this.$input;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var el = _TraitView__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.getInputEl.apply(this, args);

    if (toInit) {
      var checked, targetValue;
      var model = this.model,
          target = this.target;
      var _model$attributes = model.attributes,
          valueTrue = _model$attributes.valueTrue,
          valueFalse = _model$attributes.valueFalse;
      var name = model.get('name');

      if (model.get('changeProp')) {
        checked = target.get(name);
        targetValue = checked;
      } else {
        targetValue = target.get('attributes')[name];
        checked = targetValue || targetValue === '' ? !0 : !1;
      }

      if (!Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(valueFalse) && targetValue === valueFalse) {
        checked = !1;
      }

      el.checked = checked;
    }

    return el;
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitColorView.js":
/*!**************************************************!*\
  !*** ./src/trait_manager/view/TraitColorView.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _TraitView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TraitView */ "./src/trait_manager/view/TraitView.js");
/* harmony import */ var domain_abstract_ui_InputColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! domain_abstract/ui/InputColor */ "./src/domain_abstract/ui/InputColor.js");


/* harmony default export */ __webpack_exports__["default"] = (_TraitView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  templateInput: '',

  /**
   * Returns input element
   * @return {HTMLElement}
   * @private
   */
  getInputEl: function getInputEl() {
    if (!this.input) {
      var model = this.model;
      var value = this.getModelValue();
      var inputColor = new domain_abstract_ui_InputColor__WEBPACK_IMPORTED_MODULE_1__["default"]({
        model: model,
        target: this.config.em,
        contClass: this.ppfx + 'field-color',
        ppfx: this.ppfx
      });
      var input = inputColor.render();
      input.setValue(value, {
        fromTarget: 1
      });
      this.input = input.el;
    }

    return this.input;
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitNumberView.js":
/*!***************************************************!*\
  !*** ./src/trait_manager/view/TraitNumberView.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _TraitView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TraitView */ "./src/trait_manager/view/TraitView.js");
/* harmony import */ var domain_abstract_ui_InputNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! domain_abstract/ui/InputNumber */ "./src/domain_abstract/ui/InputNumber.js");


/* harmony default export */ __webpack_exports__["default"] = (_TraitView__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  getValueForTarget: function getValueForTarget() {
    var model = this.model;
    var _model$attributes = model.attributes,
        value = _model$attributes.value,
        unit = _model$attributes.unit;
    return value ? value + unit : '';
  },

  /**
   * Returns input element
   * @return {HTMLElement}
   * @private
   */
  getInputEl: function getInputEl() {
    if (!this.input) {
      var value = this.getModelValue();
      var inputNumber = new domain_abstract_ui_InputNumber__WEBPACK_IMPORTED_MODULE_1__["default"]({
        contClass: this.ppfx + 'field-int',
        model: this.model,
        ppfx: this.ppfx
      });
      this.input = inputNumber.render();
      this.$input = this.input.inputEl;
      this.$unit = this.input.unitEl;
      this.model.set('value', value);
      this.$input.val(value);
      this.input = inputNumber.el;
    }

    return this.input;
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitSelectView.js":
/*!***************************************************!*\
  !*** ./src/trait_manager/view/TraitSelectView.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _TraitView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TraitView */ "./src/trait_manager/view/TraitView.js");



var $ = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (_TraitView__WEBPACK_IMPORTED_MODULE_2__["default"].extend({
  init: function init() {
    this.listenTo(this.model, 'change:options', this.rerender);
  },
  templateInput: function templateInput() {
    var ppfx = this.ppfx,
        clsField = this.clsField;
    return "<div class=\"".concat(clsField, "\">\n      <div data-input></div>\n      <div class=\"").concat(ppfx, "sel-arrow\">\n        <div class=\"").concat(ppfx, "d-s-arrow\"></div>\n      </div>\n    </div>");
  },

  /**
   * Returns input element
   * @return {HTMLElement}
   * @private
   */
  getInputEl: function getInputEl() {
    if (!this.$input) {
      var model = this.model;
      var opts = model.get('options') || [];
      var input = '<select>';
      opts.forEach(function (el) {
        var attrs = '';
        var name, value, style;

        if (Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isString"])(el)) {
          name = el;
          value = el;
        } else {
          name = el.name || el.label || el.value;
          value = "".concat(Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(el.value) ? el.id : el.value).replace(/"/g, '&quot;');
          style = el.style ? el.style.replace(/"/g, '&quot;') : '';
          attrs += style ? " style=\"".concat(style, "\"") : '';
        }

        input += "<option value=\"".concat(value, "\"").concat(attrs, ">").concat(name, "</option>");
      });
      input += '</select>';
      this.$input = $(input);
      var val = model.getTargetValue() || model.get('value');
      !Object(underscore__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(val) && this.$input.val(val);
    }

    return this.$input.get(0);
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitView.js":
/*!*********************************************!*\
  !*** ./src/trait_manager/view/TraitView.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var $ = backbone__WEBPACK_IMPORTED_MODULE_2___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_2___default.a.View.extend({
  events: {},
  eventCapture: ['change'],
  appendInput: 1,
  attributes: function attributes() {
    return this.model.get('attributes');
  },
  templateLabel: function templateLabel() {
    var ppfx = this.ppfx;
    var label = this.getLabel();
    return "<div class=\"".concat(ppfx, "label\" title=\"").concat(label, "\">").concat(label, "</div>");
  },
  templateInput: function templateInput() {
    var clsField = this.clsField;
    return "<div class=\"".concat(clsField, "\" data-input></div>");
  },
  initialize: function initialize() {
    var _this = this;

    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _o$config = o.config,
        config = _o$config === void 0 ? {} : _o$config;
    var model = this.model,
        eventCapture = this.eventCapture;
    var target = model.target;
    var type = model.attributes.type;
    this.config = config;
    this.em = config.em;
    this.pfx = config.stylePrefix || '';
    this.ppfx = config.pStylePrefix || '';
    this.target = target;
    var ppfx = this.ppfx;
    this.clsField = "".concat(ppfx, "field ").concat(ppfx, "field-").concat(type);
    [['change:value', this.onValueChange], ['remove', this.removeView]].forEach(function (_ref) {
      var _ref2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_ref, 2),
          event = _ref2[0],
          clb = _ref2[1];

      model.off(event, clb);

      _this.listenTo(model, event, clb);
    });
    model.view = this;
    this.listenTo(model, 'change:label', this.render);
    this.listenTo(model, 'change:placeholder', this.rerender);
    eventCapture.forEach(function (event) {
      return _this.events[event] = 'onChange';
    });
    this.delegateEvents();
    this.init();
  },
  getClbOpts: function getClbOpts() {
    return {
      component: this.target,
      trait: this.model,
      elInput: this.getInputElem()
    };
  },
  removeView: function removeView() {
    this.remove();
    this.removed();
  },
  init: function init() {},
  removed: function removed() {},
  onRender: function onRender() {},
  onUpdate: function onUpdate() {},
  onEvent: function onEvent() {},

  /**
   * Fires when the input is changed
   * @private
   */
  onChange: function onChange(event) {
    var el = this.getInputElem();

    if (el && !Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(el.value)) {
      this.model.set('value', el.value);
    }

    this.onEvent(_objectSpread({}, this.getClbOpts(), {
      event: event
    }));
  },
  getValueForTarget: function getValueForTarget() {
    return this.model.get('value');
  },
  setInputValue: function setInputValue(value) {
    var el = this.getInputElem();
    el && (el.value = value);
  },

  /**
   * On change callback
   * @private
   */
  onValueChange: function onValueChange(model, value) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (opts.fromTarget) {
      this.setInputValue(model.get('value'));
      this.postUpdate();
    } else {
      var val = this.getValueForTarget();
      model.setTargetValue(val, opts);
    }
  },

  /**
   * Render label
   * @private
   */
  renderLabel: function renderLabel() {
    var $el = this.$el,
        target = this.target;
    var label = this.getLabel();
    var tpl = this.templateLabel(target);

    if (this.createLabel) {
      tpl = this.createLabel({
        label: label,
        component: target,
        trait: this
      }) || '';
    }

    $el.find('[data-label]').append(tpl);
  },

  /**
   * Returns label for the input
   * @return {string}
   * @private
   */
  getLabel: function getLabel() {
    var _this$model$attribute = this.model.attributes,
        label = _this$model$attribute.label,
        name = _this$model$attribute.name;
    return Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["capitalize"])(label || name).replace(/-/g, ' ');
  },

  /**
   * Returns current target component
   */
  getComponent: function getComponent() {
    return this.target;
  },

  /**
   * Returns input element
   * @return {HTMLElement}
   * @private
   */
  getInputEl: function getInputEl() {
    if (!this.$input) {
      var md = this.model;
      var plh = md.get('placeholder') || md.get('default') || '';
      var type = md.get('type') || 'text';
      var min = md.get('min');
      var max = md.get('max');
      var value = this.getModelValue();
      var input = $("<input type=\"".concat(type, "\" placeholder=\"").concat(plh, "\">"));

      if (!Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(value)) {
        md.set({
          value: value
        }, {
          silent: true
        });
        input.prop('value', value);
      }

      if (min) {
        input.prop('min', min);
      }

      if (max) {
        input.prop('max', max);
      }

      this.$input = input;
    }

    return this.$input.get(0);
  },
  getInputElem: function getInputElem() {
    var input = this.input,
        $input = this.$input;
    return input || $input && $input.get && $input.get(0) || this.getElInput();
  },
  getModelValue: function getModelValue() {
    var value;
    var model = this.model;
    var target = this.target;
    var name = model.get('name');

    if (model.get('changeProp')) {
      value = target.get(name);
    } else {
      var attrs = target.get('attributes');
      value = model.get('value') || attrs[name];
    }

    return !Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(value) ? value : '';
  },
  getElInput: function getElInput() {
    return this.elInput;
  },

  /**
   * Renders input
   * @private
   * */
  renderField: function renderField() {
    var $el = this.$el,
        appendInput = this.appendInput,
        model = this.model;
    var inputs = $el.find('[data-input]');
    var el = inputs[inputs.length - 1];
    var tpl = model.el;

    if (!tpl) {
      tpl = this.createInput ? this.createInput(this.getClbOpts()) : this.getInputEl();
    }

    if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isString"])(tpl)) {
      el.innerHTML = tpl;
      this.elInput = el.firstChild;
    } else {
      appendInput ? el.appendChild(tpl) : el.insertBefore(tpl, el.firstChild);
      this.elInput = tpl;
    }

    model.el = this.elInput;
  },
  hasLabel: function hasLabel() {
    var label = this.model.attributes.label;
    return !this.noLabel && label !== false;
  },
  rerender: function rerender() {
    this.model.el = null;
    this.render();
  },
  postUpdate: function postUpdate() {
    this.onUpdate(this.getClbOpts());
  },
  render: function render() {
    var $el = this.$el,
        pfx = this.pfx,
        ppfx = this.ppfx,
        model = this.model;
    var type = model.attributes.type;
    var hasLabel = this.hasLabel && this.hasLabel();
    var cls = "".concat(pfx, "trait");
    this.$input = null;
    var tmpl = "<div class=\"".concat(cls, "\">\n      ").concat(hasLabel ? "<div class=\"".concat(ppfx, "label-wrp\" data-label></div>") : '', "\n      <div class=\"").concat(ppfx, "field-wrp ").concat(ppfx, "field-wrp--").concat(type, "\" data-input>\n        ").concat(this.templateInput ? Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(this.templateInput) ? this.templateInput(this.getClbOpts()) : this.templateInput : '', "\n      </div>\n    </div>");
    $el.empty().append(tmpl);
    hasLabel && this.renderLabel();
    this.renderField();
    this.el.className = "".concat(cls, "__wrp");
    this.postUpdate();
    this.onRender(this.getClbOpts());
    return this;
  }
}));

/***/ }),

/***/ "./src/trait_manager/view/TraitsView.js":
/*!**********************************************!*\
  !*** ./src/trait_manager/view/TraitsView.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var domain_abstract_view_DomainViews__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domain_abstract/view/DomainViews */ "./src/domain_abstract/view/DomainViews.js");
/* harmony import */ var _TraitView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TraitView */ "./src/trait_manager/view/TraitView.js");
/* harmony import */ var _TraitSelectView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TraitSelectView */ "./src/trait_manager/view/TraitSelectView.js");
/* harmony import */ var _TraitCheckboxView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TraitCheckboxView */ "./src/trait_manager/view/TraitCheckboxView.js");
/* harmony import */ var _TraitNumberView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TraitNumberView */ "./src/trait_manager/view/TraitNumberView.js");
/* harmony import */ var _TraitColorView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TraitColorView */ "./src/trait_manager/view/TraitColorView.js");
/* harmony import */ var _TraitButtonView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TraitButtonView */ "./src/trait_manager/view/TraitButtonView.js");







/* harmony default export */ __webpack_exports__["default"] = (domain_abstract_view_DomainViews__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  ns: 'Traits',
  itemView: _TraitView__WEBPACK_IMPORTED_MODULE_1__["default"],
  reuseView: 1,
  itemsView: {
    text: _TraitView__WEBPACK_IMPORTED_MODULE_1__["default"],
    number: _TraitNumberView__WEBPACK_IMPORTED_MODULE_4__["default"],
    select: _TraitSelectView__WEBPACK_IMPORTED_MODULE_2__["default"],
    checkbox: _TraitCheckboxView__WEBPACK_IMPORTED_MODULE_3__["default"],
    color: _TraitColorView__WEBPACK_IMPORTED_MODULE_5__["default"],
    button: _TraitButtonView__WEBPACK_IMPORTED_MODULE_6__["default"]
  },
  initialize: function initialize() {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var config = o.config || {};
    this.config = config;
    this.em = o.editor;
    this.pfx = config.stylePrefix || '';
    this.ppfx = config.pStylePrefix || '';
    this.className = this.pfx + 'traits';
    var toListen = 'component:toggled';
    this.listenTo(this.em, toListen, this.updatedCollection);
    this.updatedCollection();
  },

  /**
   * Update view collection
   * @private
   */
  updatedCollection: function updatedCollection() {
    var ppfx = this.ppfx;
    var comp = this.em.getSelected();
    this.el.className = "".concat(this.className, " ").concat(ppfx, "one-bg ").concat(ppfx, "two-color");
    this.collection = comp ? comp.get('traits') : [];
    this.render();
  }
}));

/***/ }),

/***/ "./src/undo_manager/index.js":
/*!***********************************!*\
  !*** ./src/undo_manager/index.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone_undo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone-undo */ "./node_modules/backbone-undo/Backbone.Undo.js");
/* harmony import */ var backbone_undo__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone_undo__WEBPACK_IMPORTED_MODULE_1__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * This module allows to manage the stack of changes applied in canvas.
 * Once the editor is instantiated you can use its API. Before using these methods you should get the module from the instance
 *
 * ```js
 * const um = editor.UndoManager;
 * ```
 *
 * * [getConfig](#getconfig)
 * * [add](#add)
 * * [remove](#remove)
 * * [removeAll](#removeall)
 * * [start](#start)
 * * [stop](#stop)
 * * [undo](#undo)
 * * [undoAll](#undoall)
 * * [redo](#redo)
 * * [redoAll](#redoall)
 * * [hasUndo](#hasundo)
 * * [hasRedo](#hasredo)
 * * [getStack](#getstack)
 * * [clear](#clear)
 *
 * @module UndoManager
 */

/* harmony default export */ __webpack_exports__["default"] = (function () {
  var em;
  var um;
  var config;
  var beforeCache;
  var configDef = {};
  return {
    name: 'UndoManager',

    /**
     * Initialize module
     * @param {Object} config Configurations
     * @private
     */
    init: function init() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      config = _objectSpread({}, opts, {}, configDef);
      em = config.em;
      this.em = em;
      um = new backbone_undo__WEBPACK_IMPORTED_MODULE_1___default.a({
        track: true,
        register: []
      });
      um.changeUndoType('change', {
        condition: false
      });
      um.changeUndoType('add', {
        on: function on(model, collection) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          if (options.avoidStore) return;
          return {
            object: collection,
            before: undefined,
            after: model,
            options: _objectSpread({}, options)
          };
        }
      });
      um.changeUndoType('remove', {
        on: function on(model, collection) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          if (options.avoidStore) return;
          return {
            object: collection,
            before: model,
            after: undefined,
            options: _objectSpread({}, options)
          };
        }
      });
      var customUndoType = {
        on: function on(object, value) {
          var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          !beforeCache && (beforeCache = object.previousAttributes());

          if (opt.avoidStore) {
            return;
          } else {
            var result = {
              object: object,
              before: beforeCache,
              after: object.toJSON()
            };
            beforeCache = null;
            return result;
          }
        },
        undo: function undo(model, bf, af, opt) {
          model.set(bf);
        },
        redo: function redo(model, bf, af, opt) {
          model.set(af);
        }
      };
      var events = ['style', 'attributes', 'content', 'src'];
      events.forEach(function (ev) {
        return um.addUndoType("change:".concat(ev), customUndoType);
      });
      um.on('undo redo', function () {
        return em.trigger('component:toggled change:canvasOffset');
      });
      ['undo', 'redo'].forEach(function (ev) {
        return um.on(ev, function () {
          return em.trigger(ev);
        });
      });
      return this;
    },

    /**
     * Get module configurations
     * @return {Object} Configuration object
     * @example
     * const config = um.getConfig();
     * // { ... }
     */
    getConfig: function getConfig() {
      return config;
    },

    /**
     * Add an entity (Model/Collection) to track
     * Note: New Components and CSSRules will be added automatically
     * @param {Model|Collection} entity Entity to track
     * @return {this}
     * @example
     * um.add(someModelOrCollection);
     */
    add: function add(entity) {
      um.register(entity);
      return this;
    },

    /**
     * Remove and stop tracking the entity (Model/Collection)
     * @param {Model|Collection} entity Entity to remove
     * @return {this}
     * @example
     * um.remove(someModelOrCollection);
     */
    remove: function remove(entity) {
      um.unregister(entity);
      return this;
    },

    /**
     * Remove all entities
     * @return {this}
     * @example
     * um.removeAll();
     */
    removeAll: function removeAll() {
      um.unregisterAll();
      return this;
    },

    /**
     * Start/resume tracking changes
     * @return {this}
     * @example
     * um.start();
     */
    start: function start() {
      um.startTracking();
      return this;
    },

    /**
     * Stop tracking changes
     * @return {this}
     * @example
     * um.stop();
     */
    stop: function stop() {
      um.stopTracking();
      return this;
    },

    /**
     * Undo last change
     * @return {this}
     * @example
     * um.undo();
     */
    undo: function undo() {
      !em.isEditing() && um.undo(1);
      return this;
    },

    /**
     * Undo all changes
     * @return {this}
     * @example
     * um.undoAll();
     */
    undoAll: function undoAll() {
      um.undoAll();
      return this;
    },

    /**
     * Redo last change
     * @return {this}
     * @example
     * um.redo();
     */
    redo: function redo() {
      !em.isEditing() && um.redo(1);
      return this;
    },

    /**
     * Redo all changes
     * @return {this}
     * @example
     * um.redoAll();
     */
    redoAll: function redoAll() {
      um.redoAll();
      return this;
    },

    /**
     * Checks if exists an available undo
     * @return {Boolean}
     * @example
     * um.hasUndo();
     */
    hasUndo: function hasUndo() {
      return um.isAvailable('undo');
    },

    /**
     * Checks if exists an available redo
     * @return {Boolean}
     * @example
     * um.hasRedo();
     */
    hasRedo: function hasRedo() {
      return um.isAvailable('redo');
    },

    /**
     * Get stack of changes
     * @return {Collection}
     * @example
     * const stack = um.getStack();
     * stack.each(item => ...);
     */
    getStack: function getStack() {
      return um.stack;
    },

    /**
     * Clear the stack
     * @return {this}
     * @example
     * um.clear();
     */
    clear: function clear() {
      um.clear();
      return this;
    },
    getInstance: function getInstance() {
      return um;
    }
  };
});

/***/ }),

/***/ "./src/utils/ColorPicker.js":
/*!**********************************!*\
  !*** ./src/utils/ColorPicker.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);

// Without jquery I have to update few stuff
//
// Spectrum Colorpicker v1.8.0
// https://github.com/bgrins/spectrum
// Author: Brian Grinstead
// License: MIT
/* harmony default export */ __webpack_exports__["default"] = (function ($, undefined) {
  'use strict';

  var defaultOpts = {
    // Callbacks
    beforeShow: noop,
    move: noop,
    change: noop,
    show: noop,
    hide: noop,
    // Options
    color: false,
    flat: false,
    showInput: false,
    allowEmpty: false,
    showButtons: true,
    clickoutFiresChange: true,
    showInitial: false,
    showPalette: false,
    showPaletteOnly: false,
    hideAfterPaletteSelect: false,
    togglePaletteOnly: false,
    showSelectionPalette: true,
    localStorageKey: false,
    appendTo: 'body',
    maxSelectionSize: 7,
    cancelText: 'cancel',
    chooseText: 'choose',
    togglePaletteMoreText: 'more',
    togglePaletteLessText: 'less',
    clearText: 'Clear Color Selection',
    noColorSelectedText: 'No Color Selected',
    preferredFormat: false,
    className: '',
    // Deprecated - use containerClassName and replacerClassName instead.
    containerClassName: '',
    replacerClassName: '',
    showAlpha: false,
    theme: 'sp-light',
    palette: [['#ffffff', '#000000', '#ff0000', '#ff8000', '#ffff00', '#008000', '#0000ff', '#4b0082', '#9400d3']],
    selectionPalette: [],
    disabled: false,
    offset: null
  },
      spectrums = [],
      IE = !!/msie/i.exec(window.navigator.userAgent),
      rgbaSupport = function () {
    function contains(str, substr) {
      return !!~('' + str).indexOf(substr);
    }

    var elem = document.createElement('div');
    var style = elem.style;
    style.cssText = 'background-color:rgba(0,0,0,.5)';
    return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');
  }(),
      replaceInput = ["<div class='sp-replacer'>", "<div class='sp-preview'><div class='sp-preview-inner'></div></div>", "<div class='sp-dd'>&#9660;</div>", '</div>'].join(''),
      markup = function () {
    // IE does not support gradients with multiple stops, so we need to simulate
    //  that for the rainbow slider with 8 divs that each have a single gradient
    var gradientFix = '';

    if (IE) {
      for (var i = 1; i <= 6; i++) {
        gradientFix += "<div class='sp-" + i + "'></div>";
      }
    }

    return ["<div class='sp-container sp-hidden'>", "<div class='sp-palette-container'>", "<div class='sp-palette sp-thumb sp-cf'></div>", "<div class='sp-palette-button-container sp-cf'>", "<button type='button' class='sp-palette-toggle'></button>", '</div>', '</div>', "<div class='sp-picker-container'>", "<div class='sp-top sp-cf'>", "<div class='sp-fill'></div>", "<div class='sp-top-inner'>", "<div class='sp-color'>", "<div class='sp-sat'>", "<div class='sp-val'>", "<div class='sp-dragger'></div>", '</div>', '</div>', '</div>', "<div class='sp-clear sp-clear-display'>", '</div>', "<div class='sp-hue'>", "<div class='sp-slider'></div>", gradientFix, '</div>', '</div>', "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>", '</div>', "<div class='sp-input-container sp-cf'>", "<input class='sp-input' type='text' spellcheck='false'  />", '</div>', "<div class='sp-initial sp-thumb sp-cf'></div>", "<div class='sp-button-container sp-cf'>", "<a class='sp-cancel' href='#'></a>", "<button type='button' class='sp-choose'></button>", '</div>', '</div>', '</div>'].join('');
  }();

  function paletteTemplate(p, color, className, opts) {
    var html = [];

    for (var i = 0; i < p.length; i++) {
      var current = p[i];

      if (current) {
        var tiny = tinycolor(current);
        var c = tiny.toHsl().l < 0.5 ? 'sp-thumb-el sp-thumb-dark' : 'sp-thumb-el sp-thumb-light';
        c += tinycolor.equals(color, current) ? ' sp-thumb-active' : '';
        var formattedString = tiny.toString(opts.preferredFormat || 'rgb');
        var swatchStyle = rgbaSupport ? 'background-color:' + tiny.toRgbString() : 'filter:' + tiny.toFilter();
        html.push('<span title="' + formattedString + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';"></span></span>');
      } else {
        var cls = 'sp-clear-display';
        html.push($('<div />').append($('<span data-color="" style="background-color:transparent;" class="' + cls + '"></span>').attr('title', opts.noColorSelectedText)).html());
      }
    }

    return "<div class='sp-cf " + className + "'>" + html.join('') + '</div>';
  }

  function hideAll() {
    for (var i = 0; i < spectrums.length; i++) {
      if (spectrums[i]) {
        spectrums[i].hide();
      }
    }
  }

  function instanceOptions(o, callbackContext) {
    var opts = $.extend({}, defaultOpts, o);
    opts.callbacks = {
      move: bind(opts.move, callbackContext),
      change: bind(opts.change, callbackContext),
      show: bind(opts.show, callbackContext),
      hide: bind(opts.hide, callbackContext),
      beforeShow: bind(opts.beforeShow, callbackContext)
    };
    return opts;
  }

  function spectrum(element, o) {
    var opts = instanceOptions(o, element),
        flat = opts.flat,
        showSelectionPalette = opts.showSelectionPalette,
        localStorageKey = opts.localStorageKey,
        theme = opts.theme,
        callbacks = opts.callbacks,
        resize = throttle(reflow, 10),
        visible = false,
        isDragging = false,
        dragWidth = 0,
        dragHeight = 0,
        dragHelperHeight = 0,
        slideHeight = 0,
        slideWidth = 0,
        alphaWidth = 0,
        alphaSlideHelperWidth = 0,
        slideHelperHeight = 0,
        currentHue = 0,
        currentSaturation = 0,
        currentValue = 0,
        currentAlpha = 1,
        palette = [],
        paletteArray = [],
        paletteLookup = {},
        selectionPalette = opts.selectionPalette.slice(0),
        maxSelectionSize = opts.maxSelectionSize,
        draggingClass = 'sp-dragging',
        shiftMovementDirection = null;
    var doc = element.ownerDocument,
        body = doc.body,
        boundElement = $(element),
        disabled = false,
        container = $(markup, doc).addClass(theme),
        pickerContainer = container.find('.sp-picker-container'),
        dragger = container.find('.sp-color'),
        dragHelper = container.find('.sp-dragger'),
        slider = container.find('.sp-hue'),
        slideHelper = container.find('.sp-slider'),
        alphaSliderInner = container.find('.sp-alpha-inner'),
        alphaSlider = container.find('.sp-alpha'),
        alphaSlideHelper = container.find('.sp-alpha-handle'),
        textInput = container.find('.sp-input'),
        paletteContainer = container.find('.sp-palette'),
        initialColorContainer = container.find('.sp-initial'),
        cancelButton = container.find('.sp-cancel'),
        clearButton = container.find('.sp-clear'),
        chooseButton = container.find('.sp-choose'),
        toggleButton = container.find('.sp-palette-toggle'),
        isInput = boundElement.is('input'),
        isInputTypeColor = isInput && boundElement.attr('type') === 'color' && inputTypeColorSupport(),
        shouldReplace = isInput && !flat,
        replacer = shouldReplace ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),
        offsetElement = shouldReplace ? replacer : boundElement,
        previewElement = replacer.find('.sp-preview-inner'),
        initialColor = opts.color || isInput && boundElement.val(),
        colorOnShow = false,
        currentPreferredFormat = opts.preferredFormat,
        clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,
        isEmpty = !initialColor,
        allowEmpty = opts.allowEmpty && !isInputTypeColor;

    function applyOptions() {
      if (opts.showPaletteOnly) {
        opts.showPalette = true;
      }

      toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);

      if (opts.palette) {
        palette = opts.palette.slice(0);
        paletteArray = $.isArray(palette[0]) ? palette : [palette];
        paletteLookup = {};

        for (var i = 0; i < paletteArray.length; i++) {
          for (var j = 0; j < paletteArray[i].length; j++) {
            var rgb = tinycolor(paletteArray[i][j]).toRgbString();
            paletteLookup[rgb] = true;
          }
        }
      }

      container.toggleClass('sp-flat', flat);
      container.toggleClass('sp-input-disabled', !opts.showInput);
      container.toggleClass('sp-alpha-enabled', opts.showAlpha);
      container.toggleClass('sp-clear-enabled', allowEmpty);
      container.toggleClass('sp-buttons-disabled', !opts.showButtons);
      container.toggleClass('sp-palette-buttons-disabled', !opts.togglePaletteOnly);
      container.toggleClass('sp-palette-disabled', !opts.showPalette);
      container.toggleClass('sp-palette-only', opts.showPaletteOnly);
      container.toggleClass('sp-initial-disabled', !opts.showInitial);
      container.addClass(opts.className).addClass(opts.containerClassName);
      reflow();
    }

    function initialize() {
      if (IE) {
        container.find('*:not(input)').attr('unselectable', 'on');
      }

      applyOptions();

      if (shouldReplace) {
        boundElement.after(replacer).hide();
      }

      if (!allowEmpty) {
        clearButton.hide();
      }

      if (flat) {
        boundElement.after(container).hide();
      } else {
        var appendTo = opts.appendTo === 'parent' ? boundElement.parent() : $(opts.appendTo);

        if (appendTo.length !== 1) {
          appendTo = $('body');
        }

        appendTo.append(container);
      }

      updateSelectionPaletteFromStorage();
      offsetElement.bind('click.spectrum touchstart.spectrum', function (e) {
        if (!disabled) {
          toggle();
        }

        e.stopPropagation();

        if (!$(e.target).is('input')) {
          e.preventDefault();
        }
      });

      if (boundElement.is(':disabled') || opts.disabled === true) {
        disable();
      } // Prevent clicks from bubbling up to document.  This would cause it to be hidden.


      container.click(stopPropagation); // Handle user typed input

      textInput.change(setFromTextInput);
      textInput.bind('paste', function () {
        setTimeout(setFromTextInput, 1);
      });
      textInput.keydown(function (e) {
        if (e.keyCode == 13) {
          setFromTextInput();
        }
      });
      cancelButton.text(opts.cancelText);
      cancelButton.bind('click.spectrum', function (e) {
        e.stopPropagation();
        e.preventDefault();
        revert();
        hide();
      });
      clearButton.attr('title', opts.clearText);
      clearButton.bind('click.spectrum', function (e) {
        e.stopPropagation();
        e.preventDefault();
        isEmpty = true;
        move();

        if (flat) {
          //for the flat style, this is a change event
          updateOriginalInput(true);
        }
      });
      chooseButton.text(opts.chooseText);
      chooseButton.bind('click.spectrum', function (e) {
        e.stopPropagation();
        e.preventDefault();

        if (IE && textInput.is(':focus')) {
          textInput.trigger('change');
        }

        if (isValid()) {
          updateOriginalInput(true);
          hide();
        }
      });
      toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);
      toggleButton.bind('click.spectrum', function (e) {
        e.stopPropagation();
        e.preventDefault();
        opts.showPaletteOnly = !opts.showPaletteOnly; // To make sure the Picker area is drawn on the right, next to the
        // Palette area (and not below the palette), first move the Palette
        // to the left to make space for the picker, plus 5px extra.
        // The 'applyOptions' function puts the whole container back into place
        // and takes care of the button-text and the sp-palette-only CSS class.

        if (!opts.showPaletteOnly && !flat) {
          container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));
        }

        applyOptions();
      });
      draggable(alphaSlider, function (dragX, dragY, e) {
        currentAlpha = dragX / alphaWidth;
        isEmpty = false;

        if (e.shiftKey) {
          currentAlpha = Math.round(currentAlpha * 10) / 10;
        }

        move();
      }, dragStart, dragStop);
      draggable(slider, function (dragX, dragY) {
        currentHue = parseFloat(dragY / slideHeight);
        isEmpty = false;

        if (!opts.showAlpha) {
          currentAlpha = 1;
        }

        move();
      }, dragStart, dragStop);
      draggable(dragger, function (dragX, dragY, e) {
        // shift+drag should snap the movement to either the x or y axis.
        if (!e.shiftKey) {
          shiftMovementDirection = null;
        } else if (!shiftMovementDirection) {
          var oldDragX = currentSaturation * dragWidth;
          var oldDragY = dragHeight - currentValue * dragHeight;
          var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);
          shiftMovementDirection = furtherFromX ? 'x' : 'y';
        }

        var setSaturation = !shiftMovementDirection || shiftMovementDirection === 'x';
        var setValue = !shiftMovementDirection || shiftMovementDirection === 'y';

        if (setSaturation) {
          currentSaturation = parseFloat(dragX / dragWidth);
        }

        if (setValue) {
          currentValue = parseFloat((dragHeight - dragY) / dragHeight);
        }

        isEmpty = false;

        if (!opts.showAlpha) {
          currentAlpha = 1;
        }

        move();
      }, dragStart, dragStop);

      if (!!initialColor) {
        _set(initialColor); // In case color was black - update the preview UI and set the format
        // since the set function will not run (default color is black).


        updateUI();
        currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;
        addColorToSelectionPalette(initialColor);
      } else {
        updateUI();
      }

      if (flat) {
        show();
      }

      function paletteElementClick(e) {
        if (e.data && e.data.ignore) {
          _set($(e.target).closest('.sp-thumb-el').data('color'));

          move();
        } else {
          _set($(e.target).closest('.sp-thumb-el').data('color'));

          move();
          updateOriginalInput(true);

          if (opts.hideAfterPaletteSelect) {
            hide();
          }
        }

        return false;
      }

      var paletteEvent = IE ? 'mousedown.spectrum' : 'click.spectrum touchstart.spectrum';
      paletteContainer.delegate('.sp-thumb-el', paletteEvent, paletteElementClick);
      initialColorContainer.delegate('.sp-thumb-el:nth-child(1)', paletteEvent, {
        ignore: true
      }, paletteElementClick);
    }

    function updateSelectionPaletteFromStorage() {
      if (localStorageKey && window.localStorage) {
        // Migrate old palettes over to new format.  May want to remove this eventually.
        try {
          var oldPalette = window.localStorage[localStorageKey].split(',#');

          if (oldPalette.length > 1) {
            delete window.localStorage[localStorageKey];
            $.each(oldPalette, function (i, c) {
              addColorToSelectionPalette(c);
            });
          }
        } catch (e) {}

        try {
          selectionPalette = window.localStorage[localStorageKey].split(';');
        } catch (e) {}
      }
    }

    function addColorToSelectionPalette(color) {
      if (showSelectionPalette) {
        var rgb = tinycolor(color).toRgbString();

        if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {
          selectionPalette.push(rgb);

          while (selectionPalette.length > maxSelectionSize) {
            selectionPalette.shift();
          }
        }

        if (localStorageKey && window.localStorage) {
          try {
            window.localStorage[localStorageKey] = selectionPalette.join(';');
          } catch (e) {}
        }
      }
    }

    function getUniqueSelectionPalette() {
      var unique = [];

      if (opts.showPalette) {
        for (var i = 0; i < selectionPalette.length; i++) {
          var rgb = tinycolor(selectionPalette[i]).toRgbString();

          if (!paletteLookup[rgb]) {
            unique.push(selectionPalette[i]);
          }
        }
      }

      return unique.reverse().slice(0, opts.maxSelectionSize);
    }

    function drawPalette() {
      var currentColor = get();
      var html = $.map(paletteArray, function (palette, i) {
        return paletteTemplate(palette, currentColor, 'sp-palette-row sp-palette-row-' + i, opts);
      });
      updateSelectionPaletteFromStorage();

      if (selectionPalette) {
        html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, 'sp-palette-row sp-palette-row-selection', opts));
      }

      paletteContainer.html(html.join(''));
    }

    function drawInitial() {
      if (opts.showInitial) {
        var initial = colorOnShow;
        var current = get();
        initialColorContainer.html(paletteTemplate([initial, current], current, 'sp-palette-row-initial', opts));
      }
    }

    function dragStart() {
      if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {
        reflow();
      }

      isDragging = true;
      container.addClass(draggingClass);
      shiftMovementDirection = null;
      boundElement.trigger('dragstart.spectrum', [get()]);
    }

    function dragStop() {
      isDragging = false;
      container.removeClass(draggingClass);
      boundElement.trigger('dragstop.spectrum', [get()]);
    }

    function setFromTextInput() {
      var value = textInput.val();

      if ((value === null || value === '') && allowEmpty) {
        _set(null);

        updateOriginalInput(true);
      } else {
        var tiny = tinycolor(value);

        if (tiny.isValid()) {
          _set(tiny);

          updateOriginalInput(true);
        } else {
          textInput.addClass('sp-validation-error');
        }
      }
    }

    function toggle() {
      if (visible) {
        hide();
      } else {
        show();
      }
    }

    function show() {
      var event = $.Event('beforeShow.spectrum');

      if (visible) {
        reflow();
        return;
      }

      boundElement.trigger(event, [get()]);

      if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {
        return;
      }

      hideAll();
      visible = true;
      var $doc = $(doc);
      $doc.bind('keydown.spectrum', onkeydown);
      $doc.bind('click.spectrum', clickout);
      $(window).bind('resize.spectrum', resize);
      replacer.addClass('sp-active');
      container.removeClass('sp-hidden');
      reflow();
      updateUI();
      colorOnShow = get();
      drawInitial();
      callbacks.show(colorOnShow);
      boundElement.trigger('show.spectrum', [colorOnShow]);
    }

    function onkeydown(e) {
      // Close on ESC
      if (e.keyCode === 27) {
        hide();
      }
    }

    function clickout(e) {
      // Return on right click.
      if (e.button == 2) {
        return;
      } // If a drag event was happening during the mouseup, don't hide
      // on click.


      if (isDragging) {
        return;
      }

      if (clickoutFiresChange) {
        updateOriginalInput(true);
      } else {
        revert();
      }

      hide();
    }

    function hide() {
      // Return if hiding is unnecessary
      if (!visible || flat) {
        return;
      }

      visible = false;
      $(doc).unbind('keydown.spectrum', onkeydown);
      $(doc).unbind('click.spectrum', clickout);
      $(window).unbind('resize.spectrum', resize);
      replacer.removeClass('sp-active');
      container.addClass('sp-hidden');
      callbacks.hide(get());
      boundElement.trigger('hide.spectrum', [get()]);
    }

    function revert() {
      _set(colorOnShow, true);
    }

    function _set(color, ignoreFormatChange) {
      if (tinycolor.equals(color, get())) {
        // Update UI just in case a validation error needs
        // to be cleared.
        updateUI();
        return;
      }

      var newColor, newHsv;

      if (!color && allowEmpty) {
        isEmpty = true;
      } else {
        isEmpty = false;
        newColor = tinycolor(color);
        newHsv = newColor.toHsv();
        currentHue = newHsv.h % 360 / 360;
        currentSaturation = newHsv.s;
        currentValue = newHsv.v;
        currentAlpha = newHsv.a;
      }

      updateUI();

      if (newColor && newColor.isValid() && !ignoreFormatChange) {
        currentPreferredFormat = opts.preferredFormat || newColor.getFormat();
      }
    }

    function get(opts) {
      opts = opts || {};

      if (allowEmpty && isEmpty) {
        return null;
      }

      return tinycolor.fromRatio({
        h: currentHue,
        s: currentSaturation,
        v: currentValue,
        a: Math.round(currentAlpha * 100) / 100
      }, {
        format: opts.format || currentPreferredFormat
      });
    }

    function isValid() {
      return !textInput.hasClass('sp-validation-error');
    }

    function move() {
      updateUI();
      callbacks.move(get());
      boundElement.trigger('move.spectrum', [get()]);
    }

    function updateUI() {
      textInput.removeClass('sp-validation-error');
      updateHelperLocations(); // Update dragger background color (gradients take care of saturation and value).

      var flatColor = tinycolor.fromRatio({
        h: currentHue,
        s: 1,
        v: 1
      });
      dragger.css('background-color', flatColor.toHexString()); // Get a format that alpha will be included in (hex and names ignore alpha)

      var format = currentPreferredFormat;

      if (currentAlpha < 1 && !(currentAlpha === 0 && format === 'name')) {
        if (format === 'hex' || format === 'hex3' || format === 'hex6' || format === 'name') {
          format = 'rgb';
        }
      }

      var realColor = get({
        format: format
      }),
          displayColor = ''; //reset background info for preview element

      previewElement.removeClass('sp-clear-display');
      previewElement.css('background-color', 'transparent');

      if (!realColor && allowEmpty) {
        // Update the replaced elements background with icon indicating no color selection
        previewElement.addClass('sp-clear-display');
      } else {
        var realHex = realColor.toHexString(),
            realRgb = realColor.toRgbString(); // Update the replaced elements background color (with actual selected color)

        if (rgbaSupport || realColor.alpha === 1) {
          previewElement.css('background-color', realRgb);
        } else {
          previewElement.css('background-color', 'transparent');
          previewElement.css('filter', realColor.toFilter());
        }

        if (opts.showAlpha) {
          var rgb = realColor.toRgb();
          rgb.a = 0;
          var realAlpha = tinycolor(rgb).toRgbString();
          var gradient = 'linear-gradient(left, ' + realAlpha + ', ' + realHex + ')';

          if (IE) {
            alphaSliderInner.css('filter', tinycolor(realAlpha).toFilter({
              gradientType: 1
            }, realHex));
          } else {
            alphaSliderInner.css('background', '-webkit-' + gradient);
            alphaSliderInner.css('background', '-moz-' + gradient);
            alphaSliderInner.css('background', '-ms-' + gradient); // Use current syntax gradient on unprefixed property.

            alphaSliderInner.css('background', 'linear-gradient(to right, ' + realAlpha + ', ' + realHex + ')');
          }
        }

        displayColor = realColor.toString(format);
      } // Update the text entry input as it changes happen


      if (opts.showInput) {
        textInput.val(displayColor);
      }

      if (opts.showPalette) {
        drawPalette();
      }

      drawInitial();
    }

    function updateHelperLocations() {
      var s = currentSaturation;
      var v = currentValue;

      if (allowEmpty && isEmpty) {
        //if selected color is empty, hide the helpers
        alphaSlideHelper.hide();
        slideHelper.hide();
        dragHelper.hide();
      } else {
        //make sure helpers are visible
        alphaSlideHelper.show();
        slideHelper.show();
        dragHelper.show(); // Where to show the little circle in that displays your current selected color

        var dragX = s * dragWidth;
        var dragY = dragHeight - v * dragHeight;
        dragX = Math.max(-dragHelperHeight, Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight));
        dragY = Math.max(-dragHelperHeight, Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight));
        dragHelper.css({
          top: dragY + 'px',
          left: dragX + 'px'
        });
        var alphaX = currentAlpha * alphaWidth;
        alphaSlideHelper.css({
          left: alphaX - alphaSlideHelperWidth / 2 + 'px'
        }); // Where to show the bar that displays your current selected hue

        var slideY = currentHue * slideHeight;
        slideHelper.css({
          top: slideY - slideHelperHeight + 'px'
        });
      }
    }

    function updateOriginalInput(fireCallback) {
      var color = get(),
          displayColor = '',
          hasChanged = !tinycolor.equals(color, colorOnShow);

      if (color) {
        displayColor = color.toString(currentPreferredFormat); // Update the selection palette with the current color

        addColorToSelectionPalette(color);
      }

      if (isInput) {
        boundElement.val(displayColor);
      }

      if (fireCallback && hasChanged) {
        callbacks.change(color);
        boundElement.trigger('change', [color]);
      }
    }

    function reflow() {
      if (!visible) {
        return; // Calculations would be useless and wouldn't be reliable anyways
      }

      dragWidth = dragger.width();
      dragHeight = dragger.height();
      dragHelperHeight = dragHelper.height();
      slideWidth = slider.width();
      slideHeight = slider.height();
      slideHelperHeight = slideHelper.height();
      alphaWidth = alphaSlider.width();
      alphaSlideHelperWidth = alphaSlideHelper.width();

      if (!flat) {
        container.css('position', 'absolute');

        if (opts.offset) {
          container.offset(opts.offset);
        } else {
          container.offset(getOffset(container, offsetElement));
        }
      }

      updateHelperLocations();

      if (opts.showPalette) {
        drawPalette();
      }

      boundElement.trigger('reflow.spectrum');
    }

    function destroy() {
      boundElement.show();
      offsetElement.unbind('click.spectrum touchstart.spectrum');
      container.remove();
      replacer.remove();
      spectrums[spect.id] = null;
    }

    function option(optionName, optionValue) {
      if (optionName === undefined) {
        return $.extend({}, opts);
      }

      if (optionValue === undefined) {
        return opts[optionName];
      }

      opts[optionName] = optionValue;

      if (optionName === 'preferredFormat') {
        currentPreferredFormat = opts.preferredFormat;
      }

      applyOptions();
    }

    function enable() {
      disabled = false;
      boundElement.attr('disabled', false);
      offsetElement.removeClass('sp-disabled');
    }

    function disable() {
      hide();
      disabled = true;
      boundElement.attr('disabled', true);
      offsetElement.addClass('sp-disabled');
    }

    function setOffset(coord) {
      opts.offset = coord;
      reflow();
    }

    initialize();
    var spect = {
      show: show,
      hide: hide,
      toggle: toggle,
      reflow: reflow,
      option: option,
      enable: enable,
      disable: disable,
      offset: setOffset,
      set: function set(c) {
        _set(c);

        updateOriginalInput();
      },
      get: get,
      destroy: destroy,
      container: container
    };
    spect.id = spectrums.push(spect) - 1;
    return spect;
  }
  /**
   * checkOffset - get the offset below/above and left/right element depending on screen position
   * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js
   */


  function getOffset(picker, input) {
    var extraY = 0;
    var dpWidth = picker.outerWidth();
    var dpHeight = picker.outerHeight();
    var inputHeight = input.outerHeight();
    var doc = picker[0].ownerDocument;
    var docElem = doc.documentElement;
    var cW = docElem.clientWidth;
    var cH = docElem.clientHeight;
    var scL = $(doc).scrollLeft();
    var scT = $(doc).scrollTop();
    var viewWidth = cW + scL;
    var viewHeight = cH + scT;
    var offset = input.offset();
    offset.top += inputHeight;
    offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
    offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight - extraY) : extraY);
    return offset;
  }
  /**
   * noop - do nothing
   */


  function noop() {}
  /**
   * stopPropagation - makes the code only doing this a little easier to read in line
   */


  function stopPropagation(e) {
    e.stopPropagation();
  }
  /**
   * Create a function bound to a given object
   * Thanks to underscore.js
   */


  function bind(func, obj) {
    var slice = Array.prototype.slice;
    var args = slice.call(arguments, 2);
    return function () {
      return func.apply(obj, args.concat(slice.call(arguments)));
    };
  }
  /**
   * Lightweight drag helper.  Handles containment within the element, so that
   * when dragging, the x is within [0,element.width] and y is within [0,element.height]
   */


  function draggable(element, onmove, onstart, onstop) {
    onmove = onmove || function () {};

    onstart = onstart || function () {};

    onstop = onstop || function () {};

    var doc = document;
    var dragging = false;
    var offset = {};
    var maxHeight = 0;
    var maxWidth = 0;
    var hasTouch = 'ontouchstart' in window;
    var duringDragEvents = {};
    duringDragEvents['selectstart'] = prevent;
    duringDragEvents['dragstart'] = prevent;
    duringDragEvents['touchmove mousemove'] = move;
    duringDragEvents['touchend mouseup'] = stop;

    function prevent(e) {
      if (e.stopPropagation) {
        e.stopPropagation();
      }

      if (e.preventDefault) {
        e.preventDefault();
      }

      e.returnValue = false;
    }

    function move(e) {
      if (dragging) {
        // Mouseup happened outside of window
        if (IE && doc.documentMode < 9 && !e.button) {
          return stop();
        }

        var t0 = e && e.touches && e.touches[0];
        var pageX = t0 && t0.pageX || e.pageX;
        var pageY = t0 && t0.pageY || e.pageY;
        var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));
        var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));

        if (hasTouch) {
          // Stop scrolling in iOS
          prevent(e);
        }

        onmove.apply(element, [dragX, dragY, e]);
      }
    }

    function start(e) {
      var rightclick = e.which ? e.which == 3 : e.button == 2;

      if (!rightclick && !dragging) {
        if (onstart.apply(element, arguments) !== false) {
          dragging = true;
          maxHeight = $(element).height();
          maxWidth = $(element).width();
          offset = $(element).offset();
          $(doc).bind(duringDragEvents);
          $(doc.body).addClass('sp-dragging');
          move(e);
          prevent(e);
        }
      }
    }

    function stop() {
      if (dragging) {
        $(doc).unbind(duringDragEvents);
        $(doc.body).removeClass('sp-dragging'); // Wait a tick before notifying observers to allow the click event
        // to fire in Chrome.

        setTimeout(function () {
          onstop.apply(element, arguments);
        }, 0);
      }

      dragging = false;
    }

    $(element).bind('touchstart mousedown', start);
  }

  function throttle(func, wait, debounce) {
    var timeout;
    return function () {
      var context = this,
          args = arguments;

      var throttler = function throttler() {
        timeout = null;
        func.apply(context, args);
      };

      if (debounce) clearTimeout(timeout);
      if (debounce || !timeout) timeout = setTimeout(throttler, wait);
    };
  }

  function inputTypeColorSupport() {
    return $.fn.spectrum.inputTypeColorSupport();
  }
  /**
   * Define a jQuery plugin
   */


  var dataID = 'spectrum.id';

  $.fn.spectrum = function (opts, extra) {
    if (typeof opts == 'string') {
      var returnValue = this;
      var args = Array.prototype.slice.call(arguments, 1);
      this.each(function () {
        var spect = spectrums[$(this).data(dataID)];

        if (spect) {
          var method = spect[opts];

          if (!method) {
            throw new Error("Spectrum: no such method: '" + opts + "'");
          }

          if (opts == 'get') {
            returnValue = spect.get();
          } else if (opts == 'container') {
            returnValue = spect.container;
          } else if (opts == 'option') {
            returnValue = spect.option.apply(spect, args);
          } else if (opts == 'destroy') {
            spect.destroy();
            $(this).removeData(dataID);
          } else {
            method.apply(spect, args);
          }
        }
      });
      return returnValue;
    } // Initializing a new instance of spectrum


    return this.spectrum('destroy').each(function () {
      var options = $.extend({}, opts, $(this).data());
      var spect = spectrum(this, options);
      $(this).data(dataID, spect.id);
    });
  };

  $.fn.spectrum.load = true;
  $.fn.spectrum.loadOpts = {};
  $.fn.spectrum.draggable = draggable;
  $.fn.spectrum.defaults = defaultOpts;

  $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {
    if (typeof inputTypeColorSupport._cachedResult === 'undefined') {
      var colorInput = $("<input type='color'/>")[0]; // if color element is supported, value will default to not null

      inputTypeColorSupport._cachedResult = colorInput.type === 'color' && colorInput.value !== '';
    }

    return inputTypeColorSupport._cachedResult;
  };

  $.spectrum = {};
  $.spectrum.localization = {};
  $.spectrum.palettes = {};

  $.fn.spectrum.processNativeColorInputs = function () {
    var colorInputs = $('input[type=color]');

    if (colorInputs.length && !inputTypeColorSupport()) {
      colorInputs.spectrum({
        preferredFormat: 'hex6'
      });
    }
  }; // TinyColor v1.1.2
  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License
  //(function() {


  var trimLeft = /^[\s,#]+/,
      trimRight = /\s+$/,
      tinyCounter = 0,
      math = Math,
      mathRound = math.round,
      mathMin = math.min,
      mathMax = math.max,
      mathRandom = math.random;

  var tinycolor = function tinycolor(color, opts) {
    color = color ? color : '';
    opts = opts || {}; // If input is already a tinycolor, return itself

    if (color instanceof tinycolor) {
      return color;
    } // If we are called as a function, call using new instead


    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`

    if (this._r < 1) {
      this._r = mathRound(this._r);
    }

    if (this._g < 1) {
      this._g = mathRound(this._g);
    }

    if (this._b < 1) {
      this._b = mathRound(this._b);
    }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
  };

  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = mathRound(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = mathRound(hsv.h * 360),
          s = mathRound(hsv.s * 100),
          v = mathRound(hsv.v * 100);
      return this._a == 1 ? 'hsv(' + h + ', ' + s + '%, ' + v + '%)' : 'hsva(' + h + ', ' + s + '%, ' + v + '%, ' + this._roundA + ')';
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = mathRound(hsl.h * 360),
          s = mathRound(hsl.s * 100),
          l = mathRound(hsl.l * 100);
      return this._a == 1 ? 'hsl(' + h + ', ' + s + '%, ' + l + '%)' : 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + this._roundA + ')';
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return '#' + this.toHex(allow3Char);
    },
    toHex8: function toHex8() {
      return rgbaToHex(this._r, this._g, this._b, this._a);
    },
    toHex8String: function toHex8String() {
      return '#' + this.toHex8();
    },
    toRgb: function toRgb() {
      return {
        r: mathRound(this._r),
        g: mathRound(this._g),
        b: mathRound(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? 'rgb(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ')' : 'rgba(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ', ' + this._roundA + ')';
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: mathRound(bound01(this._r, 255) * 100) + '%',
        g: mathRound(bound01(this._g, 255) * 100) + '%',
        b: mathRound(bound01(this._b, 255) * 100) + '%',
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? 'rgb(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%)' : 'rgba(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%, ' + this._roundA + ')';
    },
    toName: function toName() {
      if (this._a === 0) {
        return 'transparent';
      }

      if (this._a < 1) {
        return false;
      }

      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? 'GradientType = 1, ' : '';

      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = s.toHex8String();
      }

      return 'progid:DXImageTransform.Microsoft.gradient(' + gradientType + 'startColorstr=' + hex8String + ',endColorstr=' + secondHex8String + ')';
    },
    toString: function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === 'hex' || format === 'hex6' || format === 'hex3' || format === 'name');

      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === 'name' && this._a === 0) {
          return this.toName();
        }

        return this.toRgbString();
      }

      if (format === 'rgb') {
        formattedString = this.toRgbString();
      }

      if (format === 'prgb') {
        formattedString = this.toPercentageRgbString();
      }

      if (format === 'hex' || format === 'hex6') {
        formattedString = this.toHexString();
      }

      if (format === 'hex3') {
        formattedString = this.toHexString(true);
      }

      if (format === 'hex8') {
        formattedString = this.toHex8String();
      }

      if (format === 'name') {
        formattedString = this.toName();
      }

      if (format === 'hsl') {
        formattedString = this.toHslString();
      }

      if (format === 'hsv') {
        formattedString = this.toHsvString();
      }

      return formattedString || this.toHexString();
    },
    _applyModification: function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function lighten() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    triad: function triad() {
      return this._applyCombination(_triad, arguments);
    },
    tetrad: function tetrad() {
      return this._applyCombination(_tetrad, arguments);
    }
  }; // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1

  tinycolor.fromRatio = function (color, opts) {
    if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(color) == 'object') {
      var newColor = {};

      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === 'a') {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }

      color = newColor;
    }

    return tinycolor(color, opts);
  }; // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //


  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var ok = false;
    var format = false;

    if (typeof color == 'string') {
      color = stringInputToObject(color);
    }

    if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(color) == 'object') {
      if (color.hasOwnProperty('r') && color.hasOwnProperty('g') && color.hasOwnProperty('b')) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
      } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('v')) {
        color.s = convertToPercentage(color.s);
        color.v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, color.s, color.v);
        ok = true;
        format = 'hsv';
      } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('l')) {
        color.s = convertToPercentage(color.s);
        color.l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, color.s, color.l);
        ok = true;
        format = 'hsl';
      }

      if (color.hasOwnProperty('a')) {
        a = color.a;
      }
    }

    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: mathMin(255, mathMax(rgb.r, 0)),
      g: mathMin(255, mathMax(rgb.g, 0)),
      b: mathMin(255, mathMax(rgb.b, 0)),
      a: a
    };
  } // Conversion Functions
  // --------------------
  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]


  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  } // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]


  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = mathMax(r, g, b),
        min = mathMin(r, g, b);
    var h,
        s,
        l = (max + min) / 2;

    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    return {
      h: h,
      s: s,
      l: l
    };
  } // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]


  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }

    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  } // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]


  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = mathMax(r, g, b),
        min = mathMin(r, g, b);
    var h,
        s,
        v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    return {
      h: h,
      s: s,
      v: v
    };
  } // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]


  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  } // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex


  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join('');
  } // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b and a are contained in the set [0, 255]
  // Returns an 8 character hex


  function rgbaToHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
    return hex.join('');
  } // `equals`
  // Can be called with any tinycolor input


  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) {
      return false;
    }

    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };

  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: mathRandom(),
      g: mathRandom(),
      b: mathRandom()
    });
  }; // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }

  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }

  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }

  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
    return tinycolor(rgb);
  }

  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.


  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (mathRound(hsl.h) + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  } // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }

  function _triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 120) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 240) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }

  function _tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 90) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 180) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 270) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }

  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }

  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }

    return ret;
  }

  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
        s = hsv.s,
        v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }

    return ret;
  } // Utility Functions
  // ---------------------


  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var w = p * 2 - 1;
    var a = rgb2.a - rgb1.a;
    var w1;

    if (w * a == -1) {
      w1 = w;
    } else {
      w1 = (w + a) / (1 + w * a);
    }

    w1 = (w1 + 1) / 2;
    var w2 = 1 - w1;
    var rgba = {
      r: rgb2.r * w1 + rgb1.r * w2,
      g: rgb2.g * w1 + rgb1.g * w2,
      b: rgb2.b * w1 + rgb1.b * w2,
      a: rgb2.a * p + rgb1.a * (1 - p)
    };
    return tinycolor(rgba);
  }; // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/AERT#color-contrast>
  // `readability`
  // Analyze the 2 colors and returns an object with the following properties:
  //    `brightness`: difference in brightness between the two colors
  //    `color`: difference in color/hue between the two colors


  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    var rgb1 = c1.toRgb();
    var rgb2 = c2.toRgb();
    var brightnessA = c1.getBrightness();
    var brightnessB = c2.getBrightness();
    var colorDiff = Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) + Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) + Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b);
    return {
      brightness: Math.abs(brightnessA - brightnessB),
      color: colorDiff
    };
  }; // `readable`
  // http://www.w3.org/TR/AERT#color-contrast
  // Ensure that foreground and background color combinations provide sufficient contrast.
  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false


  tinycolor.isReadable = function (color1, color2) {
    var readability = tinycolor.readability(color1, color2);
    return readability.brightness > 125 && readability.color > 500;
  }; // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // *Example*
  //    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"


  tinycolor.mostReadable = function (baseColor, colorList) {
    var bestColor = null;
    var bestScore = 0;
    var bestIsReadable = false;

    for (var i = 0; i < colorList.length; i++) {
      // We normalize both around the "acceptable" breaking point,
      // but rank brightness constrast higher than hue.
      var readability = tinycolor.readability(baseColor, colorList[i]);
      var readable = readability.brightness > 125 && readability.color > 500;
      var score = 3 * (readability.brightness / 125) + readability.color / 500;

      if (readable && !bestIsReadable || readable && bestIsReadable && score > bestScore || !readable && !bestIsReadable && score > bestScore) {
        bestIsReadable = readable;
        bestScore = score;
        bestColor = tinycolor(colorList[i]);
      }
    }

    return bestColor;
  }; // Big List of Colors
  // ------------------
  // <http://www.w3.org/TR/css3-color/#svg-color>


  var names = tinycolor.names = {
    aliceblue: 'f0f8ff',
    antiquewhite: 'faebd7',
    aqua: '0ff',
    aquamarine: '7fffd4',
    azure: 'f0ffff',
    beige: 'f5f5dc',
    bisque: 'ffe4c4',
    black: '000',
    blanchedalmond: 'ffebcd',
    blue: '00f',
    blueviolet: '8a2be2',
    brown: 'a52a2a',
    burlywood: 'deb887',
    burntsienna: 'ea7e5d',
    cadetblue: '5f9ea0',
    chartreuse: '7fff00',
    chocolate: 'd2691e',
    coral: 'ff7f50',
    cornflowerblue: '6495ed',
    cornsilk: 'fff8dc',
    crimson: 'dc143c',
    cyan: '0ff',
    darkblue: '00008b',
    darkcyan: '008b8b',
    darkgoldenrod: 'b8860b',
    darkgray: 'a9a9a9',
    darkgreen: '006400',
    darkgrey: 'a9a9a9',
    darkkhaki: 'bdb76b',
    darkmagenta: '8b008b',
    darkolivegreen: '556b2f',
    darkorange: 'ff8c00',
    darkorchid: '9932cc',
    darkred: '8b0000',
    darksalmon: 'e9967a',
    darkseagreen: '8fbc8f',
    darkslateblue: '483d8b',
    darkslategray: '2f4f4f',
    darkslategrey: '2f4f4f',
    darkturquoise: '00ced1',
    darkviolet: '9400d3',
    deeppink: 'ff1493',
    deepskyblue: '00bfff',
    dimgray: '696969',
    dimgrey: '696969',
    dodgerblue: '1e90ff',
    firebrick: 'b22222',
    floralwhite: 'fffaf0',
    forestgreen: '228b22',
    fuchsia: 'f0f',
    gainsboro: 'dcdcdc',
    ghostwhite: 'f8f8ff',
    gold: 'ffd700',
    goldenrod: 'daa520',
    gray: '808080',
    green: '008000',
    greenyellow: 'adff2f',
    grey: '808080',
    honeydew: 'f0fff0',
    hotpink: 'ff69b4',
    indianred: 'cd5c5c',
    indigo: '4b0082',
    ivory: 'fffff0',
    khaki: 'f0e68c',
    lavender: 'e6e6fa',
    lavenderblush: 'fff0f5',
    lawngreen: '7cfc00',
    lemonchiffon: 'fffacd',
    lightblue: 'add8e6',
    lightcoral: 'f08080',
    lightcyan: 'e0ffff',
    lightgoldenrodyellow: 'fafad2',
    lightgray: 'd3d3d3',
    lightgreen: '90ee90',
    lightgrey: 'd3d3d3',
    lightpink: 'ffb6c1',
    lightsalmon: 'ffa07a',
    lightseagreen: '20b2aa',
    lightskyblue: '87cefa',
    lightslategray: '789',
    lightslategrey: '789',
    lightsteelblue: 'b0c4de',
    lightyellow: 'ffffe0',
    lime: '0f0',
    limegreen: '32cd32',
    linen: 'faf0e6',
    magenta: 'f0f',
    maroon: '800000',
    mediumaquamarine: '66cdaa',
    mediumblue: '0000cd',
    mediumorchid: 'ba55d3',
    mediumpurple: '9370db',
    mediumseagreen: '3cb371',
    mediumslateblue: '7b68ee',
    mediumspringgreen: '00fa9a',
    mediumturquoise: '48d1cc',
    mediumvioletred: 'c71585',
    midnightblue: '191970',
    mintcream: 'f5fffa',
    mistyrose: 'ffe4e1',
    moccasin: 'ffe4b5',
    navajowhite: 'ffdead',
    navy: '000080',
    oldlace: 'fdf5e6',
    olive: '808000',
    olivedrab: '6b8e23',
    orange: 'ffa500',
    orangered: 'ff4500',
    orchid: 'da70d6',
    palegoldenrod: 'eee8aa',
    palegreen: '98fb98',
    paleturquoise: 'afeeee',
    palevioletred: 'db7093',
    papayawhip: 'ffefd5',
    peachpuff: 'ffdab9',
    peru: 'cd853f',
    pink: 'ffc0cb',
    plum: 'dda0dd',
    powderblue: 'b0e0e6',
    purple: '800080',
    rebeccapurple: '663399',
    red: 'f00',
    rosybrown: 'bc8f8f',
    royalblue: '4169e1',
    saddlebrown: '8b4513',
    salmon: 'fa8072',
    sandybrown: 'f4a460',
    seagreen: '2e8b57',
    seashell: 'fff5ee',
    sienna: 'a0522d',
    silver: 'c0c0c0',
    skyblue: '87ceeb',
    slateblue: '6a5acd',
    slategray: '708090',
    slategrey: '708090',
    snow: 'fffafa',
    springgreen: '00ff7f',
    steelblue: '4682b4',
    tan: 'd2b48c',
    teal: '008080',
    thistle: 'd8bfd8',
    tomato: 'ff6347',
    turquoise: '40e0d0',
    violet: 'ee82ee',
    wheat: 'f5deb3',
    white: 'fff',
    whitesmoke: 'f5f5f5',
    yellow: 'ff0',
    yellowgreen: '9acd32'
  }; // Make it easy to access colors via `hexNames[hex]`

  var hexNames = tinycolor.hexNames = flip(names); // Utilities
  // ---------
  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

  function flip(o) {
    var flipped = {};

    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }

    return flipped;
  } // Return a valid alpha value [0,1] with all invalid values being set to 1


  function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }

    return a;
  } // Take input from [0, n] and return it as [0, 1]


  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = '100%';
    }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    } // Handle floating point rounding errors


    if (math.abs(n - max) < 0.000001) {
      return 1;
    } // Convert into [0, 1] range if it isn't already


    return n % max / parseFloat(max);
  } // Force a number between 0 and 1


  function clamp01(val) {
    return mathMin(1, mathMax(0, val));
  } // Parse a base-16 hex value into a base-10 integer


  function parseIntFromHex(val) {
    return parseInt(val, 16);
  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


  function isOnePointZero(n) {
    return typeof n == 'string' && n.indexOf('.') != -1 && parseFloat(n) === 1;
  } // Check to see if string passed in is a percentage


  function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') != -1;
  } // Force a hex value to have 2 characters


  function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
  } // Replace a decimal with it's percentage value


  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + '%';
    }

    return n;
  } // Converts a decimal to a hex value


  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  } // Converts a hex value to a decimal


  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }

  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = '[-\\+]?\\d+%?'; // <http://www.w3.org/TR/css3-values/#number-value>

    var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?'; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

    var CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')'; // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren

    var PERMISSIVE_MATCH3 = '[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
    var PERMISSIVE_MATCH4 = '[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
    return {
      rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
      rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
      hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
      hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
      hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
      hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
      hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }(); // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


  function stringInputToObject(color) {
    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
    var named = false;

    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == 'transparent') {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: 'name'
      };
    } // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.


    var match;

    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }

    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }

    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }

    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }

    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }

    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }

    if (match = matchers.hex8.exec(color)) {
      return {
        a: convertHexToDecimal(match[1]),
        r: parseIntFromHex(match[2]),
        g: parseIntFromHex(match[3]),
        b: parseIntFromHex(match[4]),
        format: named ? 'name' : 'hex8'
      };
    }

    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? 'name' : 'hex'
      };
    }

    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + '' + match[1]),
        g: parseIntFromHex(match[2] + '' + match[2]),
        b: parseIntFromHex(match[3] + '' + match[3]),
        format: named ? 'name' : 'hex'
      };
    }

    return false;
  }

  window.tinycolor = tinycolor; //})();

  $(function () {
    if ($.fn.spectrum.load) {
      $.fn.spectrum.processNativeColorInputs();
    }
  });
});

/***/ }),

/***/ "./src/utils/Dragger.js":
/*!******************************!*\
  !*** ./src/utils/Dragger.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Dragger; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var resetPos = function resetPos() {
  return {
    x: 0,
    y: 0
  };
};

var Dragger =
/*#__PURE__*/
function () {
  /**
   * Init the dragger
   * @param  {Object} opts
   */
  function Dragger() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Dragger);

    this.opts = {
      /**
       * Element on which the drag will be executed. By default, the document will be used
       */
      container: null,

      /**
       * Callback on start
       * onStart(ev, dragger) {
       *  console.log('pointer start', dragger.startPointer, 'position start', dragger.startPosition);
       * },
       */
      onStart: null,

      /**
       * Callback on drag
       * onDrag(ev, dragger) {
       *  console.log('pointer', dragger.currentPointer, 'position', dragger.position, 'delta', dragger.delta);
       * },
       */
      onDrag: null,

      /**
       * Callback on drag
       * onEnd(ev, dragger) {
       *  console.log('pointer', dragger.currentPointer, 'position', dragger.position, 'delta', dragger.delta);
       * },
       */
      onEnd: null,

      /**
       * Indicate a callback where to pass an object with new coordinates
       */
      setPosition: null,

      /**
       * Indicate a callback where to get initial coordinates.
       * getPosition: () => {
       *  ...
       *  return { x: 10, y: 100 }
       * }
       */
      getPosition: null,
      // Static guides to be snapped
      guidesStatic: null,
      // Target guides that will snap to static one
      guidesTarget: null,
      // Offset before snap to guides
      snapOffset: 5,
      // Document on which listen to pointer events
      doc: 0,
      // Scale result points, can also be a function
      scale: 1
    };
    Object(underscore__WEBPACK_IMPORTED_MODULE_3__["bindAll"])(this, 'drag', 'stop', 'keyHandle', 'handleScroll');
    this.setOptions(opts);
    this.delta = resetPos();
    return this;
  }
  /**
   * Update options
   * @param {Object} options
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Dragger, [{
    key: "setOptions",
    value: function setOptions() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.opts = _objectSpread({}, this.opts, {}, opts);
    }
  }, {
    key: "toggleDrag",
    value: function toggleDrag(enable) {
      var docs = this.getDocumentEl();
      var container = this.getContainerEl();
      var win = this.getWindowEl();
      var method = enable ? 'on' : 'off';
      var methods = {
        on: utils_mixins__WEBPACK_IMPORTED_MODULE_4__["on"],
        off: utils_mixins__WEBPACK_IMPORTED_MODULE_4__["off"]
      };
      methods[method](container, 'mousemove dragover', this.drag);
      methods[method](docs, 'mouseup dragend touchend', this.stop);
      methods[method](docs, 'keydown', this.keyHandle);
      methods[method](win, 'scroll', this.handleScroll);
    }
  }, {
    key: "handleScroll",
    value: function handleScroll() {
      var lastScroll = this.lastScroll,
          delta = this.delta;
      var actualScroll = this.getScrollInfo();
      var scrollDiff = {
        x: actualScroll.x - lastScroll.x,
        y: actualScroll.y - lastScroll.y
      };
      this.move(delta.x + scrollDiff.x, delta.y + scrollDiff.y);
      this.lastScrollDiff = scrollDiff;
    }
    /**
     * Start dragging
     * @param  {Event} e
     */

  }, {
    key: "start",
    value: function start(ev) {
      var opts = this.opts;
      var onStart = opts.onStart;
      this.toggleDrag(1);
      this.startPointer = this.getPointerPos(ev);
      this.guidesStatic = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["result"])(opts, 'guidesStatic') || [];
      this.guidesTarget = Object(underscore__WEBPACK_IMPORTED_MODULE_3__["result"])(opts, 'guidesTarget') || [];
      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(onStart) && onStart(ev, this);
      this.startPosition = this.getStartPosition();
      this.lastScrollDiff = resetPos();
      this.globScrollDiff = resetPos();
      this.drag(ev);
    }
    /**
     * Drag event
     * @param  {Event} event
     */

  }, {
    key: "drag",
    value: function drag(ev) {
      var _this = this;

      var opts = this.opts,
          lastScrollDiff = this.lastScrollDiff,
          globScrollDiff = this.globScrollDiff;
      var onDrag = opts.onDrag;
      var startPointer = this.startPointer;
      var currentPos = this.getPointerPos(ev);
      var glDiff = {
        x: globScrollDiff.x + lastScrollDiff.x,
        y: globScrollDiff.y + lastScrollDiff.y
      };
      this.globScrollDiff = glDiff;
      var delta = {
        x: currentPos.x - startPointer.x + glDiff.x,
        y: currentPos.y - startPointer.y + glDiff.y
      };
      this.lastScrollDiff = resetPos();
      var lockedAxis = this.lockedAxis; // Lock one axis

      if (ev.shiftKey) {
        lockedAxis = !lockedAxis && this.detectAxisLock(delta.x, delta.y);
      } else {
        lockedAxis = null;
      }

      if (lockedAxis === 'x') {
        delta.x = startPointer.x;
      } else if (lockedAxis === 'y') {
        delta.y = startPointer.y;
      }

      var moveDelta = function moveDelta(delta) {
        ['x', 'y'].forEach(function (co) {
          return delta[co] = delta[co] * Object(underscore__WEBPACK_IMPORTED_MODULE_3__["result"])(opts, 'scale');
        });
        _this.delta = delta;

        _this.move(delta.x, delta.y);

        Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(onDrag) && onDrag(ev, _this);
      };

      var deltaPre = _objectSpread({}, delta);

      this.currentPointer = currentPos;
      this.lockedAxis = lockedAxis;
      this.lastScroll = this.getScrollInfo();
      moveDelta(delta);

      if (this.guidesTarget.length) {
        var _this$snapGuides = this.snapGuides(deltaPre),
            newDelta = _this$snapGuides.newDelta,
            trgX = _this$snapGuides.trgX,
            trgY = _this$snapGuides.trgY;

        (trgX || trgY) && moveDelta(newDelta);
      } // In case the mouse button was released outside of the window


      ev.which === 0 && this.stop(ev);
    }
    /**
     * Check if the delta hits some guide
     */

  }, {
    key: "snapGuides",
    value: function snapGuides(delta) {
      var _this2 = this;

      var newDelta = delta;
      var trgX = this.trgX,
          trgY = this.trgY;
      this.guidesTarget.forEach(function (trg) {
        // Skip the guide if its locked axis already exists
        if (trg.x && _this2.trgX || trg.y && _this2.trgY) return;
        trg.active = 0;

        _this2.guidesStatic.forEach(function (stat) {
          if (trg.y && stat.x || trg.x && stat.y) return;
          var isY = trg.y && stat.y;
          var axs = isY ? 'y' : 'x';
          var trgPoint = trg[axs];
          var statPoint = stat[axs];
          var deltaPoint = delta[axs];
          var trgGuide = isY ? trgY : trgX;

          if (_this2.isPointIn(trgPoint, statPoint)) {
            if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(trgGuide)) {
              var trgValue = deltaPoint - (trgPoint - statPoint);

              _this2.setGuideLock(trg, trgValue);
            }
          }
        });
      });
      trgX = this.trgX;
      trgY = this.trgY;
      ['x', 'y'].forEach(function (co) {
        var axis = co.toUpperCase();

        var trg = _this2["trg".concat(axis)];

        if (trg && !_this2.isPointIn(delta[co], trg.lock)) {
          _this2.setGuideLock(trg, null);

          trg = null;
        }

        if (trg && !Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(trg.lock)) {
          newDelta[co] = trg.lock;
        }
      });
      return {
        newDelta: newDelta,
        trgX: this.trgX,
        trgY: this.trgY
      };
    }
  }, {
    key: "isPointIn",
    value: function isPointIn(src, trg) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          offset = _ref.offset;

      var ofst = offset || this.opts.snapOffset;
      return src >= trg && src <= trg + ofst || src <= trg && src >= trg - ofst;
    }
  }, {
    key: "setGuideLock",
    value: function setGuideLock(guide, value) {
      var axis = !Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isUndefined"])(guide.x) ? 'X' : 'Y';
      var trgName = "trg".concat(axis);

      if (value !== null) {
        guide.active = 1;
        guide.lock = value;
        this[trgName] = guide;
      } else {
        delete guide.active;
        delete guide.lock;
        delete this[trgName];
      }

      return guide;
    }
    /**
     * Stop dragging
     */

  }, {
    key: "stop",
    value: function stop(ev) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var delta = this.delta;
      var cancelled = opts.cancel;
      var x = cancelled ? 0 : delta.x;
      var y = cancelled ? 0 : delta.y;
      this.toggleDrag();
      this.lockedAxis = null;
      this.move(x, y, 1);
      var onEnd = this.opts.onEnd;
      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(onEnd) && onEnd(ev, this, {
        cancelled: cancelled
      });
    }
  }, {
    key: "keyHandle",
    value: function keyHandle(ev) {
      if (Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["isEscKey"])(ev)) {
        this.stop(ev, {
          cancel: 1
        });
      }
    }
    /**
     * Move the element
     * @param  {integer} x
     * @param  {integer} y
     */

  }, {
    key: "move",
    value: function move(x, y, end) {
      var el = this.el,
          opts = this.opts;
      var pos = this.startPosition;
      if (!pos) return;
      var setPosition = opts.setPosition;
      var xPos = pos.x + x;
      var yPos = pos.y + y;
      this.position = {
        x: xPos,
        y: yPos,
        end: end
      };
      Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(setPosition) && setPosition(this.position);

      if (el) {
        el.style.left = "".concat(xPos, "px");
        el.style.top = "".concat(yPos, "px");
      }
    }
  }, {
    key: "getContainerEl",
    value: function getContainerEl() {
      var container = this.opts.container;
      return container ? [container] : this.getDocumentEl();
    }
  }, {
    key: "getWindowEl",
    value: function getWindowEl() {
      var cont = this.getContainerEl();
      return cont.map(function (item) {
        var doc = item.ownerDocument || item;
        return doc.defaultView || doc.parentWindow;
      });
    }
    /**
     * Returns documents
     */

  }, {
    key: "getDocumentEl",
    value: function getDocumentEl(el) {
      var doc = this.opts.doc;
      el = el || this.el;

      if (!this.docs) {
        var docs = [document];
        el && docs.push(el.ownerDocument);
        doc && docs.push(doc);
        this.docs = docs;
      }

      return this.docs;
    }
    /**
     * Get mouse coordinates
     * @param  {Event} event
     * @return {Object}
     */

  }, {
    key: "getPointerPos",
    value: function getPointerPos(ev) {
      var getPos = this.opts.getPointerPosition;
      var pEv = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_4__["getPointerEvent"])(ev);
      return getPos ? getPos(ev) : {
        x: pEv.clientX,
        y: pEv.clientY
      };
    }
  }, {
    key: "getStartPosition",
    value: function getStartPosition() {
      var el = this.el,
          opts = this.opts;
      var getPos = opts.getPosition;
      var result = resetPos();

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(getPos)) {
        result = getPos();
      } else if (el) {
        result = {
          x: parseFloat(el.style.left),
          y: parseFloat(el.style.top)
        };
      }

      return result;
    }
  }, {
    key: "getScrollInfo",
    value: function getScrollInfo() {
      var doc = this.opts.doc;
      var body = doc && doc.body;
      return {
        y: body ? body.scrollTop : 0,
        x: body ? body.scrollLeft : 0
      };
    }
  }, {
    key: "detectAxisLock",
    value: function detectAxisLock(x, y) {
      var relX = x;
      var relY = y;
      var absX = Math.abs(relX);
      var absY = Math.abs(relY); // Vertical or Horizontal lock

      if (relY >= absX || relY <= -absX) {
        return 'x';
      } else if (relX > absY || relX < -absY) {
        return 'y';
      }
    }
  }]);

  return Dragger;
}();



/***/ }),

/***/ "./src/utils/Droppable.js":
/*!********************************!*\
  !*** ./src/utils/Droppable.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Droppable; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_3__);



/*
  This class makes the canvas droppable
 */



var Droppable =
/*#__PURE__*/
function () {
  function Droppable(em) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Droppable);

    this.em = em;
    var el = em.get('DomComponents').getWrapper().getEl();
    this.el = el;
    this.counter = 0;
    Object(underscore__WEBPACK_IMPORTED_MODULE_3__["bindAll"])(this, 'handleDragEnter', 'handleDragOver', 'handleDrop', 'handleDragLeave');
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(el, 'dragenter', this.handleDragEnter);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(el, 'dragover', this.handleDragOver);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(el, 'drop', this.handleDrop);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_2__["on"])(el, 'dragleave', this.handleDragLeave);
    return this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Droppable, [{
    key: "endDrop",
    value: function endDrop(cancel, ev) {
      var em = this.em,
          dragStop = this.dragStop;
      this.counter = 0;
      this.over = 0;
      dragStop && dragStop(cancel);
      em.runDefault();
      em.trigger('canvas:dragend', ev);
    }
  }, {
    key: "handleDragLeave",
    value: function handleDragLeave(ev) {
      this.updateCounter(-1, ev);
    }
  }, {
    key: "updateCounter",
    value: function updateCounter(value, ev) {
      this.counter += value;
      this.counter === 0 && this.endDrop(1, ev);
    }
  }, {
    key: "handleDragEnter",
    value: function handleDragEnter(ev) {
      var _this = this;

      var em = this.em;
      var dt = ev.dataTransfer;
      this.updateCounter(1, ev);
      if (this.over) return;
      this.over = 1;
      var utils = em.get('Utils');
      var canvas = em.get('Canvas');
      var container = canvas.getBody(); // For security reason I can't read the drag data on dragenter, but
      // as I need it for the Sorter context I will use `dragContent` or just
      // any not empty element

      var content = em.get('dragContent') || '<br>';
      var dragStop, dragContent;
      em.stopDefault();

      if (em.inAbsoluteMode()) {
        var wrapper = em.get('DomComponents').getWrapper();
        var target = wrapper.append({})[0];
        var dragger = em.get('Commands').run('core:component-drag', {
          event: ev,
          guidesInfo: 1,
          center: 1,
          target: target,
          onEnd: function onEnd(ev, dragger, _ref) {
            var cancelled = _ref.cancelled;

            if (!cancelled) {
              var comp = wrapper.append(content)[0];

              var _target$getStyle = target.getStyle(),
                  left = _target$getStyle.left,
                  top = _target$getStyle.top,
                  position = _target$getStyle.position;

              comp.setStyle({
                left: left,
                top: top,
                position: position
              });

              _this.handleDragEnd(comp, dt);
            }

            target.remove();
          }
        });

        dragStop = function dragStop(cancel) {
          return dragger.stop(ev, {
            cancel: cancel
          });
        };

        dragContent = function dragContent(cnt) {
          return content = cnt;
        };
      } else {
        var sorter = new utils.Sorter({
          em: em,
          wmargin: 1,
          nested: 1,
          canvasRelative: 1,
          direction: 'a',
          container: container,
          placer: canvas.getPlacerEl(),
          containerSel: '*',
          itemSel: '*',
          pfx: 'gjs-',
          onEndMove: function onEndMove(model) {
            return _this.handleDragEnd(model, dt);
          },
          document: canvas.getFrameEl().contentDocument
        });
        sorter.setDropContent(content);
        sorter.startSort();
        this.sorter = sorter;

        dragStop = function dragStop(cancel) {
          cancel && (sorter.moved = 0);
          sorter.endMove();
        };

        dragContent = function dragContent(content) {
          return sorter.setDropContent(content);
        };
      }

      this.dragStop = dragStop;
      this.dragContent = dragContent;
      em.trigger('canvas:dragenter', dt, content);
    }
  }, {
    key: "handleDragEnd",
    value: function handleDragEnd(model, dt) {
      if (!model) return;
      var em = this.em;
      em.set('dragResult', model);
      em.trigger('canvas:drop', dt, model);
    }
    /**
     * Always need to have this handler active for enabling the drop
     * @param {Event} ev
     */

  }, {
    key: "handleDragOver",
    value: function handleDragOver(ev) {
      ev.preventDefault();
      this.em.trigger('canvas:dragover', ev);
    }
  }, {
    key: "handleDrop",
    value: function handleDrop(ev) {
      ev.preventDefault();
      var dragContent = this.dragContent;
      var dt = ev.dataTransfer;
      var content = this.getContentByData(dt).content;
      ev.target.style.border = '';
      content && dragContent && dragContent(content);
      this.endDrop(!content, ev);
    }
  }, {
    key: "getContentByData",
    value: function getContentByData(dataTransfer) {
      var em = this.em;
      var types = dataTransfer.types;
      var files = dataTransfer.files || [];
      var dragContent = em.get('dragContent');
      var content = dataTransfer.getData('text');

      if (files.length) {
        content = [];

        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          var type = file.type.split('/')[0];

          if (type == 'image') {
            content.push({
              type: type,
              file: file,
              attributes: {
                alt: file.name
              }
            });
          }
        }
      } else if (dragContent) {
        content = dragContent;
      } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["indexOf"])(types, 'text/html') >= 0) {
        content = dataTransfer.getData('text/html').replace(/<\/?meta[^>]*>/g, '');
      } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["indexOf"])(types, 'text/uri-list') >= 0) {
        content = {
          type: 'link',
          attributes: {
            href: content
          },
          content: content
        };
      } else if (Object(underscore__WEBPACK_IMPORTED_MODULE_3__["indexOf"])(types, 'text/json') >= 0) {
        var json = dataTransfer.getData('text/json');
        json && (content = JSON.parse(json));
      }

      var result = {
        content: content
      };
      em.trigger('canvas:dragdata', dataTransfer, result);
      return result;
    }
  }]);

  return Droppable;
}();



/***/ }),

/***/ "./src/utils/Resizer.js":
/*!******************************!*\
  !*** ./src/utils/Resizer.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");




var defaultOpts = {
  // Function which returns custom X and Y coordinates of the mouse
  mousePosFetcher: null,
  // Indicates custom target updating strategy
  updateTarget: null,
  // Function which gets HTMLElement as an arg and returns it relative position
  ratioDefault: 0,
  posFetcher: null,
  onStart: null,
  onMove: null,
  onEnd: null,
  // Resize unit step
  step: 1,
  // Minimum dimension
  minDim: 32,
  // Maximum dimension
  maxDim: '',
  // Unit used for height resizing
  unitHeight: 'px',
  // Unit used for width resizing
  unitWidth: 'px',
  // The key used for height resizing
  keyHeight: 'height',
  // The key used for width resizing
  keyWidth: 'width',
  // If true, will override unitHeight and unitWidth, on start, with units
  // from the current focused element (currently used only in SelectComponent)
  currentUnit: 1,
  // With this option active the mousemove event won't be altered when
  // the pointer comes over iframes
  silentFrames: 0,
  // If true the container of handlers won't be updated
  avoidContainerUpdate: 0,
  // If height is 'auto', this setting will preserve it and only update  width
  keepAutoHeight: false,
  // If width is 'auto', this setting will preserve it and only update height
  keepAutoWidth: false,
  // When keepAutoHeight is true and the height has the value 'auto', this is set to true and height isn't updated
  autoHeight: false,
  // When keepAutoWidth is true and the width has the value 'auto', this is set to true and width isn't updated
  autoWidth: false,
  // Handlers
  tl: 1,
  // Top left
  tc: 1,
  // Top center
  tr: 1,
  // Top right
  cl: 1,
  // Center left
  cr: 1,
  // Center right
  bl: 1,
  // Bottom left
  bc: 1,
  // Bottom center
  br: 1 // Bottom right

};

var createHandler = function createHandler(name, opts) {
  var pfx = opts.prefix || '';
  var el = document.createElement('i');
  el.className = pfx + 'resizer-h ' + pfx + 'resizer-h-' + name;
  el.setAttribute('data-' + pfx + 'handler', name);
  return el;
};

var getBoundingRect = function getBoundingRect(el, win) {
  var w = win || window;
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + w.pageXOffset,
    top: rect.top + w.pageYOffset,
    width: rect.width,
    height: rect.height
  };
};

var Resizer =
/*#__PURE__*/
function () {
  /**
   * Init the Resizer with options
   * @param  {Object} options
   */
  function Resizer() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Resizer);

    this.setOptions(opts);
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["bindAll"])(this, 'handleKeyDown', 'handleMouseDown', 'move', 'stop');
    return this;
  }
  /**
   * Get current connfiguration options
   * @return {Object}
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Resizer, [{
    key: "getConfig",
    value: function getConfig() {
      return this.opts;
    }
    /**
     * Setup options
     * @param {Object} options
     */

  }, {
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.opts = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["defaults"])(options, defaultOpts);
      this.setup();
    }
    /**
     * Setup resizer
     */

  }, {
    key: "setup",
    value: function setup() {
      var opts = this.opts;
      var pfx = opts.prefix || '';
      var appendTo = opts.appendTo || document.body;
      var container = this.container; // Create container if not yet exist

      if (!container) {
        container = document.createElement('div');
        container.className = "".concat(pfx, "resizer-c");
        appendTo.appendChild(container);
        this.container = container;
      }

      while (container.firstChild) {
        container.removeChild(container.firstChild);
      } // Create handlers


      var handlers = {};
      ['tl', 'tc', 'tr', 'cl', 'cr', 'bl', 'bc', 'br'].forEach(function (hdl) {
        return handlers[hdl] = opts[hdl] ? createHandler(hdl, opts) : '';
      });

      for (var n in handlers) {
        var handler = handlers[n];
        handler && container.appendChild(handler);
      }

      this.handlers = handlers;
      this.mousePosFetcher = opts.mousePosFetcher;
      this.updateTarget = opts.updateTarget;
      this.posFetcher = opts.posFetcher;
      this.onStart = opts.onStart;
      this.onMove = opts.onMove;
      this.onEnd = opts.onEnd;
    }
    /**
     * Toggle iframes pointer event
     * @param {Boolean} silent If true, iframes will be silented
     */

  }, {
    key: "toggleFrames",
    value: function toggleFrames(silent) {
      if (this.opts.silentFrames) {
        var frames = document.querySelectorAll('iframe');
        Object(underscore__WEBPACK_IMPORTED_MODULE_2__["each"])(frames, function (frame) {
          return frame.style.pointerEvents = silent ? 'none' : '';
        });
      }
    }
    /**
     * Detects if the passed element is a resize handler
     * @param  {HTMLElement} el
     * @return {Boolean}
     */

  }, {
    key: "isHandler",
    value: function isHandler(el) {
      var handlers = this.handlers;

      for (var n in handlers) {
        if (handlers[n] === el) return true;
      }

      return false;
    }
    /**
     * Returns the focused element
     * @return {HTMLElement}
     */

  }, {
    key: "getFocusedEl",
    value: function getFocusedEl() {
      return this.el;
    }
    /**
     * Returns documents
     */

  }, {
    key: "getDocumentEl",
    value: function getDocumentEl() {
      return [this.el.ownerDocument, document];
    }
    /**
     * Return element position
     * @param  {HTMLElement} el
     * @param  {Object} opts Custom options
     * @return {Object}
     */

  }, {
    key: "getElementPos",
    value: function getElementPos(el) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var posFetcher = this.posFetcher || '';
      return posFetcher ? posFetcher(el, opts) : getBoundingRect(el);
    }
    /**
     * Focus resizer on the element, attaches handlers to it
     * @param {HTMLElement} el
     */

  }, {
    key: "focus",
    value: function focus(el) {
      // Avoid focusing on already focused element
      if (el && el === this.el) {
        return;
      }

      this.el = el;
      this.updateContainer({
        forceShow: 1
      });
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(this.getDocumentEl(), 'mousedown', this.handleMouseDown);
    }
    /**
     * Blur from element
     */

  }, {
    key: "blur",
    value: function blur() {
      this.container.style.display = 'none';

      if (this.el) {
        Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(this.getDocumentEl(), 'mousedown', this.handleMouseDown);
        this.el = null;
      }
    }
    /**
     * Start resizing
     * @param  {Event} e
     */

  }, {
    key: "start",
    value: function start(e) {
      //Right or middel click
      if (e.button !== 0) return;
      e.preventDefault();
      e.stopPropagation();
      var el = this.el;
      var resizer = this;
      var config = this.opts || {};
      var attrName = 'data-' + config.prefix + 'handler';
      var rect = this.getElementPos(el, {
        target: 'el'
      });
      this.handlerAttr = e.target.getAttribute(attrName);
      this.clickedHandler = e.target;
      this.startDim = {
        t: rect.top,
        l: rect.left,
        w: rect.width,
        h: rect.height
      };
      this.rectDim = {
        t: rect.top,
        l: rect.left,
        w: rect.width,
        h: rect.height
      };
      this.startPos = {
        x: e.clientX,
        y: e.clientY
      }; // Listen events

      var doc = this.getDocumentEl();
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(doc, 'mousemove', this.move);
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(doc, 'keydown', this.handleKeyDown);
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(doc, 'mouseup', this.stop);
      Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(this.onStart) && this.onStart(e, {
        docs: doc,
        config: config,
        el: el,
        resizer: resizer
      });
      this.toggleFrames(1);
      this.move(e);
    }
    /**
     * While resizing
     * @param  {Event} e
     */

  }, {
    key: "move",
    value: function move(e) {
      var onMove = this.onMove;
      var mouseFetch = this.mousePosFetcher;
      var currentPos = mouseFetch ? mouseFetch(e) : {
        x: e.clientX,
        y: e.clientY
      };
      this.currentPos = currentPos;
      this.delta = {
        x: currentPos.x - this.startPos.x,
        y: currentPos.y - this.startPos.y
      };
      this.keys = {
        shift: e.shiftKey,
        ctrl: e.ctrlKey,
        alt: e.altKey
      };
      this.rectDim = this.calc(this);
      this.updateRect(0); // Move callback

      onMove && onMove(e); // In case the mouse button was released outside of the window

      if (e.which === 0) {
        this.stop(e);
      }
    }
    /**
     * Stop resizing
     * @param  {Event} e
     */

  }, {
    key: "stop",
    value: function stop(e) {
      var config = this.opts;
      var doc = this.getDocumentEl();
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(doc, 'mousemove', this.move);
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(doc, 'keydown', this.handleKeyDown);
      Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(doc, 'mouseup', this.stop);
      this.updateRect(1);
      this.toggleFrames();
      Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(this.onEnd) && this.onEnd(e, {
        docs: doc,
        config: config
      });
    }
    /**
     * Update rect
     */

  }, {
    key: "updateRect",
    value: function updateRect(store) {
      var el = this.el;
      var resizer = this;
      var config = this.opts;
      var rect = this.rectDim;
      var updateTarget = this.updateTarget;
      var selectedHandler = this.getSelectedHandler();
      var unitHeight = config.unitHeight,
          unitWidth = config.unitWidth,
          keyWidth = config.keyWidth,
          keyHeight = config.keyHeight; // Use custom updating strategy if requested

      if (Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(updateTarget)) {
        updateTarget(el, rect, {
          store: store,
          selectedHandler: selectedHandler,
          resizer: resizer,
          config: config
        });
      } else {
        var elStyle = el.style;
        elStyle[keyWidth] = rect.w + unitWidth;
        elStyle[keyHeight] = rect.h + unitHeight;
      }

      this.updateContainer();
    }
  }, {
    key: "updateContainer",
    value: function updateContainer() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var opts = this.opts,
          container = this.container,
          el = this.el;
      var style = container.style;

      if (!opts.avoidContainerUpdate && el) {
        var toUpdate = ['left', 'top', 'width', 'height'];
        var rectEl = this.getElementPos(el, {
          target: 'container'
        });
        toUpdate.forEach(function (pos) {
          return style[pos] = "".concat(rectEl[pos], "px");
        });
        if (opt.forceShow) style.display = 'block';
      }
    }
    /**
     * Get selected handler name
     * @return {string}
     */

  }, {
    key: "getSelectedHandler",
    value: function getSelectedHandler() {
      var handlers = this.handlers;

      if (!this.selectedHandler) {
        return;
      }

      for (var n in handlers) {
        if (handlers[n] === this.selectedHandler) return n;
      }
    }
    /**
     * Handle ESC key
     * @param  {Event} e
     */

  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      if (e.keyCode === 27) {
        // Rollback to initial dimensions
        this.rectDim = this.startDim;
        this.stop(e);
      }
    }
    /**
     * Handle mousedown to check if it's possible to start resizing
     * @param  {Event} e
     */

  }, {
    key: "handleMouseDown",
    value: function handleMouseDown(e) {
      var el = e.target;

      if (this.isHandler(el)) {
        this.selectedHandler = el;
        this.start(e);
      } else if (el !== this.el) {
        this.selectedHandler = '';
        this.blur();
      }
    }
    /**
     * All positioning logic
     * @return {Object}
     */

  }, {
    key: "calc",
    value: function calc(data) {
      var value;
      var opts = this.opts || {};
      var step = opts.step;
      var startDim = this.startDim;
      var minDim = opts.minDim;
      var maxDim = opts.maxDim;
      var deltaX = data.delta.x;
      var deltaY = data.delta.y;
      var startW = startDim.w;
      var startH = startDim.h;
      var box = {
        t: 0,
        l: 0,
        w: startW,
        h: startH
      };
      if (!data) return;
      var attr = data.handlerAttr;

      if (~attr.indexOf('r')) {
        value = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["normalizeFloat"])(startW + deltaX * step, step);
        value = Math.max(minDim, value);
        maxDim && (value = Math.min(maxDim, value));
        box.w = value;
      }

      if (~attr.indexOf('b')) {
        value = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["normalizeFloat"])(startH + deltaY * step, step);
        value = Math.max(minDim, value);
        maxDim && (value = Math.min(maxDim, value));
        box.h = value;
      }

      if (~attr.indexOf('l')) {
        value = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["normalizeFloat"])(startW - deltaX * step, step);
        value = Math.max(minDim, value);
        maxDim && (value = Math.min(maxDim, value));
        box.w = value;
      }

      if (~attr.indexOf('t')) {
        value = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["normalizeFloat"])(startH - deltaY * step, step);
        value = Math.max(minDim, value);
        maxDim && (value = Math.min(maxDim, value));
        box.h = value;
      } // Enforce aspect ratio (unless shift key is being held)


      var ratioActive = opts.ratioDefault ? !data.keys.shift : data.keys.shift;

      if (attr.indexOf('c') < 0 && ratioActive) {
        var ratio = startDim.w / startDim.h;

        if (box.w / box.h > ratio) {
          box.h = Math.round(box.w / ratio);
        } else {
          box.w = Math.round(box.h * ratio);
        }
      }

      if (~attr.indexOf('l')) {
        box.l = startDim.w - box.w;
      }

      if (~attr.indexOf('t')) {
        box.t = startDim.h - box.h;
      }

      return box;
    }
  }]);

  return Resizer;
}();

/* harmony default export */ __webpack_exports__["default"] = ({
  init: function init(opts) {
    return new Resizer(opts);
  }
});

/***/ }),

/***/ "./src/utils/Sorter.js":
/*!*****************************!*\
  !*** ./src/utils/Sorter.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js");
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var utils_mixins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/mixins */ "./src/utils/mixins.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var $ = backbone__WEBPACK_IMPORTED_MODULE_1___default.a.$;
/* harmony default export */ __webpack_exports__["default"] = (backbone__WEBPACK_IMPORTED_MODULE_1___default.a.View.extend({
  initialize: function initialize(opt) {
    this.opt = opt || {};
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["bindAll"])(this, 'startSort', 'onMove', 'endMove', 'rollback', 'updateOffset', 'moveDragHelper');
    var o = opt || {};
    this.elT = 0;
    this.elL = 0;
    this.borderOffset = o.borderOffset || 10;
    var el = o.container;
    this.el = typeof el === 'string' ? document.querySelector(el) : el;
    this.$el = $(this.el);
    this.containerSel = o.containerSel || 'div';
    this.itemSel = o.itemSel || 'div';
    this.draggable = o.draggable || true;
    this.nested = o.nested || 0;
    this.pfx = o.pfx || '';
    this.ppfx = o.ppfx || '';
    this.freezeClass = o.freezeClass || this.pfx + 'freezed';
    this.onStart = o.onStart || '';
    this.onEndMove = o.onEndMove || '';
    this.direction = o.direction || 'v'; // v (vertical), h (horizontal), a (auto)

    this.onMoveClb = o.onMove || '';
    this.relative = o.relative || 0;
    this.ignoreViewChildren = o.ignoreViewChildren || 0;
    this.ignoreModels = o.ignoreModels || 0;
    this.plh = o.placer || ''; // Frame offset

    this.wmargin = o.wmargin || 0;
    this.offTop = o.offsetTop || 0;
    this.offLeft = o.offsetLeft || 0;
    this.document = o.document || document;
    this.$document = $(this.document);
    this.dropContent = null;
    this.em = o.em || '';
    this.dragHelper = null;
    this.canvasRelative = o.canvasRelative || 0;
    this.selectOnEnd = !o.avoidSelectOnEnd;
    this.scale = o.scale;
    this.activeTextModel = null;

    if (this.em && this.em.on) {
      this.em.on('change:canvasOffset', this.updateOffset);
      this.updateOffset();
    }
  },
  getScale: function getScale() {
    return Object(underscore__WEBPACK_IMPORTED_MODULE_2__["result"])(this, scale) || 1;
  },
  getContainerEl: function getContainerEl() {
    if (!this.el) {
      var el = this.opt.container;
      this.el = typeof el === 'string' ? document.querySelector(el) : el;
      this.$el = $(this.el);
    }

    return this.el;
  },
  getDocuments: function getDocuments() {
    var em = this.em;
    var canvasDoc = em && em.get('Canvas').getBody().ownerDocument;
    var docs = [document];
    canvasDoc && docs.push(canvasDoc);
    return docs;
  },

  /**
   * Triggered when the offset of the editro is changed
   */
  updateOffset: function updateOffset() {
    var offset = this.em.get('canvasOffset') || {};
    this.offTop = offset.top;
    this.offLeft = offset.left;
  },

  /**
   * Set content to drop
   * @param {String|Object} content
   */
  setDropContent: function setDropContent(content) {
    this.dropModel = null;
    this.dropContent = content;
  },
  updateTextViewCursorPosition: function updateTextViewCursorPosition(e) {
    var Canvas = this.em.get('Canvas');
    var targetDoc = Canvas.getDocument();
    var range = null;

    if (targetDoc.caretRangeFromPoint) {
      // Chrome
      var poiner = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["getPointerEvent"])(e);
      range = targetDoc.caretRangeFromPoint(poiner.clientX, poiner.clientY);
    } else if (e.rangeParent) {
      // Firefox
      range = targetDoc.createRange();
      range.setStart(e.rangeParent, e.rangeOffset);
    }

    var sel = Canvas.getWindow().getSelection();
    Canvas.getFrameEl().focus();
    sel.removeAllRanges();
    range && sel.addRange(range);
  },
  setContentEditable: function setContentEditable(model, mode) {
    if (model) {
      var el = model.getEl();
      if (el.contentEditable != mode) el.contentEditable = mode;
    }
  },

  /**
   * Toggle cursor while sorting
   * @param {Boolean} active
   */
  toggleSortCursor: function toggleSortCursor(active) {
    var em = this.em;
    var body = document.body;
    var pfx = this.ppfx || this.pfx;
    var sortCls = pfx + 'grabbing';
    var emBody = em ? em.get('Canvas').getBody() : ''; // Avoid updating body className as it causes a huge repaint
    // Noticeable with "fast" drag of blocks

    if (active) {
      em && em.get('Canvas').startAutoscroll(); //body.className += ' ' + sortCls;
      //if (em) emBody.className += ' ' + sortCls;
    } else {
      em && em.get('Canvas').stopAutoscroll(); //body.className = body.className.replace(sortCls, '').trim();
      //if(em) emBody.className = emBody.className.replace(sortCls, '').trim();
    }
  },

  /**
   * Set drag helper
   * @param {HTMLElement} el
   * @param {Event} event
   */
  setDragHelper: function setDragHelper(el, event) {
    var ev = event || '';
    var clonedEl = el.cloneNode(1);
    var rect = el.getBoundingClientRect();
    var computed = getComputedStyle(el);
    var style = '';

    for (var i = 0; i < computed.length; i++) {
      var prop = computed[i];
      style += "".concat(prop, ":").concat(computed.getPropertyValue(prop), ";");
    }

    document.body.appendChild(clonedEl);
    clonedEl.className += " ".concat(this.pfx, "bdrag");
    clonedEl.setAttribute('style', style);
    this.dragHelper = clonedEl;
    clonedEl.style.width = "".concat(rect.width, "px");
    clonedEl.style.height = "".concat(rect.height, "px");
    ev && this.moveDragHelper(ev); // Listen mouse move events

    if (this.em) {
      $(this.em.get('Canvas').getBody().ownerDocument).off('mousemove', this.moveDragHelper).on('mousemove', this.moveDragHelper);
    }

    $(document).off('mousemove', this.moveDragHelper).on('mousemove', this.moveDragHelper);
  },

  /**
   * Update the position of the helper
   * @param  {Event} e
   */
  moveDragHelper: function moveDragHelper(e) {
    var doc = e.target.ownerDocument;

    if (!this.dragHelper || !doc) {
      return;
    }

    var posY = e.pageY;
    var posX = e.pageX;
    var addTop = 0;
    var addLeft = 0;
    var window = doc.defaultView || doc.parentWindow;
    var frame = window.frameElement;
    var dragHelperStyle = this.dragHelper.style; // If frame is present that means mouse has moved over the editor's canvas,
    // which is rendered inside the iframe and the mouse move event comes from
    // the iframe, not the parent window. Mouse position relative to the frame's
    // parent window needs to account for the frame's position relative to the
    // parent window.

    if (frame) {
      var frameRect = frame.getBoundingClientRect();
      addTop = frameRect.top + document.documentElement.scrollTop;
      addLeft = frameRect.left + document.documentElement.scrollLeft;
      posY = e.clientY;
      posX = e.clientX;
    }

    dragHelperStyle.top = posY + addTop + 'px';
    dragHelperStyle.left = posX + addLeft + 'px';
  },

  /**
   * Returns true if the element matches with selector
   * @param {Element} el
   * @param {String} selector
   * @return {Boolean}
   */
  matches: function matches(el, selector, useBody) {
    return utils_mixins__WEBPACK_IMPORTED_MODULE_3__["matches"].call(el, selector);
  },

  /**
   * Closest parent
   * @param {Element} el
   * @param {String} selector
   * @return {Element|null}
   */
  closest: function closest(el, selector) {
    if (!el) return;
    var elem = el.parentNode;

    while (elem && elem.nodeType === 1) {
      if (this.matches(elem, selector)) return elem;
      elem = elem.parentNode;
    }

    return null;
  },

  /**
   * Get the offset of the element
   * @param  {HTMLElement} el
   * @return {Object}
   */
  offset: function offset(el) {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top + document.body.scrollTop,
      left: rect.left + document.body.scrollLeft
    };
  },

  /**
   * Create placeholder
   * @return {HTMLElement}
   */
  createPlaceholder: function createPlaceholder() {
    var pfx = this.pfx;
    var el = document.createElement('div');
    var ins = document.createElement('div');
    el.className = pfx + 'placeholder';
    el.style.display = 'none';
    el.style['pointer-events'] = 'none';
    ins.className = pfx + 'placeholder-int';
    el.appendChild(ins);
    return el;
  },

  /**
   * Picking component to move
   * @param {HTMLElement} src
   * */
  startSort: function startSort(src) {
    var em = this.em;
    var itemSel = this.itemSel;
    var contSel = this.containerSel;
    var container = this.getContainerEl();
    var docs = this.getDocuments();
    var onStart = this.onStart;
    var srcModel;
    var plh = this.plh;
    this.dropModel = null;
    this.moved = 0; // Check if the start element is a valid one, if not get the
    // closest valid one

    if (src && !this.matches(src, "".concat(itemSel, ", ").concat(contSel))) {
      src = this.closest(src, itemSel);
    }

    this.eV = src; // Create placeholder if not yet exists

    if (!plh) {
      plh = this.createPlaceholder();
      container.appendChild(plh);
      this.plh = plh;
    }

    if (src) {
      srcModel = this.getSourceModel(src);
      srcModel && srcModel.set && srcModel.set('status', 'freezed');
    }

    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(container, 'mousemove dragover', this.onMove);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(docs, 'mouseup dragend touchend', this.endMove);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["on"])(docs, 'keydown', this.rollback);
    onStart && onStart(); // Avoid strange effects on dragging

    em && em.clearSelection();
    this.toggleSortCursor(1);
    em && em.trigger('sorter:drag:start', src, srcModel);
  },

  /**
   * Get the model from HTMLElement target
   * @return {Model|null}
   */
  getTargetModel: function getTargetModel(el) {
    var elem = el || this.target;
    return $(elem).data('model');
  },

  /**
   * Get the model of the current source element (element to drag)
   * @return {Model}
   */
  getSourceModel: function getSourceModel(source) {
    var _this = this;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        target = _ref.target,
        _ref$avoidChildren = _ref.avoidChildren,
        avoidChildren = _ref$avoidChildren === void 0 ? 1 : _ref$avoidChildren;

    var em = this.em,
        eV = this.eV;
    var src = source || eV;
    var dropModel = this.dropModel,
        dropContent = this.dropContent;

    var isTextable = function isTextable(src) {
      return src && target && src.opt && src.opt.avoidChildren && _this.isTextableActive(src, target);
    };

    if (dropContent && em) {
      if (isTextable(dropModel)) {
        dropModel = null;
      }

      if (!dropModel) {
        var comps = em.get('DomComponents').getComponents();
        var opts = {
          avoidChildren: avoidChildren,
          avoidStore: 1,
          avoidUpdateStyle: 1
        };
        var tempModel = comps.add(dropContent, _objectSpread({}, opts, {
          temporary: 1
        }));
        dropModel = comps.remove(tempModel, opts);
        dropModel = dropModel instanceof Array ? dropModel[0] : dropModel;
        this.dropModel = dropModel;

        if (isTextable(dropModel)) {
          return this.getSourceModel(src, {
            target: target,
            avoidChildren: 0
          });
        }
      }

      return dropModel;
    }

    return src && $(src).data('model');
  },

  /**
   * Highlight target
   * @param  {Model|null} model
   */
  selectTargetModel: function selectTargetModel(model) {
    if (model instanceof backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection) {
      return;
    }

    var prevModel = this.targetModel;

    if (prevModel) {
      prevModel.set('status', '');
    }

    if (model && model.set) {
      model.set('status', 'selected-parent');
      this.targetModel = model;
    }
  },

  /**
   * During move
   * @param {Event} e
   * */
  onMove: function onMove(e) {
    var ev = e;
    var em = this.em,
        onMoveClb = this.onMoveClb,
        plh = this.plh;
    this.moved = 1; // Turn placeholder visibile

    var dsp = plh.style.display;
    if (!dsp || dsp === 'none') plh.style.display = 'block'; // Cache all necessary positions

    var eO = this.offset(this.el);
    this.elT = this.wmargin ? Math.abs(eO.top) : eO.top;
    this.elL = this.wmargin ? Math.abs(eO.left) : eO.left;
    var rY = e.pageY - this.elT + this.el.scrollTop;
    var rX = e.pageX - this.elL + this.el.scrollLeft;

    if (this.canvasRelative && em) {
      var mousePos = em.get('Canvas').getMouseRelativeCanvas(e);
      rX = mousePos.x;
      rY = mousePos.y;
    }

    this.rX = rX;
    this.rY = rY;
    this.eventMove = e; //var targetNew = this.getTargetFromEl(e.target);

    var sourceModel = this.getSourceModel();
    var dims = this.dimsFromTarget(e.target, rX, rY);
    var target = this.target;
    var targetModel = this.getTargetModel(target);
    this.selectTargetModel(targetModel);
    if (!targetModel) plh.style.display = 'none';
    this.lastDims = dims;
    var pos = this.findPosition(dims, rX, rY);

    if (this.isTextableActive(sourceModel, targetModel)) {
      this.activeTextModel = targetModel;
      this.setContentEditable(targetModel, true);
      plh.style.display = 'none';
      this.lastPos = pos;
      this.updateTextViewCursorPosition(ev);
    } else {
      this.disableTextable();
      this.activeTextModel = null; // If there is a significant changes with the pointer

      if (!this.lastPos || this.lastPos.index != pos.index || this.lastPos.method != pos.method) {
        this.movePlaceholder(this.plh, dims, pos, this.prevTargetDim);
        if (!this.$plh) this.$plh = $(this.plh); // With canvasRelative the offset is calculated automatically for
        // each element

        if (!this.canvasRelative) {
          if (this.offTop) this.$plh.css('top', '+=' + this.offTop + 'px');
          if (this.offLeft) this.$plh.css('left', '+=' + this.offLeft + 'px');
        }

        this.lastPos = pos;
      }
    }

    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(onMoveClb) && onMoveClb(e);
    em && em.trigger('sorter:drag', {
      target: target,
      targetModel: targetModel,
      sourceModel: sourceModel,
      dims: dims,
      pos: pos,
      x: rX,
      y: rY
    });
  },
  isTextableActive: function isTextableActive(src, trg) {
    return src && src.get && src.get('textable') && trg && trg.is('text');
  },
  disableTextable: function disableTextable() {
    var activeTextModel = this.activeTextModel;
    activeTextModel && activeTextModel.getView().disableEditing();
  },

  /**
   * Returns true if the elements is in flow, so is not in flow where
   * for example the component is with float:left
   * @param  {HTMLElement} el
   * @param  {HTMLElement} parent
   * @return {Boolean}
   * @private
   * */
  isInFlow: function isInFlow(el, parent) {
    if (!el) return false;
    parent = parent || document.body;
    var ch = -1,
        h;
    var elem = el;
    h = elem.offsetHeight;
    if (
    /*h < ch || */
    !this.styleInFlow(elem, parent)) return false;else return true;
  },

  /**
   * Check if el has style to be in flow
   * @param  {HTMLElement} el
   * @param  {HTMLElement} parent
   * @return {Boolean}
   * @private
   */
  styleInFlow: function styleInFlow(el, parent) {
    if (Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["isTextNode"])(el)) return;
    var style = el.style || {};
    var $el = $(el);
    var $parent = parent && $(parent);
    if (style.overflow && style.overflow !== 'visible') return;
    if ($el.css('float') !== 'none') return;
    if ($parent && $parent.css('display') == 'flex' && $parent.css('flex-direction') !== 'column') return;

    switch (style.position) {
      case 'static':
      case 'relative':
      case '':
        break;

      default:
        return;
    }

    switch (el.tagName) {
      case 'TR':
      case 'TBODY':
      case 'THEAD':
      case 'TFOOT':
        return true;
    }

    switch ($el.css('display')) {
      case 'block':
      case 'list-item':
      case 'table':
      case 'flex':
        return true;
    }

    return;
  },

  /**
   * Check if the target is valid with the actual source
   * @param  {HTMLElement} trg
   * @return {Boolean}
   */
  validTarget: function validTarget(trg, src) {
    var trgModel = this.getTargetModel(trg);
    var srcModel = this.getSourceModel(src, {
      target: trgModel
    });
    src = srcModel && srcModel.view && srcModel.view.el;
    trg = trgModel && trgModel.view && trgModel.view.el;
    var result = {
      valid: true,
      src: src,
      srcModel: srcModel,
      trg: trg,
      trgModel: trgModel
    };

    if (!src || !trg) {
      result.valid = false;
      return result;
    } // check if the source is draggable in target


    var draggable = srcModel.get('draggable');
    draggable = draggable instanceof Array ? draggable.join(', ') : draggable;
    result.dragInfo = draggable;
    draggable = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(draggable) ? this.matches(trg, draggable) : draggable;
    result.draggable = draggable; // Check if the target could accept the source

    var droppable = trgModel.get('droppable');
    droppable = droppable instanceof backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection ? 1 : droppable;
    droppable = droppable instanceof Array ? droppable.join(', ') : droppable;
    result.dropInfo = droppable;
    droppable = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isString"])(droppable) ? this.matches(src, droppable) : droppable;
    droppable = draggable && this.isTextableActive(srcModel, trgModel) ? 1 : droppable;
    result.droppable = droppable;

    if (!droppable || !draggable) {
      result.valid = false;
    }

    return result;
  },

  /**
   * Get dimensions of nodes relative to the coordinates
   * @param  {HTMLElement} target
   * @param {number} rX Relative X position
   * @param {number} rY Relative Y position
   * @return {Array<Array>}
   */
  dimsFromTarget: function dimsFromTarget(target, rX, rY) {
    var em = this.em;
    var dims = [];

    if (!target) {
      return dims;
    } // Select the first valuable target


    if (!this.matches(target, "".concat(this.itemSel, ", ").concat(this.containerSel))) {
      target = this.closest(target, this.itemSel);
    } // If draggable is an array the target will be one of those


    if (this.draggable instanceof Array) {
      target = this.closest(target, this.draggable.join(','));
    }

    if (!target) {
      return dims;
    } // Check if the target is different from the previous one


    if (this.prevTarget && this.prevTarget != target) {
      this.prevTarget = null;
    } // New target found


    if (!this.prevTarget) {
      this.targetP = this.closest(target, this.containerSel); // Check if the source is valid with the target

      var validResult = this.validTarget(target);
      em && em.trigger('sorter:drag:validation', validResult);

      if (!validResult.valid && this.targetP) {
        return this.dimsFromTarget(this.targetP, rX, rY);
      }

      this.prevTarget = target;
      this.prevTargetDim = this.getDim(target);
      this.cacheDimsP = this.getChildrenDim(this.targetP);
      this.cacheDims = this.getChildrenDim(target);
    } // If the target is the previous one will return the cached dims


    if (this.prevTarget == target) dims = this.cacheDims; // Target when I will drop element to sort

    this.target = this.prevTarget; // Generally, on any new target the poiner enters inside its area and
    // triggers nearBorders(), so have to take care of this

    if (this.nearBorders(this.prevTargetDim, rX, rY) || !this.nested && !this.cacheDims.length) {
      var targetParent = this.targetP;

      if (targetParent && this.validTarget(targetParent).valid) {
        dims = this.cacheDimsP;
        this.target = targetParent;
      }
    }

    this.lastPos = null;
    return dims;
  },

  /**
   * Get valid target from element
   * This method should replace dimsFromTarget()
   * @param  {HTMLElement} el
   * @return {HTMLElement}
   */
  getTargetFromEl: function getTargetFromEl(el) {
    var target = el;
    var targetParent;
    var targetPrev = this.targetPrev;
    var em = this.em;
    var containerSel = this.containerSel;
    var itemSel = this.itemSel; // Select the first valuable target

    if (!this.matches(target, "".concat(itemSel, ", ").concat(containerSel))) {
      target = this.closest(target, itemSel);
    } // If draggable is an array the target will be one of those
    // TODO check if this options is used somewhere


    if (this.draggable instanceof Array) {
      target = this.closest(target, this.draggable.join(','));
    } // Check if the target is different from the previous one


    if (targetPrev && targetPrev != target) {
      this.targetPrev = '';
    } // New target found


    if (!this.targetPrev) {
      targetParent = this.closest(target, containerSel); // If the current target is not valid (src/trg reasons) try with
      // the parent one (if exists)

      var validResult = this.validTarget(target);
      em && em.trigger('sorter:drag:validation', validResult);

      if (!validResult.valid && targetParent) {
        return this.getTargetFromEl(targetParent);
      }

      this.targetPrev = target;
    } // Generally, on any new target the poiner enters inside its area and
    // triggers nearBorders(), so have to take care of this


    if (this.nearElBorders(target)) {
      targetParent = this.closest(target, containerSel);

      if (targetParent && this.validTarget(targetParent).valid) {
        target = targetParent;
      }
    }

    return target;
  },

  /**
   * Check if the current pointer is neare to element borders
   * @return {Boolen}
   */
  nearElBorders: function nearElBorders(el) {
    var off = 10;
    var rect = el.getBoundingClientRect();
    var body = el.ownerDocument.body;

    var _this$getCurrentPos = this.getCurrentPos(),
        x = _this$getCurrentPos.x,
        y = _this$getCurrentPos.y;

    var top = rect.top + body.scrollTop;
    var left = rect.left + body.scrollLeft;
    var width = rect.width;
    var height = rect.height;

    if (y < top + off || // near top edge
    y > top + height - off || // near bottom edge
    x < left + off || // near left edge
    x > left + width - off // near right edge
    ) {
        return 1;
      }
  },
  getCurrentPos: function getCurrentPos() {
    var ev = this.eventMove;
    var x = ev.pageX || 0;
    var y = ev.pageY || 0;
    return {
      x: x,
      y: y
    };
  },

  /**
   * Returns dimensions and positions about the element
   * @param {HTMLElement} el
   * @return {Array<number>}
   */
  getDim: function getDim(el) {
    var em = this.em,
        canvasRelative = this.canvasRelative;
    var top, left, height, width;

    if (canvasRelative && em) {
      var canvas = em.get('Canvas');
      var pos = canvas.getElementPos(el);
      var elOffsets = canvas.getElementOffsets(el);
      top = pos.top - elOffsets.marginTop;
      left = pos.left - elOffsets.marginLeft;
      height = pos.height + elOffsets.marginTop + elOffsets.marginBottom;
      width = pos.width + elOffsets.marginLeft + elOffsets.marginRight;
    } else {
      var o = this.offset(el);
      top = this.relative ? el.offsetTop : o.top - (this.wmargin ? -1 : 1) * this.elT;
      left = this.relative ? el.offsetLeft : o.left - (this.wmargin ? -1 : 1) * this.elL;
      height = el.offsetHeight;
      width = el.offsetWidth;
    }

    return [top, left, height, width];
  },

  /**
   * Get children dimensions
   * @param {HTMLELement} el Element root
   * @retun {Array}
   * */
  getChildrenDim: function getChildrenDim(trg) {
    var _this2 = this;

    var dims = [];
    if (!trg) return dims; // Get children based on getChildrenContainer

    var trgModel = this.getTargetModel(trg);

    if (trgModel && trgModel.view && !this.ignoreViewChildren) {
      trg = trgModel.view.getChildrenContainer();
    }

    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["each"])(trg.children, function (el, i) {
      var model = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["getModel"])(el, $);
      var elIndex = model && model.index ? model.index() : i;

      if (!Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["isTextNode"])(el) && !_this2.matches(el, _this2.itemSel)) {
        return;
      }

      var dim = _this2.getDim(el);

      var dir = _this2.direction;
      if (dir == 'v') dir = true;else if (dir == 'h') dir = false;else dir = _this2.isInFlow(el, trg);
      dim.push(dir, el, elIndex);
      dims.push(dim);
    });
    return dims;
  },

  /**
   * Check if the coordinates are near to the borders
   * @param {Array<number>} dim
   * @param {number} rX Relative X position
   * @param {number} rY Relative Y position
   * @return {Boolean}
   * */
  nearBorders: function nearBorders(dim, rX, rY) {
    var result = 0;
    var off = this.borderOffset;
    var x = rX || 0;
    var y = rY || 0;
    var t = dim[0];
    var l = dim[1];
    var h = dim[2];
    var w = dim[3];
    if (t + off > y || y > t + h - off || l + off > x || x > l + w - off) result = 1;
    return !!result;
  },

  /**
   * Find the position based on passed dimensions and coordinates
   * @param {Array<Array>} dims Dimensions of nodes to parse
   * @param {number} posX X coordindate
   * @param {number} posY Y coordindate
   * @retun {Object}
   * */
  findPosition: function findPosition(dims, posX, posY) {
    var result = {
      index: 0,
      indexEl: 0,
      method: 'before'
    };
    var leftLimit = 0,
        xLimit = 0,
        dimRight = 0,
        yLimit = 0,
        xCenter = 0,
        yCenter = 0,
        dimDown = 0,
        dim = 0; // Each dim is: Top, Left, Height, Width

    for (var i = 0, len = dims.length; i < len; i++) {
      dim = dims[i]; // Right position of the element. Left + Width

      dimRight = dim[1] + dim[3]; // Bottom position of the element. Top + Height

      dimDown = dim[0] + dim[2]; // X center position of the element. Left + (Width / 2)

      xCenter = dim[1] + dim[3] / 2; // Y center position of the element. Top + (Height / 2)

      yCenter = dim[0] + dim[2] / 2; // Skip if over the limits

      if (xLimit && dim[1] > xLimit || yLimit && yCenter >= yLimit || // >= avoid issue with clearfixes
      leftLimit && dimRight < leftLimit) continue;
      result.index = i;
      result.indexEl = dim[6]; // If it's not in flow (like 'float' element)

      if (!dim[4]) {
        if (posY < dimDown) yLimit = dimDown; //If x lefter than center

        if (posX < xCenter) {
          xLimit = xCenter;
          result.method = 'before';
        } else {
          leftLimit = xCenter;
          result.method = 'after';
        }
      } else {
        // If y upper than center
        if (posY < yCenter) {
          result.method = 'before';
          break;
        } else result.method = 'after'; // After last element

      }
    }

    return result;
  },

  /**
   * Updates the position of the placeholder
   * @param {HTMLElement} phl
   * @param {Array<Array>} dims
   * @param {Object} pos Position object
   * @param {Array<number>} trgDim target dimensions
   * */
  movePlaceholder: function movePlaceholder(plh, dims, pos, trgDim) {
    var marg = 0,
        t = 0,
        l = 0,
        w = 0,
        h = 0,
        un = 'px',
        margI = 5,
        brdCol = '#62c462',
        brd = 3,
        method = pos.method;
    var elDim = dims[pos.index];
    plh.style.borderColor = 'transparent ' + brdCol;
    plh.style.borderWidth = brd + un + ' ' + (brd + 2) + un;
    plh.style.margin = '-' + brd + 'px 0 0';

    if (elDim) {
      // If it's not in flow (like 'float' element)
      if (!elDim[4]) {
        w = 'auto';
        h = elDim[2] - marg * 2 + un;
        t = elDim[0] + marg;
        l = method == 'before' ? elDim[1] - marg : elDim[1] + elDim[3] - marg;
        plh.style.borderColor = brdCol + ' transparent';
        plh.style.borderWidth = brd + 2 + un + ' ' + brd + un;
        plh.style.margin = '0 0 0 -' + brd + 'px';
      } else {
        w = elDim[3] + un;
        h = 'auto';
        t = method == 'before' ? elDim[0] - marg : elDim[0] + elDim[2] - marg;
        l = elDim[1];
      }
    } else {
      if (!this.nested) {
        plh.style.display = 'none';
        return;
      }

      if (trgDim) {
        t = trgDim[0] + margI;
        l = trgDim[1] + margI;
        w = parseInt(trgDim[3]) - margI * 2 + un;
        h = 'auto';
      }
    }

    plh.style.top = t + un;
    plh.style.left = l + un;
    if (w) plh.style.width = w;
    if (h) plh.style.height = h;
  },

  /**
   * Leave item
   * @param event
   *
   * @return void
   * */
  endMove: function endMove(e) {
    var _this3 = this;

    var moved = [null];
    var docs = this.getDocuments();
    var container = this.getContainerEl();
    var onEndMove = this.onEndMove;
    var target = this.target,
        lastPos = this.lastPos;
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(container, 'mousemove dragover', this.onMove);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(docs, 'mouseup dragend touchend', this.endMove);
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(docs, 'keydown', this.rollback);
    this.plh.style.display = 'none';
    var src = this.eV;

    if (src && this.selectOnEnd) {
      var srcModel = this.getSourceModel();

      if (srcModel && srcModel.set) {
        srcModel.set('status', '');
        srcModel.set('status', 'selected');
      }
    }

    if (this.moved) {
      var toMove = this.toMove;
      var toMoveArr = Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isArray"])(toMove) ? toMove : toMove ? [toMove] : [src];
      toMoveArr.forEach(function (model) {
        moved.push(_this3.move(target, model, lastPos));
      });
    }

    if (this.plh) this.plh.style.display = 'none';
    var dragHelper = this.dragHelper;

    if (dragHelper) {
      dragHelper.parentNode.removeChild(dragHelper);
      this.dragHelper = null;
    }

    this.disableTextable();
    this.selectTargetModel();
    this.toggleSortCursor();
    this.toMove = null;
    Object(underscore__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(onEndMove) && moved.forEach(function (m) {
      return onEndMove(m, _this3);
    });
  },

  /**
   * Move component to new position
   * @param {HTMLElement} dst Destination target
   * @param {HTMLElement} src Element to move
   * @param {Object} pos Object with position coordinates
   * */
  move: function move(dst, src, pos) {
    var em = this.em,
        activeTextModel = this.activeTextModel,
        dropContent = this.dropContent;
    var srcEl = Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["getElement"])(src);
    em && em.trigger('component:dragEnd:before', dst, srcEl, pos); // @depricated

    var warns = [];
    var index = pos.indexEl;
    var modelToDrop, modelTemp, created;
    var validResult = this.validTarget(dst, srcEl);
    var targetCollection = $(dst).data('collection');
    var model = validResult.srcModel;
    var droppable = validResult.droppable;
    var draggable = validResult.draggable;
    var dropInfo = validResult.dropInfo;
    var dragInfo = validResult.dragInfo;
    var trgModel = validResult.trgModel;
    droppable = trgModel instanceof backbone__WEBPACK_IMPORTED_MODULE_1___default.a.Collection ? 1 : droppable;
    var isTextableActive = this.isTextableActive(model, trgModel);

    if (targetCollection && droppable && draggable) {
      index = pos.method === 'after' ? index + 1 : index;
      var opts = {
        at: index,
        noIncrement: 1
      };

      if (!dropContent) {
        // Putting `avoidStore` here will make the UndoManager behave wrong
        opts.temporary = 1;
        modelTemp = targetCollection.add({}, _objectSpread({}, opts));

        if (model.collection) {
          modelToDrop = model.collection.remove(model, {
            temporary: 1
          });
        }
      } else {
        modelToDrop = dropContent;
        opts.silent = false;
        opts.avoidUpdateStyle = 1;
      }

      if (isTextableActive) {
        var viewActive = activeTextModel.getView();
        activeTextModel.trigger('active');
        var activeRte = viewActive.activeRte;
        var modelEl = model.getEl();
        delete model.opt.temporary;
        model.getView().render();
        modelEl.setAttribute('data-gjs-textable', 'true');
        var outerHTML = modelEl.outerHTML;
        activeRte.insertHTML && activeRte.insertHTML(outerHTML);
      } else {
        created = targetCollection.add(modelToDrop, opts);
      }

      if (!dropContent) {
        targetCollection.remove(modelTemp);
      } else {
        this.dropContent = null;
      } // This will cause to recalculate children dimensions


      this.prevTarget = null;
    } else {
      if (!targetCollection) {
        warns.push('Target collection not found');
      }

      if (!droppable) {
        warns.push("Target is not droppable, accepts [".concat(dropInfo, "]"));
      }

      if (!draggable) {
        warns.push("Component not draggable, acceptable by [".concat(dragInfo, "]"));
      }

      console.warn('Invalid target position: ' + warns.join(', '));
    }

    em && em.trigger('component:dragEnd', targetCollection, modelToDrop, warns); // @depricated

    em && em.trigger('sorter:drag:end', {
      targetCollection: targetCollection,
      modelToDrop: modelToDrop,
      warns: warns,
      validResult: validResult,
      dst: dst,
      srcEl: srcEl
    });
    return created;
  },

  /**
   * Rollback to previous situation
   * @param {Event}
   * @param {Bool} Indicates if rollback in anycase
   * */
  rollback: function rollback(e) {
    Object(utils_mixins__WEBPACK_IMPORTED_MODULE_3__["off"])(this.getDocuments(), 'keydown', this.rollback);
    var key = e.which || e.keyCode;

    if (key == 27) {
      this.moved = 0;
      this.endMove();
    }
  }
}));

/***/ }),

/***/ "./src/utils/dom.js":
/*!**************************!*\
  !*** ./src/utils/dom.js ***!
  \**************************/
/*! exports provided: empty, replaceWith, appendAtIndex, appendVNodes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replaceWith", function() { return replaceWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendAtIndex", function() { return appendAtIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendVNodes", function() { return appendVNodes; });
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);
// DOM helpers

var KEY_TAG = 'tag';
var KEY_ATTR = 'attributes';
var KEY_CHILD = 'children';
var empty = function empty(node) {
  while (node.firstChild) {
    node.removeChild(node.firstChild);
  }
};
var replaceWith = function replaceWith(oldEl, newEl) {
  oldEl.parentNode.replaceChild(newEl, oldEl);
};
var appendAtIndex = function appendAtIndex(parent, child, index) {
  var childNodes = parent.childNodes;
  var total = childNodes.length;
  var at = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(index) ? total : index;

  if (at >= total) {
    parent.appendChild(child);
  } else {
    parent.insertBefore(child, childNodes[at]);
  }
};
/**
 * Append an array of vNodes to an element
 * @param {HTMLElement} node HTML element
 * @param {Array} vNodes Array of node objects
 */

var appendVNodes = function appendVNodes(node) {
  var vNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var vNodesArr = Array.isArray(vNodes) ? vNodes : [vNodes];
  vNodesArr.forEach(function (vnode) {
    var tag = vnode[KEY_TAG] || 'div';
    var attr = vnode[KEY_ATTR] || {};
    var el = document.createElement(tag);
    Object(underscore__WEBPACK_IMPORTED_MODULE_0__["each"])(attr, function (value, key) {
      el.setAttribute(key, value);
    });
    node.appendChild(el);
  });
};

/***/ }),

/***/ "./src/utils/extender.js":
/*!*******************************!*\
  !*** ./src/utils/extender.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (function (_ref) {
  var $ = _ref.$,
      Backbone = _ref.Backbone;

  if (Backbone) {
    var ViewProt = Backbone.View.prototype;
    var eventNsMap = {};
    ViewProt.eventNsMap = eventNsMap;

    ViewProt.delegate = function (eventName, selector, listener) {
      var vid = '.delegateEvents' + this.cid;
      this.$el.on(eventName, selector, listener); //return this;

      var eventMap = eventNsMap[vid];

      if (!eventMap) {
        eventMap = [];
        eventNsMap[vid] = eventMap;
      }

      eventMap.push({
        eventName: eventName,
        selector: selector,
        listener: listener
      });
      return this;
    };

    ViewProt.undelegateEvents = function () {
      var _this = this;

      var vid = '.delegateEvents' + this.cid;

      if (this.$el) {
        //this.$el.off(); return this;
        var eventMap = eventNsMap[vid];

        if (eventMap) {
          eventMap.forEach(function (_ref2) {
            var eventName = _ref2.eventName,
                selector = _ref2.selector,
                listener = _ref2.listener;

            _this.$el.off(eventName);
          });
        }
      }

      return this;
    };

    ViewProt.undelegate = function (ev, sel, list) {
      var _this2 = this;

      var vid = '.delegateEvents' + this.cid; //this.$el.off(ev, sel, list); return this;

      var eventMap = eventNsMap[vid];

      if (eventMap) {
        eventMap.forEach(function (_ref3) {
          var eventName = _ref3.eventName,
              selector = _ref3.selector,
              listener = _ref3.listener;

          if (eventName == ev && selector == sel) {
            _this2.$el.off(eventName);
          }
        });
      }

      return this;
    };
  }

  if ($ && $.prototype.constructor.name !== 'jQuery') {
    var fn = $.fn;

    var splitNamespace = function splitNamespace(name) {
      var namespaceArray = name.split('.');
      return name.indexOf('.') !== 0 ? [namespaceArray[0], namespaceArray.slice(1)] : [null, namespaceArray];
    };

    var on = $.prototype.on;
    var off = $.prototype.off;
    var trigger = $.prototype.trigger;
    var offset = $.prototype.offset;

    var getEvents = function getEvents(eventName) {
      return eventName.split(/[,\s]+/g);
    };

    var getNamespaces = function getNamespaces(eventName) {
      return eventName.split('.');
    };

    fn.on = function (eventName, delegate, callback, runOnce) {
      var _this3 = this;

      if (typeof eventName == 'string') {
        var events = getEvents(eventName);

        if (events.length == 1) {
          eventName = events[0];
          var namespaces = getNamespaces(eventName);

          if (eventName.indexOf('.') !== 0) {
            eventName = namespaces[0];
          }

          namespaces = namespaces.slice(1);

          if (namespaces.length) {
            //console.log('Found event with namespaces', namespaces, eventName, delegate, this);
            var cashNs = this.data('_cashNs') || []; // cashNs[namespace]

            this.data('_cashNs', namespaces); // for each ns need to store '.store' => eventName, delegate, callback
          }

          return on.call(this, eventName, delegate, callback, runOnce);
        } else {
          events.forEach(function (eventName) {
            return _this3.on(eventName, delegate, callback, runOnce);
          });
          return this;
        }
      } else {
        return on.call(this, eventName, delegate, callback, runOnce);
      }
    };

    fn.off = function (eventName, callback) {
      var _this4 = this;

      if (typeof eventName == 'string') {
        var events = getEvents(eventName);

        if (events.length == 1) {
          eventName = events[0];
          var namespaces = getNamespaces(eventName);

          if (eventName.indexOf('.') !== 0) {
            eventName = namespaces[0];
          }

          namespaces = namespaces.slice(1);

          if (namespaces.length) {// Have to off only with the same namespace
          }

          return off.call(this, eventName, callback);
        } else {
          events.forEach(function (eventName) {
            return _this4.off(eventName, callback);
          });
          return this;
        }
      } else {
        return off.call(this, eventName, callback);
      }
    };

    fn.trigger = function (eventName, data) {
      var _this5 = this;

      if (eventName instanceof $.Event) {
        return this.trigger(eventName.type, data);
      }

      if (typeof eventName == 'string') {
        var events = getEvents(eventName);

        if (events.length == 1) {
          eventName = events[0];
          var namespaces = getNamespaces(eventName);

          if (eventName.indexOf('.') !== 0) {
            eventName = namespaces[0];
          }

          namespaces = namespaces.slice(1);

          if (namespaces.length) {// have to trigger with same namespaces and eventName
          }

          return trigger.call(this, eventName, data);
        } else {
          events.forEach(function (eventName) {
            return _this5.trigger(eventName, data);
          });
          return this;
        }
      } else {
        return trigger.call(this, eventName, data);
      }
    };

    fn.hide = function () {
      return this.css('display', 'none');
    };

    fn.show = function () {
      return this.css('display', 'block');
    };

    fn.focus = function () {
      var el = this.get(0);
      el && el.focus();
      return this;
    }; // For SVGs in IE


    fn.removeClass = function (c) {
      if (!arguments.length) {
        return this.attr('class', '');
      }

      var classes = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isString"])(c) && c.match(/\S+/g);
      return classes ? this.each(function (el) {
        Object(underscore__WEBPACK_IMPORTED_MODULE_0__["each"])(classes, function (c) {
          if (el.classList) {
            el.classList.remove(c);
          } else {
            var val = el.className;
            var bval = el.className.baseVal;

            if (!Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(bval)) {
              val.baseVal = bval.replace(c, '');
            } else {
              el.className = val.replace(c, '');
            }
          }
        });
      }) : this;
    }, fn.remove = function () {
      return this.each(function (node) {
        return node.parentNode && node.parentNode.removeChild(node);
      });
    }, // For spectrum compatibility
    fn.bind = function (ev, h) {
      return this.on(ev, h);
    };

    fn.unbind = function (ev, h) {
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isObject"])(ev)) {
        for (var name in ev) {
          ev.hasOwnProperty(name) && this.off(name, ev[name]);
        }

        return this;
      } else {
        return this.off(ev, h);
      }
    };

    fn.click = function (h) {
      return h ? this.on('click', h) : this.trigger('click');
    };

    fn.change = function (h) {
      return h ? this.on('change', h) : this.trigger('change');
    };

    fn.keydown = function (h) {
      return h ? this.on('keydown', h) : this.trigger('keydown');
    };

    fn.delegate = function (selector, events, data, handler) {
      if (!handler) {
        handler = data;
      }

      return this.on(events, selector, function (e) {
        e.data = data;
        handler(e);
      });
    };

    fn.scrollLeft = function () {
      var el = this.get(0);
      el = el.nodeType == 9 ? el.defaultView : el;
      var win = el instanceof Window ? el : null;
      return win ? win.pageXOffset : el.scrollLeft || 0;
    };

    fn.scrollTop = function () {
      var el = this.get(0);
      el = el.nodeType == 9 ? el.defaultView : el;
      var win = el instanceof Window ? el : null;
      return win ? win.pageYOffset : el.scrollTop || 0;
    };

    fn.offset = function (coords) {
      var top, left;

      if (coords) {
        top = coords.top;
        left = coords.left;
      }

      if (typeof top != 'undefined') {
        this.css('top', "".concat(top, "px"));
      }

      if (typeof left != 'undefined') {
        this.css('left', "".concat(left, "px"));
      }

      return offset.call(this);
    };

    $.map = function (items, clb) {
      var ar = [];

      for (var i = 0; i < items.length; i++) {
        ar.push(clb(items[i], i));
      }

      return ar;
    };

    var indexOf = Array.prototype.indexOf;

    $.inArray = function (val, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, val, i);
    };

    $.Event = function (src, props) {
      if (!(this instanceof $.Event)) {
        return new $.Event(src, props);
      }

      this.type = src;

      this.isDefaultPrevented = function () {
        return false;
      };
    };
  }
});

/***/ }),

/***/ "./src/utils/fetch.js":
/*!****************************!*\
  !*** ./src/utils/fetch.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (typeof fetch == 'function' ? fetch.bind() : function (url, options) {
  return new Promise(function (res, rej) {
    var req = new XMLHttpRequest();
    req.open(options.method || 'get', url);
    req.withCredentials = options.credentials == 'include';

    for (var k in options.headers || {}) {
      req.setRequestHeader(k, options.headers[k]);
    }

    req.onload = function (e) {
      return res({
        status: req.status,
        statusText: req.statusText,
        text: function text() {
          return Promise.resolve(req.responseText);
        }
      });
    };

    req.onerror = rej; // Actually, fetch doesn't support onProgress feature

    if (req.upload && options.onProgress) {
      req.upload.onprogress = options.onProgress;
    } // Include body only if present


    options.body ? req.send(options.body) : req.send();
  });
});

/***/ }),

/***/ "./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Dragger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dragger */ "./src/utils/Dragger.js");
/* harmony import */ var _Sorter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sorter */ "./src/utils/Sorter.js");
/* harmony import */ var _Resizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Resizer */ "./src/utils/Resizer.js");



/* harmony default export */ __webpack_exports__["default"] = (function () {
  return {
    /**
     * Name of the module
     * @type {String}
     * @private
     */
    name: 'Utils',

    /**
     * Initialize module
     */
    init: function init() {
      return this;
    },
    Sorter: _Sorter__WEBPACK_IMPORTED_MODULE_1__["default"],
    Resizer: _Resizer__WEBPACK_IMPORTED_MODULE_2__["default"],
    Dragger: _Dragger__WEBPACK_IMPORTED_MODULE_0__["default"]
  };
});

/***/ }),

/***/ "./src/utils/mixins.js":
/*!*****************************!*\
  !*** ./src/utils/mixins.js ***!
  \*****************************/
/*! exports provided: isCommentNode, isTaggableNode, on, off, hasDnd, upFirst, matches, getModel, getElRect, camelCase, isTextNode, getKeyCode, getKeyChar, isEscKey, getElement, shallowDiff, normalizeFloat, getPointerEvent, getUnitFromValue, capitalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCommentNode", function() { return isCommentNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTaggableNode", function() { return isTaggableNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "off", function() { return off; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasDnd", function() { return hasDnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upFirst", function() { return upFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matches", function() { return matches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModel", function() { return getModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElRect", function() { return getElRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "camelCase", function() { return camelCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTextNode", function() { return isTextNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKeyCode", function() { return getKeyCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKeyChar", function() { return getKeyChar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEscKey", function() { return isEscKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElement", function() { return getElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shallowDiff", function() { return shallowDiff; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeFloat", function() { return normalizeFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPointerEvent", function() { return getPointerEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnitFromValue", function() { return getUnitFromValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return capitalize; });
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_0__);

var elProt = window.Element.prototype;
var matches = elProt.matches || elProt.webkitMatchesSelector || elProt.mozMatchesSelector || elProt.msMatchesSelector;
/**
 * Returns shallow diff between 2 objects
 * @param  {Object} objOrig
 * @param  {Objec} objNew
 * @return {Object}
 * @example
 * var a = {foo: 'bar', baz: 1, faz: 'sop'};
 * var b = {foo: 'bar', baz: 2, bar: ''};
 * shallowDiff(a, b);
 * // -> {baz: 2, faz: null, bar: ''};
 */

var shallowDiff = function shallowDiff(objOrig, objNew) {
  var result = {};
  var keysNew = Object(underscore__WEBPACK_IMPORTED_MODULE_0__["keys"])(objNew);

  for (var prop in objOrig) {
    if (objOrig.hasOwnProperty(prop)) {
      var origValue = objOrig[prop];
      var newValue = objNew[prop];

      if (keysNew.indexOf(prop) >= 0) {
        if (origValue !== newValue) {
          result[prop] = newValue;
        }
      } else {
        result[prop] = null;
      }
    }
  }

  for (var _prop in objNew) {
    if (objNew.hasOwnProperty(_prop)) {
      if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(objOrig[_prop])) {
        result[_prop] = objNew[_prop];
      }
    }
  }

  return result;
};

var on = function on(el, ev, fn) {
  ev = ev.split(/\s+/);
  el = el instanceof Array ? el : [el];

  var _loop = function _loop(i) {
    el.forEach(function (elem) {
      return elem.addEventListener(ev[i], fn);
    });
  };

  for (var i = 0; i < ev.length; ++i) {
    _loop(i);
  }
};

var off = function off(el, ev, fn) {
  ev = ev.split(/\s+/);
  el = el instanceof Array ? el : [el];

  var _loop2 = function _loop2(i) {
    el.forEach(function (elem) {
      return elem.removeEventListener(ev[i], fn);
    });
  };

  for (var i = 0; i < ev.length; ++i) {
    _loop2(i);
  }
};

var getUnitFromValue = function getUnitFromValue(value) {
  return value.replace(parseFloat(value), '');
};

var upFirst = function upFirst(value) {
  return value[0].toUpperCase() + value.toLowerCase().slice(1);
};

var camelCase = function camelCase(value) {
  var values = value.split('-').filter(String);
  return values[0].toLowerCase() + values.slice(1).map(upFirst);
};

var normalizeFloat = function normalizeFloat(value) {
  var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var valueDef = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var stepDecimals = 0;
  if (isNaN(value)) return valueDef;
  value = parseFloat(value);

  if (Math.floor(value) !== value) {
    var side = step.toString().split('.')[1];
    stepDecimals = side ? side.length : 0;
  }

  return stepDecimals ? parseFloat(value.toFixed(stepDecimals)) : value;
};

var hasDnd = function hasDnd(em) {
  return 'draggable' in document.createElement('i') && (em ? em.get('Config').nativeDnD : 1);
};
/**
 * Ensure to fetch the element from the input argument
 * @param  {HTMLElement|Component} el Component or HTML element
 * @return {HTMLElement}
 */


var getElement = function getElement(el) {
  if (Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isElement"])(el) || isTextNode(el)) {
    return el;
  } else if (el && el.getEl) {
    return el.getEl();
  }
};
/**
 * Check if element is a text node
 * @param  {HTMLElement} el
 * @return {Boolean}
 */


var isTextNode = function isTextNode(el) {
  return el && el.nodeType === 3;
};
/**
 * Check if element is a comment node
 * @param  {HTMLElement} el
 * @return {Boolean}
 */


var isCommentNode = function isCommentNode(el) {
  return el && el.nodeType === 8;
};
/**
 * Check if element is a comment node
 * @param  {HTMLElement} el
 * @return {Boolean}
 */

var isTaggableNode = function isTaggableNode(el) {
  return el && !isTextNode(el) && !isCommentNode(el);
};
/**
 * Ensure to fetch the model from the input argument
 * @param  {HTMLElement|Component} el Component or HTML element
 * @return {Component}
 */

var getModel = function getModel(el, $) {
  var model = el;
  Object(underscore__WEBPACK_IMPORTED_MODULE_0__["isElement"])(el) && (model = $(el).data('model'));
  return model;
};

var getElRect = function getElRect(el) {
  var def = {
    top: 0,
    left: 0,
    width: 0,
    height: 0
  };
  if (!el) return def;
  var rectText;

  if (isTextNode(el)) {
    var range = document.createRange();
    range.selectNode(el);
    rectText = range.getBoundingClientRect();
    range.detach();
  }

  return rectText || (el.getBoundingClientRect ? el.getBoundingClientRect() : def);
};
/**
 * Get cross-device pointer event
 * @param  {Event} ev
 * @return {Event}
 */


var getPointerEvent = function getPointerEvent(ev) {
  return ev.touches && ev.touches[0] ? ev.touches[0] : ev;
};
/**
 * Get cross-browser keycode
 * @param  {Event} ev
 * @return {Number}
 */


var getKeyCode = function getKeyCode(ev) {
  return ev.which || ev.keyCode;
};

var getKeyChar = function getKeyChar(ev) {
  return String.fromCharCode(getKeyCode(ev));
};

var isEscKey = function isEscKey(ev) {
  return getKeyCode(ev) === 27;
};

var capitalize = function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
};



/***/ }),

/***/ "./src/utils/polyfills.js":
/*!********************************!*\
  !*** ./src/utils/polyfills.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * File made for IE/Edge support
 * https://github.com/artf/grapesjs/issues/214
 */
/* harmony default export */ __webpack_exports__["default"] = (function () {
  /**
   * Check if IE/Edge
   * @return {Boolean}
   */
  var isIE = function isIE() {
    var match;
    var agent = window.navigator.userAgent;
    var rules = [['edge', /Edge\/([0-9\._]+)/], ['ie', /MSIE\s(7\.0)/], ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/], ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/]];

    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      match = rule[1].exec(agent);
      if (match) break;
    }

    return !!match;
  };

  if (isIE()) {
    var originalCreateHTMLDocument = DOMImplementation.prototype.createHTMLDocument;

    DOMImplementation.prototype.createHTMLDocument = function (title) {
      if (!title) title = '';
      return originalCreateHTMLDocument.apply(document.implementation, [title]);
    };
  }
});

/***/ })

/******/ })["default"];
});